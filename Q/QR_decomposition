#!/usr/local/bin/perl5.32.1
#u# http://rosettacode.org/wiki/QR_decomposition
#c# 2019-02-12 >RC
#p# OK
BEGIN { die 'BROKEN on iMac' if `uname -a` =~ /iMac/ }
BEGIN { die 'BROKEN on Ubuntu' if `uname -a` =~ /osboxes/ }

use strict;
use warnings;
use feature 'say';

use PDL;
use PDL::LinearAlgebra qw(mqr);

my @res;

my $a = pdl(
      [12, -51,   4],
      [ 6, 167, -68],
      [-4,  24, -41],
      [-1,   1,   0],
      [ 2,   0,   3]
);

my ( $q, $r )  = mqr($a);
push @res, $q; 
push @res, $r;

# compute result ('x' is overloaded) and round output for display (one value nearly zero)
push @res, grep { s/(-?[\d.]{3,}e\-1[56])/' 'x(-1+length($1)) . '0'/ge } $q x $r; 

say my $result = join "\n", @res;

my $ref = <<'END';

[
 [ -0.84641474   0.39129081  -0.34312406]
 [ -0.42320737  -0.90408727  0.029270162]
 [  0.28213825  -0.17042055  -0.93285599]
 [ 0.070534562 -0.014040652  0.001099372]
 [ -0.14106912  0.016655511   0.10577161]
]


[
 [-14.177447 -20.666627  13.401567]
 [         0 -175.04254  70.080307]
 [         0          0  35.201543]
]


[
 [           12           -51             4]
 [            6           167           -68]
 [           -4            24           -41]
 [           -1             1             0]
 [            2             0             3]
]

END
 #[           -1             1 3.3306691e-16]

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
