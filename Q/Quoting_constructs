#!/usr/local/bin/perl
#u# https://rosettacode.org/wiki/Quoting_constructs
#c# 2022-12-02 <RC
#p# OK
#n# kinda random

my @res;

use strict;
use warnings;
use feature 'say';

# superfluous alternative to qx/ / and ` ` 
push @res, <<`EXEC`;  # DH how I like it
ls bin/Go*                 
EXEC
#;   # DH odd placement...

# only with quoted begin tag then you can have spaces in between
push @res, <<END # so <<  'END' or <<     "END" and semi-colon is always optional
Make sure that the end tag must be exactly the same as the begin tag.
END
; # the above wouldn't have worked had it been something like 
  # END␣ ␣ ␣ (with redundant trailing spaces) 

push @res, <<"HERE1", <<"HERE2"    # it is also possible to stack heredocs
Hello from HERE1
HERE1
Hello from HERE2
HERE2
;

my $haystack = 'Santa says HoHoHo'; # a quoted pattern expanded before
my $needle   = "\x48\x6F";          # the regex is interpreted 
push @res, "1) Found.\n" if $haystack =~  /$needle{3}/;   # Matches Hooo  
push @res, "2) Found.\n" if $haystack =~ /($needle){3}/;  # Do what you mean 

# the following illustrate some behaviors under array interpolation 
#my @Y_M_D = sub{$_[5]+1900,$_[4]+1,$_[3]}->(localtime(time));
my @Y_M_D = <2022 12 02>;
local  $\ = "\n";  
push @res,  @Y_M_D;     # YMD 
push @res, "@Y_M_D";    # Y M D 
local  $, = '-';   # output field separator 
push @res,  @Y_M_D;     # Y-M-D 
push @res, "@Y_M_D";    # Y M D
local  $" = '|';   # interpolated list separator 
push @res, "@Y_M_D";    # Y_M_D 

say my $result = join "\n", @res;

my $ref = <<'EOD';
bin/Go-P5

bin/Go-P5-i

Make sure that the end tag must be exactly the same as the begin tag.

Hello from HERE1

Hello from HERE2

2) Found.

2022
12
02
2022 12 02
2022
12
02
2022 12 02
2022|12|02
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
