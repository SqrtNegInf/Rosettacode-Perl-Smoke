#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Fairshare_between_two_and_more
#c# 2020-02-02 >RC
#p# OK
#n# polymod used to 'count in base B' (low digits first which is what counts, modulus zaps higher ones)

use strict;
use warnings;
use feature 'say';
my @res;

use Math::AnyNum qw(sum polymod);

# cheap trick :-)
#use Math::AnyNum 'sumdigits';
#my $n = 3900;
#my $b = 390;
#for my $b (2,3,5,11) {
#    printf '%3d:', $b;
#    printf '%5d'x$n . "\n", map { sumdigits($_,$b) % $b } 0..$n-1;
#}

sub fairshare {
    my($b, $n) = @_; 
    sprintf '%3d'x$n, map { sum ( polymod($_, $b, $b )) % $b } 0..$n-1;
}

for (<2 3 5 11>) {    # DH P:C mis-reads this as readline
    push @res, sprintf "%3s:%s", $_, fairshare($_, 25);
}

say my $result = join "\n", @res;

my $ref = <<'END';
  2:  0  1  1  0  1  0  0  1  0  1  1  0  1  0  0  1  0  1  1  0  1  0  0  1  0
  3:  0  1  2  1  2  0  2  0  1  1  2  0  2  0  1  0  1  2  2  0  1  0  1  2  1
  5:  0  1  2  3  4  1  2  3  4  0  2  3  4  0  1  3  4  0  1  2  4  0  1  2  3
 11:  0  1  2  3  4  5  6  7  8  9 10  1  2  3  4  5  6  7  8  9 10  0  2  3  4
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
