#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/First_perfect_square_in_base_N_with_N_unique_digits
#c# 2019-05-21 >RC, 2019-05-21 <RC, 2019-05-23 <RC
#p# OK
#n# trizen++

use strict;
use warnings;
use ntheory qw(:all);
use List::Util qw(uniq);
my $result;
 
sub first_square {
    my ($base) = @_;
 
    my $start = sqrtint(fromdigits([1, 0, 2 .. $base-1], $base));
 
    for (my $k = $start ; ; ++$k) {
        if (uniq(todigits($k * $k, $base)) == $base) {
            return $k * $k;
        }
    }
}
 
foreach my $n (2 .. 16) {
    my $s = first_square($n);
    $result .= sprintf("Base %2d: %10s² == %s\n", $n,
        todigitstring(sqrtint($s), $n), todigitstring($s, $n));
}

print $result;

my $ref = <<'EOD';
Base  2:         10² == 100
Base  3:         22² == 2101
Base  4:         33² == 3201
Base  5:        243² == 132304
Base  6:        523² == 452013
Base  7:       1431² == 2450361
Base  8:       3344² == 13675420
Base  9:      11642² == 136802574
Base 10:      32043² == 1026753849
Base 11:     111453² == 1240a536789
Base 12:     3966b9² == 124a7b538609
Base 13:    3828943² == 10254773ca86b9
Base 14:    3a9db7c² == 10269b8c57d3a4
Base 15:   1012b857² == 102597bace836d4
Base 16:   404a9d9b² == 1025648cfea37bd9
EOD

use Test::More;
is ($result, $ref);
done_testing;
