#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Faulhaber%27s_triangle
#c# 2018-08-03 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

use List::Util qw(sum);
use Math::BigRat try => 'GMP';
use ntheory qw(binomial bernfrac);

sub faulhaber_triangle {
    my ($p) = @_;
    map {
        Math::BigRat->new(bernfrac($_))
          * binomial($p, $_)
          / $p
    } reverse(0 .. $p-1);
}

# First 10 rows of Faulhaber's triangle
foreach my $p (1 .. 10) {
    $result .= sprintf("%6s", $_) for faulhaber_triangle($p);
    $result .= "\n";
}

# Extra credit
my $p = 17;
my $n = Math::BigInt->new(1000);
my @r = faulhaber_triangle($p+1);
$result .= "\n". sum(map { $r[$_] * $n**($_ + 1) } 0 .. $#r) ."\n";

say $result; 

my $ref = <<'EOD';
     1
   1/2   1/2
   1/6   1/2   1/3
     0   1/4   1/2   1/4
 -1/30     0   1/3   1/2   1/5
     0 -1/12     0  5/12   1/2   1/6
  1/42     0  -1/6     0   1/2   1/2   1/7
     0  1/12     0 -7/24     0  7/12   1/2   1/8
 -1/30     0   2/9     0 -7/15     0   2/3   1/2   1/9
     0 -3/20     0   1/2     0 -7/10     0   3/4   1/2  1/10

56056972216555580111030077961944183400198333273050000
EOD

use Test::More;
is ($result, $ref);
done_testing;
