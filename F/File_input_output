#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/File_input/output
#c# 2018-08-06 <RC
#p# OK
#f# RC file: input_output.txt

my $result;

use strict;
use warnings;
use feature 'say';

# '>' overwrites file, '>>' appends to file, just like in the shell
open my $fh_in,  '<', 'ref/input_output.txt' or die "could not open <input.txt> for reading: $!";
open my $fh_out, '>', 'run/input_output.txt' or die "could not open <output.txt> for writing: $!";

binmode $fh_out; # marks filehandle for binary content on systems where that matters

# prints current line to file associated with $fh_out filehandle
print $fh_out $_ while <$fh_in>;

# the same, less concise
#while (<$fh_in>) {
#  print $fh_out $_;
#};

close $fh_in;
close $fh_out;

# Perl has also a powerful mechanism in conjunction with opening files called IO disciplines. 
# It allows you to automatically apply chainable transformations on the input and output. 
# Mangling newlines, gzip (de)compression and character encoding are the most used examples.
