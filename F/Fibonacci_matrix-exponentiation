#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Fibonacci_matrix-exponentiation
#c# 2020-02-01 >RC
#p# OK
#n# very close translation of Sidef (needs ':overload', or starts failing at 2**53)

use strict;
use warnings;
use feature 'say';

my @res;

use Math::AnyNum qw(:overload fibmod floor);
use Math::MatrixLUP;

sub fibonacci {
    my $M = Math::MatrixLUP->new([ [1, 1], [1,0] ]);
    (@{$M->pow(shift)})[0][1]
}
 
# for 32: 1186.121u 63.769s 20:54.58 99.6%
for my $n (16) { #, 32) {
    my $f = fibonacci(2**$n);
    push @res, "F(2^$n) = " . substr($f,0,20) . ' ... ' . $f % 10**20;
}

sub binet_approx {
    my($n) = @_;
    use constant PHI =>   sqrt(1.25) + 0.5 ;
    use constant IHP => -(sqrt(1.25) - 0.5);
    (log(PHI)*$n - log(PHI-IHP))
}
 
sub nth_fib_first_k_digits {
    my($n,$k) = @_;
    my $f = binet_approx($n);

    floor(exp($f - log(10)*(floor($f / log(10) + 1))) * 10**$k)
}

sub nth_fib_last_k_digits {
    my($n,$k) = @_;
    fibmod($n, 10**$k);
}

for my $n (16, 32, 64) {
    my $first20 = nth_fib_first_k_digits(2**$n, 20);
    my $last20  = nth_fib_last_k_digits(2**$n, 20);
    push @res, sprintf "F(2^$n) = %s ... %s", $first20, $last20;
}

say my $result = join "\n", @res;

my $ref = <<'END';
F(2^16) = 73199214460290552832 ... 97270190955307463227
F(2^16) = 73199214460290552832 ... 97270190955307463227
F(2^32) = 61999319689381859818 ... 39623735538208076347
F(2^64) = 11175807536929528424 ... 17529800348089840187
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
