#!/usr/local/bin/perl
#u# https://rosettacode.org/wiki/Factor-perfect_numbers
#t# inprogress
#c# 2022-xx-xx >RC
#p# OK

use Data::Printer;          # debug only
use Time::HiRes qw(sleep);  # debug only

my @res;

use v5.36;

use ntheory 'divisors';
use enum qw(False True);
use List::AllUtils <firstidx sum>;

my $n = 4;
my @fpns = (0, 1);
my %cache;

sub proper_divisors ($x) {
   my @l;
   @l = 1 if $x > 1;
   for my $d (2 .. int sqrt $x) {
      if (0 == $x % $d) { push @l, $d; my $y = int($x/$d); push @l, $y if $y != $d }
   }
   @l
}

sub erdosFactorCount ($n) {
   my @foo = proper_divisors($n); shift @foo;
   my ($sum,@divs) = (0, @foo); #(proper_divisors $n)[1..*]);
   for my $d (@divs) {
      my $t = int($n/$d);
      unless (exists $cache{$t}) { $cache{$t} = erdosFactorCount($t) }
      $sum += $cache{$t}
   }
   return $sum + 1
}

sub moreMultiples ($to, $from) {
   my @oneMores;
   for my $j (@$from) {
      push @oneMores, [@$to, $j] if $j > $$to[-1] && 0 == $j % $$to[-1]
   }
   return unless @oneMores;
   for (0 .. $#oneMores) {
      push @oneMores, moreMultiples($oneMores[$_], $from);
   }
   return @oneMores
}

my @listing = moreMultiples [1], [proper_divisors(48)];
#say $#listing; exit;
p @listing; exit;

say my $result = join "\n", @res;

my $ref = <<'END';
END

use Test::More;
chomp $ref;
is($result, $ref);
#is(($result =~ s/\s//gr), ($ref =~ s/\s//gr));
done_testing();

__END__

=={{header|Perl}}==
{{trans|Raku}}
{{libheader|ntheory}}
<syntaxhighlight lang="perl" line>
</syntaxhighlight>
{{out}}
<pre>
</pre>
