#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/First_perfect_square_in_base_N_with_N_unique_digits
#c# 2019-05-21 >RC, 2019-05-21 <RC
#p# OK
#n# with a little help from thundergnat++
#n# but can't go past 16, bigint issue again

use strict;
use warnings;
use feature 'say';
use ntheory 'todigitstring';
my @res;

# older Perls need this I guess?
#use utf8;
#binmode('STDOUT', 'utf8');

sub first_square {
    my $n = shift;
    my $r = int( $n**( ($n - 1) / 2) ) || 1;
    my @digits = reverse split '', substr('0123456789abcdef',0,$n);
    TRY: while (1) {
        my $sq = $r * $r;
        my $cnt = 0;
        my $s = todigitstring($sq, $n);
        my $i = scalar @digits;
        for (@digits) {
            $r++ and redo TRY if (-1 == index($s, $_)) || ($i-- + $cnt < $n);
            last if $cnt++ == $n;
        }
        return sprintf "Base %2d: %10s² == %s", $n, todigitstring($r, $n), todigitstring($sq, $n);
    }
}

say "First perfect square with N unique digits in base N: ";
push @res, first_square($_) for 2..16;

say my $result = join "\n", @res;

my $ref = <<'EOD';
Base  2:         10² == 100
Base  3:         22² == 2101
Base  4:         33² == 3201
Base  5:        243² == 132304
Base  6:        523² == 452013
Base  7:       1431² == 2450361
Base  8:       3344² == 13675420
Base  9:      11642² == 136802574
Base 10:      32043² == 1026753849
Base 11:     111453² == 1240a536789
Base 12:     3966b9² == 124a7b538609
Base 13:    3828943² == 10254773ca86b9
Base 14:    3a9db7c² == 10269b8c57d3a4
Base 15:   1012b857² == 102597bace836d4
Base 16:   404a9d9b² == 1025648cfea37bd9
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
