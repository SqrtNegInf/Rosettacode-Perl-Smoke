#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Fractran
#c# 2018-08-08 <RC
#p# OK

use feature 'say';
my $result;


# Instead of printing all steps, I chose to only print those steps which were a power of two.
# This makes the fact that it's a prime-number-generating program much clearer.

use strict;
use warnings;
use Math::BigRat;

my ($n, @P) = map Math::BigRat->new($_), qw{
2 17/91 78/85 19/51 23/38 29/33 77/29 95/23 77/19 1/17 11/13 13/11 15/14 15/2 55/1
};

$|=1;
MAIN: for( 1 .. 10000 ) {
	#$result .= " " if $_ > 1;
	my ($pow, $rest) = (0, $n->copy);
	until( $rest->is_odd ) {
		++$pow;
		$rest->bdiv(2);
	}
	if( $rest->is_one ) {
		$result .= "2**$pow\n";
	} else {
		#$result .= "$n\n";
	}
	for my $f_i (@P) {
		my $nf_i = $n * $f_i;
		next unless $nf_i->is_int;
		$n = $nf_i;
		next MAIN;
	}
	last;
}

#If you uncomment the #print $n, it will print all the steps.

say $result; 
my $ref = <<'EOD';
2**1
2**2
2**3
2**5
2**7
2**11
2**13
2**17
EOD

use Test::More;
is ($result, $ref);
done_testing();
