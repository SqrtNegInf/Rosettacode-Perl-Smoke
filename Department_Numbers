#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Department_Numbers
#c# 2018-07-28 <RC
#p# OK

use feature 'say';
my $result1;
my $result2;

my @even_numbers;
 
for (1..7)
{
  if ( $_ % 2 == 0)
  {
    push @even_numbers, $_;
  }
}
 
print "Police\tFire\tSanitation\n";
 
foreach my $police_number (@even_numbers)
{
  for my $fire_number (1..7)
  {
    for my $sanitation_number (1..7)
    {
      if ( $police_number + $fire_number + $sanitation_number == 12 && 
           $police_number != $fire_number && 
           $fire_number != $sanitation_number && 
           $sanitation_number != $police_number)
      {
        $result1 .= "$police_number\t$fire_number\t$sanitation_number\n";
      }
    }
  }	
}
 
say $result1; 

#Above Code cleaned up and shortened

 
use strict;   # Not necessary but considered good perl style
use warnings; # this one too
 
#print "Police\t-\tFire\t-\tSanitation\n";
for my $p ( 1..7 )  # Police Department
{
  for my $f ( 1..7) # Fire Department
  {
    for my $s ( 1..7 ) # Sanitation Department
    {
      if ( $p % 2 == 0 && $p + $f + $s == 12 && $p != $f && $f != $s  && $s != $p && $f != $s) # Check if the combination of numbers is valid
      {
        $result2 .= "$p\t-\t$f\t-\t$s\n";
      }
    }
  }
}
 
my $ref1 = <<'EOD';
2	3	7
2	4	6
2	6	4
2	7	3
4	1	7
4	2	6
4	3	5
4	5	3
4	6	2
4	7	1
6	1	5
6	2	4
6	4	2
6	5	1
EOD
 
my $ref2 = <<'EOD';
2	-	3	-	7
2	-	4	-	6
2	-	6	-	4
2	-	7	-	3
4	-	1	-	7
4	-	2	-	6
4	-	3	-	5
4	-	5	-	3
4	-	6	-	2
4	-	7	-	1
6	-	1	-	5
6	-	2	-	4
6	-	4	-	2
6	-	5	-	1
EOD

use Test::More;
is ($result1, $ref1);
is ($result2, $ref2);
done_testing();
