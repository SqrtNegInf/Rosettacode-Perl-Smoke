#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Pi
#c# 2018-08-20 <RC
#p# OK

use feature 'say';
my $result;

# Perl being what it is, there are many ways to do this with many variations. With a fixed number of digits and the Math::BigInt::GMP library installed, the [[Arithmetic-geometric mean/Calculate Pi code will be much faster than any of these methods other than some of the modules. If Math::GMP is installed, then replacing "use bigint" with "use Math::GMP qw/:constant/" in either the Perl6 spigot or Machin methods below will be pretty fast. They are not too bad if the Math::BigInt::GMP library is installed. With the default Math::BigInt backend, the AGM code isn't very fast and the Perl6 spigot and Machin methods are very slow.

# Simple Spigot[edit]
# This takes a numer-of-digits argument, but we can make it large (albeit using memory and some startup time). Unlike the other two, this uses no modules and does not require bigints so is worth showing.

sub pistream {
  my $digits = shift;
  my(@out, @a);
  my($b, $c, $d, $e, $f, $g, $i, $d4, $d3, $d2, $d1);
  my $outi = 0;

  $digits++;
  $b = $d = $e = $g = $i = 0;
  $f = 10000;
  $c = 14 * (int($digits/4)+2);
  @a = (20000000) x $c;
  $result = "3.";
  while (($b = $c -= 14) > 0 && $i < $digits) {
    $d = $e = $d % $f;
    while (--$b > 0) {
      $d = $d * $b + $a[$b];
      $g = ($b << 1) - 1;
      $a[$b] = ($d % $g) * $f;
      $d = int($d / $g);
    }
    $d4 = $e + int($d/$f);
    if ($d4 > 9999) {
      $d4 -= 10000;
      $out[$i-1]++;
      for ($b = $i-1; $out[$b] == 1; $b--) {
        $out[$b] = 0;
        $out[$b-1]++;
      }
    }
    $d3 = int($d4/10);
    $d2 = int($d3/10);
    $d1 = int($d2/10);
    $out[$i++] = $d1;
    $out[$i++] = $d2-$d1*10;
    $out[$i++] = $d3-$d2*10;
    $out[$i++] = $d4-$d3*10;
    $result .= join "", @out[$i-15 .. $i-15+3] if $i >= 16;
  }
  # We've closed the spigot.  Print the remainder without rounding.
  $result .= join "", @out[$i-15+4 .. $digits-2]; #. "\n";
}

pistream(1001); 
say $result;
my $ref = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989';
use Test::More;
is ($result, $ref);
done_testing();

