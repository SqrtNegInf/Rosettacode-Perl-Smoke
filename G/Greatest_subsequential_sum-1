#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Greatest_subsequential_sum
#c# 2018-08-11 <RC
#p# OK
#n# noodling, not worth RC update

srand 123456;

use strict;
use warnings;
use feature 'say';
my $result;

sub max_sub :prototype(\@) {
    my ($a, $maxs, $maxe, $s, $sum, $maxsum) = shift;
    $maxs   //= 0;
    $maxe   //= 0;
    $sum    //= 0;
    $maxsum //= 0;
    for (0 .. $#$a) {
        my $t = $sum + $a->[$_];
        ($s, $sum) = $t > 0 ? ($s, $t) : ($_ + 1, 0);

        if ($maxsum < $sum) {
            $maxsum = $sum;
            ($maxs, $maxe) = ($s, $_ + 1)
        }
    }
    @$a[$maxs .. $maxe - 1]
}

my @a = map { int(rand(20) - 10) } 1 .. 10;
my @b = (-1) x 10;

$result .= "seq: @a\nmax: [ @{[max_sub @a]} ]\n";
$result .= "seq: @b\nmax: [ @{[max_sub @b]} ]\n";

say $result;
my $ref = <<'END';
seq: 8 3 2 -5 -8 -4 -5 9 0 9
max: [ 9 0 9 ]
seq: -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
max: [  ]
END

use Test::More;
is ($result, $ref);
done_testing();
