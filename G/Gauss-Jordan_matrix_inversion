#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Gauss-Jordan_matrix_inversion
#c# 2018-10-RC >RC
#p# BROKEN

use feature 'say';
use warnings;
use strict 'vars';

my $result;
# my @res;

sub rref {
  our @m; local *m = shift;
  @m or return;
  my ($lead, $rows, $cols) = (0, scalar(@m), scalar(@{$m[0]}));

  foreach my $r (0 .. $rows - 1) {
     $lead < $cols or return;
      my $i = $r;

      until ($m[$i][$lead])
         {++$i == $rows or next;
          $i = $r;
          ++$lead == $cols and return;}

      @m[$i, $r] = @m[$r, $i];
      my $lv = $m[$r][$lead];
      $_ /= $lv foreach @{ $m[$r] };

      my @mr = @{ $m[$r] };
      foreach my $i (0 .. $rows - 1)
         {$i == $r and next;
          ($lv, my $n) = ($m[$i][$lead], -1);
          $_ -= $lv * $mr[++$n] foreach @{ $m[$i] };}

      ++$lead;}
}

sub display { join("\n" => map join(" " => map(sprintf("%4d", $_), @$_)), @{+shift})."\n" }

my @m = (
      [  1,  2,  -1,  -4 ],
      [  2,  3,  -1, -11 ],
      [ -2,  0,  -3,  22 ]);

rref(\@m);
say $result = display(\@m);

# func gauss_jordan_invert (M) {
#     var I = M.len.of {|i|
#         M.len.of {|j|
#             i == j ? 1 : 0
#         }
#     }
#  
#     var A = gather {
#         ^M -> each {|i| take(M[i] + I[i]) }
#     }
#  
#     rref(A).map { .last(M.len) }
# }

sub gauss_jordan_invert { #(@m where *.&is-square) {
    my(@m) = @_;
    #^@m .map: { @m[$_].append: identity(+@m)[$_] };
    #@m.&rref[*]Â»[+@m .. *];
}

#sub is-square (@m) { so @m == all @m[*] }

#sub identity ($n) { [ 1, |(0 xx $n-1) ], *.rotate(-1) ... *.tail }

sub matrix_ident {
    my($n) = @_;
    map { [ (0) x $_, 1, (0) x ($n-1 - $_) ] } 0..$n-1
}

my @tests = (
#    [
#      [ 1, 2, 3 ],
#      [ 4, 1, 6 ],
#      [ 7, 8, 9 ]
#    ],
    [
      [ 2, -1,  0 ],
      [-1,  2, -1 ],
      [ 0, -1,  2 ]
    ],
#    [
#      [ -1, -2, 3, 2 ],
#      [ -4, -1, 6, 2 ],
#      [  7, -8, 9, 1 ],
#      [  1, -2, 1, 3 ]
#    ],
);


for my $matrix (@tests) {
    say 'Original Matrix:'; display(\@$matrix);
    my @gj = gauss_jordan_invert( @$matrix );
    say 'Gauss-Jordan Inverted Matrix:', display(\@gj);
    say "\n";
}

#use Test::More;
#is ($result, $ref);
#done_testing();

__END__

say $result; 
#say $result = join "\n", @res;

Original Matrix:
      2      -1       0
     -1       2      -1
      0      -1       2

Gauss-Jordan Inverted Matrix:
    3/4     1/2     1/4
    1/2       1     1/2
    1/4     1/2     3/4

Original Matrix:
     -1      -2       3       2
     -4      -1       6       2
      7      -8       9       1
      1      -2       1       3

Gauss-Jordan Inverted Matrix:
 -21/23   17/69  13/138   19/46
 -38/23   15/23    1/23   15/23
 -16/23   25/69  11/138    9/46
 -13/23   16/69   -2/69   13/23
EOD

use Test::More;
#is($result, $ref);
#done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre style="height:35ex"></pre>
