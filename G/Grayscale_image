#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Grayscale_image
#c# 2018-08-11 <RC
#p# OK
#f# RC file: color-wheel-gray.jpg

use strict;
use warnings;
use feature 'say';

use Image::Imlib2;

# Since we are using Imlib2, this one does not implement really a gray-scale (single channel) storage; 
# it only converts an RGB image to an RGB image with the same three colour components for each pixel 
# (which result in a gray-scale-like image)

sub tograyscale
{
    my $img = shift;
    my $gimg = Image::Imlib2->new($img->width, $img->height);
    for ( my $x = 0; $x < $gimg->width; $x++ ) {
	for ( my $y = 0; $y < $gimg->height; $y++ ) {
	    my ( $r, $g, $b, $a ) = $img->query_pixel($x, $y);
	    my $gray = int(0.2126 * $r + 0.7152 * $g + 0.0722 * $b);
	    # discard alpha info...
	    $gimg->set_color($gray, $gray, $gray, 255);
	    $gimg->draw_point($x, $y);
	}
    }
    return $gimg;
}

my $animage = Image::Imlib2->load("ref/color_wheel.png");
my $gscale  = tograyscale($animage);
$gscale->set_quality(80);
$gscale->save("run/color-wheel-gray.jpg");
