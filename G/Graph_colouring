#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Graph_colouring
#c# 2021-02-04 >RC
#p# OK
#n# code fragility in zero-valued node vs Raku...

use strict;
use warnings;
no warnings 'uninitialized';
use feature 'say';

use constant True => 1;

use List::Util qw(head uniq);

my @res;

sub GraphNodeColor {
    my(%OneMany, %NodeColor, %NodePool, @ColorPool);
    my(@data) = @_;

    for (@data) {
        my($a,$b) = @$_;
        push @{$OneMany{$a}}, $b; 
        push @{$OneMany{$b}}, $a;
    }

    @ColorPool = 0 .. -1 + scalar %OneMany;
    $NodePool{$_} = True for keys %OneMany;

    if ($OneMany{''}) { # skip islanders for now
        delete $NodePool{$_} for @{$OneMany{''}};
        delete $NodePool{''};
    }

    while (%NodePool) {
        my $color = shift @ColorPool;
        my %TempPool = %NodePool;

        while (my $n = head 1, sort keys %TempPool) {
            $NodeColor{$n} = $color;
            delete $TempPool{$n};
            delete $TempPool{$_} for @{$OneMany{$n}} ; # skip neighbors as well
            delete $NodePool{$n};
        }

        if ($OneMany{''}) { # islanders use an existing color
            $NodeColor{$_} = head 1, sort values %NodeColor for @{$OneMany{''}};
        }
    }
    %NodeColor
}

my @DATA = (
    [ [1,2],[2,3],[3,1],[4,undef],[5,undef],[6,undef] ],  # zero as a node value caused issues, so re-number
    [ [1,6],[1,7],[1,8],[2,5],[2,7],[2,8],[3,5],[3,6],[3,8],[4,5],[4,6],[4,7] ],
    [ [1,4],[1,6],[1,8],[3,2],[3,6],[3,8],[5,2],[5,4],[5,8],[7,2],[7,4],[7,6] ],
    [ [1,6],[7,1],[8,1],[5,2],[2,7],[2,8],[3,5],[6,3],[3,8],[4,5],[4,6],[4,7] ]
);

for my $d (@DATA) {
    my %result = GraphNodeColor @$d;

    my($graph,$colors);
    $graph  .= '(' . join(' ', @$_) . '), ' for @$d;
    $colors .= ' ' . $result{$$_[0]} . '-' . ($result{$$_[1]} // '') . '   ' for @$d;

    push @res, 'Graph  : ' . $graph =~ s/,\s*$//r;
    push @res, 'Colors : ' . $colors;
    push @res, 'Nodes  : ' . keys %result;
    push @res, 'Edges  : ' . @$d;
    push @res, 'Unique : ' . uniq values %result; 
    push @res, '';
}

say my $result = join "\n", @res;

my $ref = <<'END';
Graph  : (1 2), (2 3), (3 1), (4 ), (5 ), (6 )
Colors :  0-1    1-2    2-0    0-    0-    0-   
Nodes  : 6
Edges  : 6
Unique : 3

Graph  : (1 6), (1 7), (1 8), (2 5), (2 7), (2 8), (3 5), (3 6), (3 8), (4 5), (4 6), (4 7)
Colors :  0-1    0-1    0-1    0-1    0-1    0-1    0-1    0-1    0-1    0-1    0-1    0-1   
Nodes  : 8
Edges  : 12
Unique : 2

Graph  : (1 4), (1 6), (1 8), (3 2), (3 6), (3 8), (5 2), (5 4), (5 8), (7 2), (7 4), (7 6)
Colors :  0-1    0-2    0-3    1-0    1-2    1-3    2-0    2-1    2-3    3-0    3-1    3-2   
Nodes  : 8
Edges  : 12
Unique : 4

Graph  : (1 6), (7 1), (8 1), (5 2), (2 7), (2 8), (3 5), (6 3), (3 8), (4 5), (4 6), (4 7)
Colors :  0-1    1-0    1-0    1-0    0-1    0-1    0-1    1-0    0-1    0-1    0-1    0-1   
Nodes  : 8
Edges  : 12
Unique : 2

END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
