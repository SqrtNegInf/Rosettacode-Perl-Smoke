#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Find_the_intersection_of_a_line_with_a_plane
#c# 2018-09-27 >RC
#p# BROKEN

use feature 'say';
use warnings;
#use strict 'vars';

use Data::Dumper;

package Line;

sub new {
    my ($class, $args) = @_;
    my $self = {
        P0 => $args->{P0}, # point
        u => $args->{u},  # ray
    };
}

package Plane;

sub new {
    my ($class, $args) = @_;
    my $self = {
        V0 => $args->{V0}, # point
        n  => $args->{n}, # normal
    };
}

package main;

 
#sub dot {
#    my($a,$b) = @_;
#    @y = @{$b->{n}};
#    @x = @{$a->{u}};
#    for (0..$#x) { $s +=  $x[$_]*$y[$_] }
#    $s;
#} 
 
sub dot {
    our @a ; *a = shift; 
    our @b ; *b = shift; 
    my($s);
    for (0..$#a) { $s +=  $a[$_]*$b[$_] }
    $s;
} 

sub v3minus { 
    my($a,$b) = @_;
    my @d;
    @y = @{$b->{V0}};
    @x = @{$a->{P0}};
    for (0..$#x) {
        $d[$_] = $x[$_] - $y[$_];
    }
    return @d;
}

sub line_plane_intersection {
    my($L, $P) = @_;
    my $cos = dot($L->{u}, $P->{n}); # cosine between normal & ray
    return 'Vectors are orthoganol; no intersection or line within plane'
      if $cos == 0;
     my @W = v3minus($L,$P);      # difference between P0 and V0
#$DB::single = 1;
     my $SI = -dot($P->{n}, \@W) / $cos;  # line segment where it intersets the plane
say 'SI ' . $SI; exit;
#    $W <<+>> $SI <<*>> $L->{u} <<+>> $P->{V0}; # point where line intersects the plane
 }
 
my $L = Line->new({ P0=>[0,0,10], u=>[0,-1,-1]});
my $P = Plane->new({ V0=>[0,0,5 ], n=>[0, 0, 1]});
say 'Intersection at point: ', my $xxx = line_plane_intersection($L, $P);

#is('0 -5 5', $ref);
#say $result; 
#say $result = join "\n", @res;
my $ref = <<'EOD';
EOD

use Test::More;
#is ($result, $ref);
#done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre  style="height:35ex"></pre>
