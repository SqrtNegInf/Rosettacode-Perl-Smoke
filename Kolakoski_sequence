#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Kolakoski_sequence
#c# 2018-05-23 <RC
#p# OK
#n# sub needs to be a generator?

use feature 'say';

sub kolakoski {
my($terms,@seed) = @_;
my @k;
    my $k = $seed[0] == 1 ? 1 : 0;
    if ($k == 1) { 
        @k = (1, split //, ($seed[1] x $seed[1]));
    print  'K0:' . join ':', @k;
    } else { 
        @k = $seed[0] x $seed[0];
    print  'K1:' . join ':', @k;
    }
die;
do {
        #, { $k++; $seed[$k % +@seed] x @k[$k] } ... *;
} until $terms <= +@k; 
    $init = join ' ', @$seed;
# 1 2 2 1 1 2 1 2 2 1 2 2 1 1 2 1 1 2 2 1
    print "\n## $terms members of the series generated from <$init> is:\n";
$DB::single = 1;
#die 'this is in progress...';
    #print  'K:' . join ' ', @k;
    return @k;
}

#sub rle (*@series) { @series.join.subst(/((.)$0*)/, -> { $0.chars }, :g).combÂ».Int }
 
# Testing
my @a = qw<1 2>;
kolakoski(20, @a);
#kolakoski(20, [1, 2]);
#kolakoski(20, [2, 1]);
#kolakoski(30, [1, 3, 1, 2]);
#kolakoski(30, [1, 3, 2, 1]);

__END__
    my @kolakoski = kolakoski(@seed)[^$terms];
    my @rle = rle @kolakoski;
    @res.push: "   Looks like a Kolakoski sequence?: " ~ ~(@rle[*] eqv @kolakoski[^@rle]);
#}
#.say for @res;

my $ref = qq:to/END/;

## 20 members of the series generated from [1, 2] is:
1 2 2 1 1 2 1 2 2 1 2 2 1 1 2 1 1 2 2 1
   Looks like a Kolakoski sequence?: True

## 20 members of the series generated from [2, 1] is:
2 2 1 1 2 1 2 2 1 2 2 1 1 2 1 1 2 2 1 2
   Looks like a Kolakoski sequence?: True

## 30 members of the series generated from [1, 3, 1, 2] is:
1 3 3 3 1 1 1 2 2 2 1 3 1 2 2 1 1 3 3 1 2 2 2 1 3 3 1 1 2 1
   Looks like a Kolakoski sequence?: True

## 30 members of the series generated from [1, 3, 2, 1] is:
1 3 3 3 2 2 2 1 1 1 1 1 3 3 2 2 1 1 3 2 1 1 1 1 3 3 3 2 2 1
   Looks like a Kolakoski sequence?: False
END

use Test;
is @res.join("\n"), chomp $ref;
