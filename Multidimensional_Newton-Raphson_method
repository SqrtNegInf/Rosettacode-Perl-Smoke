#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Multidimensional_Newton-Raphson_method
#t# skiptest
#c# 2019-03-RC >RC
#p# OK

use Data::Printer;

use strict;
use warnings;
use feature 'say';
my @res;

use utf8;
binmode STDOUT, ":utf8";
 
sub solve_funcs {
    #my($funcs, $iterations, $guesses, $ε) = @_;
    our @funcs; local *funcs = shift;
    my $iterations = shift
    our @guesses; local *guesses = shift;
    my $ε = shift;
    my ($error_value, @values, @delta); #, @jacobian);
    my $n = $#funcs;
    for (1 .. $iterations) {
        #for (0..$n) { @values[$_] = $funcs[$_](@guesses); } # eval?
        $error_value = 0;
        for (0..$n) { $error_value += abs $values[$_] }
        return @guesses if $error_value <= $ε;
        for (0..$n) { @delta[$_] = -$values[$_] }
        my @jacobian = jacobian(\@funcs, $ε, \@guesses); 
        @delta = solve_matrix(\@jacobian, \@delta);
        for (my $j = 0, $error_value = 0; $j < +@funcs; $j++) {
            $error_value += abs $delta[$j];
            $guesses[$j] += $delta[$j];
        }
        return @guesses if $error_value <= $ε;
    }
    return @guesses;
}
 
sub jacobian_untested {
    our @funcs; local *funcs = shift;
    my $ε = shift;
    our @points; local *points = shift;
    my ($Δ, @P, @M, @plusΔ, @minusΔ, @jacobian);
    for my $i (0..$#points) {
        @plusΔ = @minusΔ = @points;
        $Δ = ($ε * abs($points[$i]) ) || $ε;
        $plusΔ[$i] = $points[$i] + $Δ;
        $minusΔ[$i] = $points[$i] - $Δ;
        for (0..$#funcs) { $P[$_] = $funcs[$_](@plusΔ); }
        for (0..$#funcs) { $M[$_] = $funcs[$_](@minusΔ); }
        for my $j (0..$#funcs) {
            $jacobian[$j][$i] = ($P[$j] - $M[$j]) / (2 * $Δ);
        }
    }
    return @jacobian;
}

# jacobian($func_array, $point) calculates the Jacobian matrix at
# $point for the array of functions referred to by $func_array.
# $point is a reference to an array of coordinates.
#
sub jacobian {
    my ($func_array, $point) = @_;
    my ($delta, $i, $j, $k, $coord, @values, @func, @jacobian);
    my $epsilon = 1e-8;

    # Feed the point into each function.
    #
    for ($i = 0; $i < @$func_array; $i++) {
        $values[$i] = &{$func_array->[$i]}( @$point );
    }

    for ($i = 0; $i < @$point; $i++) {
        $coord = $point->[$i];
        $delta = $epsilon * abs($coord) || $epsilon;
        $point->[$i] = $delta + $coord;
        $delta = $point->[$i] - $coord;
        for ($k = 0; $k < @$func_array; $k++) {
            $func[$k] = &{$func_array->[$k]}( @$point );
        }
        $point->[$i] = $coord;
        for ($j = 0; $j < @$func_array; $j++) {
            $jacobian[$j][$i] = ($func[$j] - $values[$j]) / $delta;
        }
    }
    return @jacobian;
}

sub f {
    my ($x, $y, $z) = @_;
    return 3*$x + 2*$x*$y + 4*$y*$z;
}

sub g {
    my ($x, $y, $z) = @_;
    return unless $x;
    return 4/$x + log($x*$y) + $z**$x;
}

sub h {
    my ($x, $y, $z) = @_;
    return $x * $y * $z;
}

my @jacobian = jacobian( [\&f, \&g, \&h], [3, 4, -2] );
foreach my $row (@jacobian) {
    for (my $column = 0; $column < @$row; $column++) {
        print $row->[$column], " ";
    }
    print "\n";
}

 
sub solve_matrix {
    my(@matrix_array, @delta) = @_;
    { use Math::Matrix;
      #my $matrix = Math::Matrix.new(@matrix_array);
      #my $vector = Math::Matrix.new(@delta.map({.list}));
      #die "Matrix is not invertible" unless $matrix.is-invertible;
      #my @result = ( $matrix.inverted dot $vector ).transposed;
      #return @result.split(" ");
   }
}
 
my @funcs = (
   '9*$x**2 + 36*$y**2 + 4*$z**2 - 36',
   '$x**2 - 2*$y**2 - 20*$z',
   '$x**2 - $y**2 + $z**2'
);
 
my @guesses = (1,1,0);
 
my @solution = solve_funcs(\@funcs, 20, \@guesses, 1e-8);
 
say my $result = "Solution: " . join ' ', @solution;

my $ref = 'Solution: 0.8936282344764825 0.8945270103905782 -0.04008928615915281';

use Test::More;
#chomp $ref;
#is($result, $ref);
#done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre style="height:35ex"></pre>
[https://github.com/SqrtNegInf/Rosettacode-Perl5-Smoke/blob/master/ref/XXX XXX]
