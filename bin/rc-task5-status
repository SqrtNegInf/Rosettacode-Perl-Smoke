#!/usr/local/bin/perl
## RC task status for Perl 5
#c# 2018-06-30

use warnings;
use strict 'vars';

chdir "$ENV{HOME}/perl5/Rosetta-Code/meta";

my(%P);

print `perl -v | head -2`; 

# update only once a day
if (.95 < -M "Category:Programming_Tasks" || ! -e "Category:Programming_Tasks") {
print "updating from RCâ€¦\n";
system <<"END";
mv Category:Programming_Tasks Category:Programming_Tasks~
mv Category:Draft_Programming_Tasks Category:Draft_Programming_Tasks~
mv Reports:Tasks_not_implemented_in_Perl Reports:Tasks_not_implemented_in_Perl~
/opt/local/bin/curl -s -O http://rosettacode.org/wiki/Category:Programming_Tasks
/opt/local/bin/curl -s -O http://rosettacode.org/wiki/Category:Draft_Programming_Tasks
/opt/local/bin/curl -s -O http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_Perl
END
}

## characterize RC tasks

sub path { return $_[0] =~ /^([A-Z])/ ? "$1/" : '0/' }
#sub path { substr($_[0],0 ,1) . '/' . $_[0] } 

# check task source code 
open P, "<Category:Programming_Tasks";
while ($_ = <P>) { examine($_) }

# ditto, and mark as draft
open D, "<Category:Draft_Programming_Tasks";
while ($_ = <D>) { examine($_); mark($_,'D') }

# un-implemented (no code) or un-reliable (marked broken at RC)
open U, "<Reports:Tasks_not_implemented_in_Perl";
while ($_ = <U>) { mark($_,'U') }

# ignored tasks from hard-coded list
while ($_ = <DATA>) { chomp; mark($_,'X') }

# column headers with task totals
my @cols = (
"Perl: Good/Bad [${\tally('P','G')}/${\tally('P','B')}]",       # P
#"JVM: Good/Bad [${\tally('J','G')}/${\tally('J','B')}]",        # J
"Smoke testing [${\tally('S')}]",                               # S
"sKipping validation [${\tally('K')}]",                         # K
"Interactive [${\tally('I')}]",                                 # I
"Touched (modified by me) [${\tally('T')}]",                    # T
"Random seed [${\tally('R')}]",                                 # R
"File output [${\tally('F')}]",                                 # F
"Draft [${\tally('D')}]",                                       # D
"Ignoring [${\tally('X')}]",                                    # X
"Void (no local copy) [${\tally('V')}]",                        # V
"Un-implemented/reliable [${\tally('U')}]",                     # U
);

my $max = scalar @cols;
my $n = $max;
for my $c (@cols) {
    $n--;
    print '|' x ($max-$n-1) . '+' . '-' x $n . "--> $c\n";
}
print '|' x $max . "\n";

# display full task status table
for my $p (sort keys %P) {
    (print $P{$p}{$_} // '.') for qw(P S K I T R F D X V U);
    print " $p\n";
}

#####
# record a known task condition
sub mark {
my($l,$t) = @_;
my($p);

    if ($t eq 'X') { return unless $p = pfix($l)  }
    else           { return unless $p = pname($l) }

    $P{$p}{$t} = $t;
    return unless $t eq 'D';

    for my $i (1 .. 9) {
        $P{"${p}-$i"}{$t} = $t if -e "../${p}-$i";
    }
}

#####
# look for task under base name, and with suffixes
sub examine {
my($l) = @_;

    return unless my $p = pname($l);

    my $cnt = 0;
    $cnt += document("${p}");
    $cnt += document("${p}-$_") for 1 .. 9;
    $P{$p}{'V'} = 'V' if 0 == $cnt; # don't seem to have this task
}

#####
# study task source code, set various condition flags
sub document {
my($p) = @_;
my($task,$header,$compiles,$pout,$perr,$skip,$srand);

    $task = '../' . path($p) . $p;
    return 0 if ! -e $task;
    return 0 if defined $P{$p}{'P'};

    $header = `grep '^#[pcft]#' $task`;

    $P{$p}{'P'} = $header =~ /\bOK\b/ ? 'G' : 'B';
    $compiles = `perl -c $task 2>&1 1>/dev/null`;
    $pout = "../bench/last/$p.out";
    $P{$p}{'S'} = -e $pout ? 'S' : '.';
    $perr = (-e $pout) ? `grep STDERR $pout` : undef;
    $P{$p}{'P'} = '!' if $compiles =~ /SORRY/ || ($P{$p}{'P'} eq 'G' && $perr);

#    $P{$p}{'J'} = $header =~ /JVM:\s*OK/ ? 'G' : 'B';
#    $jout = "../bench/jvm/$p.out";
#    $jerr = (-e $jout) ? `grep STDERR $jout` : undef;
#    $P{$p}{'J'} = '!' if $P{$p}{'J'} eq 'G' && $jerr;

    $skip = 'interactive|gui|toodamnslow|skiptest|nocode|forever|broken';  # cf. def in 'rc-p5'
    $P{$p}{'K'} = $header =~ /$skip/             ? 'K' : '.';
    $P{$p}{'T'} = $header =~ />RC/               ? 'T' : '.';
    $P{$p}{'F'} = $header =~ /#f#.*RC file/i     ? 'F' : '.';
    $P{$p}{'I'} = $header =~ /#t#.*(inter|gui)/i ? 'I' : '.';

    $srand = `grep srand $task`;
    $P{$p}{'R'} = $srand =~ /\bsrand \d/         ? 'R' : '.';

    return 1; # to increment counter
}

#####
# extract potential task names, validate & clean-up
sub pname {
my($l) = @_;

    return '' unless $l =~ m#<li><a href="/wiki/# && $l !~ /Category:/;
    my($p) = $l =~ m#<li><a href="/wiki/(.*?)"#;
    #return '' if $p =~ /Niecza|Pugs|Rakudo/;    # stray stuff from 'unimplemented'
    $p =~ s/Brain\*\*\*\*/Brainfuck/;           # 'fix' Brainfuck name
    $p =~ s/%E2%80%93/-/;                       # e.g. Burrows%E2%80%93Wheeler_transform
    $p =~ s/%E2%80%99//;                        # e.g. Ukkonen%E2%80%99s
    return pfix($p);
}

#####
# standardize task name
sub pfix { 
my($p) = @_;

    $p =~ s#/#_#g;
    $p =~ s#!##g;
    $p =~ s#\$#_#g;
    $p =~ s#[()]##g;
    return $p;
}

#####
# column totals
sub tally {
my($col,$val) = @_;
$val = $col unless $val;
my $x;
for my $p (keys %P) { $x++ if defined $P{$p}{$col} && $P{$p}{$col} eq $val }
return $x;
}

# these are being ignored, for various reasons
__DATA__
Sorting_algorithms/Tree_sort_on_a_linked_list
Abstract_type
Active_Directory_Connect
Arena_storage_pool
Aspect_Oriented_Programming
Assertions_in_design_by_contract
Color_of_a_screen_pixel
Create_a_file_on_magnetic_tape
Draw_a_pixel
Draw_a_pixel_2
Execute_SNUSP
Inheritance_Multiple
Inheritance_Single
JortSort
Linux_CPU_utilization
Metered_concurrency
Modulinos
Morse_code
Narcissist
OLE_Automation
Parametrized_SQL_statement
Record_sound
SOAP
SQL-based_authentication
Scope_Function_names_and_labels
Sine_wave
Solving_coin_problems
Speech_synthesis
Stair-climbing_puzzle
Table_creation
Table_creation_Postal_addresses
Terminal_control_Positional_read
User_input_Graphical
Video_display_modes
Window_creation
Write_to_Windows_event_log
