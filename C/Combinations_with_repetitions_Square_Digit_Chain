#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Combinations_with_repetitions_Square_Digit_Chain
#c# 2019-03-25 >RC
#p# OK

use strict;
#use warnings;
use feature 'say';
my @res;

#use bigint; # too durn slow

sub comma { reverse ((reverse shift) =~ s/(.{3})/$1,/gr) =~ s/^,//r }

sub endsWithOne {
    my($n) = @_;
    my $digit;
    my $sum = 0;
    my $nn  = $n;
    while () {
        while ($nn > 0) {
            $digit = $nn % 10;
            $sum  += $digit**2;
            $nn    = int $nn / 10;
        }
        return 1 if $sum ==  1;
        return 0 if $sum == 89;
        $nn = $sum;
        $sum = 0;
    }
}

my @ks = <7 8 11 14>; # 17>;

for my $k (@ks) {
    my @sums = <1 0>;
    my $s;
    for my $n (1 .. $k) {
        for my $i (reverse 1 .. $n*81) {
            for my $j (1 .. 9) {
                last if ($s = $j**2) > $i;
                $sums[$i] += $sums[$i-$s];
            }
        }
   }
   my $count1 = 0;
   for my $i (1 .. $k*81) { $count1 += $sums[$i] if endsWithOne($i) }
   my $limit = 10**$k - 1;
   push @res, "For k = $k in the range 1 to " . comma $limit;
   push @res, comma($count1) . ' numbers produce 1 and ' . comma($limit-$count1) . " numbers produce 89\n";
   # to avoid exp. notation for for k = 17
   #push @res, "For k = $k in the range 1 to " . comma sprintf "%i", $limit;
   #push @res, comma($count1) . ' numbers produce 1 and ' . comma(sprintf("%i", $limit-$count1)) . " numbers produce 89\n";
}

say my $result = join "\n", @res;

my $ref = <<'EOD';
For k = 7 in the range 1 to 9,999,999
1,418,853 numbers produce 1 and 8,581,146 numbers produce 89

For k = 8 in the range 1 to 99,999,999
14,255,666 numbers produce 1 and 85,744,333 numbers produce 89

For k = 11 in the range 1 to 99,999,999,999
15,091,199,356 numbers produce 1 and 84,908,800,643 numbers produce 89

For k = 14 in the range 1 to 99,999,999,999,999
13,770,853,279,684 numbers produce 1 and 86,229,146,720,315 numbers produce 89
EOD

# gets it wrong without 'bigint'
# For k = 17 in the range 1 to 100,000,000,000,000,000
#1 2,024,696,404,768,024 numbers produce 1 and 87,975,303,595,231,968 numbers produce 89

# correct:
# For k = 17 in the range 1 to 99,999,999,999,999,999
# 12,024,696,404,768,024 numbers produce 1 and 87,975,303,595,231,975 numbers produce 89

use Test::More;
is($result, $ref);
done_testing();
