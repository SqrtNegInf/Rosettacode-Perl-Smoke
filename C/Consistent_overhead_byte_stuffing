#!/usr/local/bin/perl
#u# https://www.rosettacode.org/wiki/Consistent_overhead_byte_stuffing
#c# 2023-11-08 <RC
#p# OK

my @res;

use strict;
use warnings;
use feature 'say';

my @data = map { pack 'H*', tr/ //dr } split /\n/, <<END;
00
00 00
00 11 00
11 22 00 33
11 22 33 44
11 00 00 00
00 00 00 00 00 00
33 33 33 33 33 33 33
END
push @data, ( " " x $_ ) for 1269 .. 1272;

sub showbytes
  {
  my @bytes = map /../g, unpack 'H*', pop;
  push @res, "@_: " .
    "@bytes" =~ s!(\w\w)\K(( \1){7,})! 'x' . (1 + length($2) / 3) !ger;
  }

my $marker = "\0"; # the byte that is eliminated from string

sub encode
  {
  return join '',
    (map chr(1 + length) . $_, # prepend length
    map /.{1,254}|^\z/gs,      # break up long sections
    split /\Q$marker/, shift, -1), $marker;
  }

sub decode
  {
  (local $_, my $keep, my $answer) = (shift, 0, '');
  while( /\G[^\Q$marker\E]/g ) # advance over count byte
    {
    my $len = -1 + ord $&;     # length of data block
    $answer .= $marker x $keep . (/\G[^\Q$marker\E]{$len}/g, $&);
    $keep = $len < 254;        # was split on marker, not size
    }
  return $answer;
  }

for my $original ( @data )
  {
  showbytes 'original', $original;
  showbytes ' encoded', my $answer = encode $original;
  showbytes ' decoded', my $decoded = decode $answer;
  $original eq $decoded or die "MISMATCH";
  $res[-1] .= "\n";
  }

say my $result = join "\n", @res;

my $ref = <<'EOD';
original: 00
 encoded: 01 01 00
 decoded: 00

original: 00 00
 encoded: 01 01 01 00
 decoded: 00 00

original: 00 11 00
 encoded: 01 02 11 01 00
 decoded: 00 11 00

original: 11 22 00 33
 encoded: 03 11 22 02 33 00
 decoded: 11 22 00 33

original: 11 22 33 44
 encoded: 05 11 22 33 44 00
 decoded: 11 22 33 44

original: 11 00 00 00
 encoded: 02 11 01 01 01 00
 decoded: 11 00 00 00

original: 00 00 00 00 00 00
 encoded: 01 01 01 01 01 01 01 00
 decoded: 00 00 00 00 00 00

original: 33 33 33 33 33 33 33
 encoded: 08 33 33 33 33 33 33 33 00
 decoded: 33 33 33 33 33 33 33

original: 20x1269
 encoded: ff 20x254 ff 20x254 ff 20x254 ff 20x254 fe 20x253 00
 decoded: 20x1269

original: 20x1270
 encoded: ff 20x254 ff 20x254 ff 20x254 ff 20x254 ff 20x254 00
 decoded: 20x1270

original: 20x1271
 encoded: ff 20x254 ff 20x254 ff 20x254 ff 20x254 ff 20x254 02 20 00
 decoded: 20x1271

original: 20x1272
 encoded: ff 20x254 ff 20x254 ff 20x254 ff 20x254 ff 20x254 03 20 20 00
 decoded: 20x1272

EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
