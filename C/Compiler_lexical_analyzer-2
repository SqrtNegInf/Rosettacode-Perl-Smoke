#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Compiler/lexical_analyzer
#c# 2018-07-25 <RC
#p# OK

use feature 'say';
my $result;

use strict;   # lex.pl - source to tokens
use warnings; # http://www.rosettacode.org/wiki/Compiler/lexical_analyzer
no warnings 'qw';
 
my %keywords = map { $_, "Keyword_$_" } <while print if else putc>;
my %tokens = qw[ ; Semicolon ( LeftParen ) RightParen { LeftBrace } RightBrace
  + Op_add - Op_subtract * Op_multiply % Op_mod = Op_assign >= Op_greaterequal
  != Op_notequal == Op_equal ! Op_not < Op_less <= Op_lessequal > Op_greater
  , Comma && Op_and || Op_or ];
 
local $_ = join '', <DATA>;
 
while( /\G (?|
    \s+              (?{ undef })
  | \d+[_a-zA-Z]\w*  (?{ die "invalid mixed number $&\n" })
  | \d+              (?{ "Integer $&" })
  | \w+              (?{ $keywords{$&} || "Identifier $&" })
  | ( [-;(){}+*%,] | [=!<>]=? | && | \|\| )
                     (?{ $tokens{$1} })
  | \/               (?{ 'Op_divide' }) (?: \* (?: [\s\S]*?\*\/ (?{ undef }) |
                          (?{ die "End-of-file in comment\n" }) ) )?
  | "[^"\n]*"        (?{ "String $&" })
  | "                (?{ die "unterminated string\n" })
  | ''               (?{ die "empty character constant\n" })
  | '([^\n\\])'      (?{ 'Integer ' . ord $1 })
  | '\\n'            (?{ 'Integer 10' })
  | '\\\\'           (?{ 'Integer 92' })
  | '                (?{ die "unterminated or bad character constant\n" }) #'
  | .                (?{ die "invalid character $&\n" })
  ) /gcx )
  {
  defined $^R and $result .= sprintf "%5d %7d   %s\n",
    1 + $` =~ tr/\n//, 1 + length $` =~ s/.*\n//sr, $^R;
  }
$result .= sprintf "%5d %7d   %s\n", 1 + tr/\n//, 1, 'End_of_input';

say $result; 

my $ref = <<'EOD';
    5      16   Keyword_print
    5      40   Op_subtract
    6      16   Keyword_putc
    6      40   Op_less
    7      16   Keyword_if
    7      40   Op_greater
    8      16   Keyword_else
    8      40   Op_lessequal
    9      16   Keyword_while
    9      40   Op_greaterequal
   10      16   LeftBrace
   10      40   Op_equal
   11      16   RightBrace
   11      40   Op_notequal
   12      16   LeftParen
   12      40   Op_and
   13      16   RightParen
   13      40   Op_or
   14      16   Op_subtract
   14      40   Semicolon
   15      16   Op_not
   15      40   Comma
   16      16   Op_multiply
   16      40   Op_assign
   17      16   Op_divide
   17      40   Integer 42
   18      16   Op_mod
   18      40   String "String literal"
   19      16   Op_add
   19      40   Identifier variable_name
   20      26   Integer 10
   21      26   Integer 92
   22      26   Integer 32
   23       1   End_of_input
EOD

use Test::More;
is ($result, $ref);
done_testing();

__END__
/*
  All lexical tokens - not syntactically correct, but that will
  have to wait until syntax analysis
 */
/* Print   */  print    /* Sub     */  -
/* Putc    */  putc     /* Lss     */  <
/* If      */  if       /* Gtr     */  >
/* Else    */  else     /* Leq     */  <=
/* While   */  while    /* Geq     */  >=
/* Lbrace  */  {        /* Eq      */  ==
/* Rbrace  */  }        /* Neq     */  !=
/* Lparen  */  (        /* And     */  &&
/* Rparen  */  )        /* Or      */  ||
/* Uminus  */  -        /* Semi    */  ;
/* Not     */  !        /* Comma   */  ,
/* Mul     */  *        /* Assign  */  =
/* Div     */  /        /* Integer */  42
/* Mod     */  %        /* String  */  "String literal"
/* Add     */  +        /* Ident   */  variable_name
/* character literal */  '\n'
/* character literal */  '\\'
/* character literal */  ' '
