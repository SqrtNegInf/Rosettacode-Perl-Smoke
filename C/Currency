#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Currency
#c# 2018-08-28 >RC
#p# OK

use strict;
use warnings;
use feature 'say';
my @res;

use Math::Decimal qw(dec_canonise dec_add dec_mul dec_rndiv_and_rem);

my @check = (
    [<Hamburger 5.50 4000000000000000>],
    [<Milkshake 2.86                2>]
);
 
my $fmt = "%-10s %8s %18s %22s\n";
push @res, sprintf $fmt, <Item Price Quantity Extension>;
 
my $subtotal = dec_canonise(0);
for my $line (@check) {
    my($item,$price,$quant) = @$line;
    my $dp = dec_canonise($price); 
    my $dq = dec_canonise($quant);
    my $extension = dec_mul($dp,$dq);
    $subtotal = dec_add($subtotal, $extension);
    push @res, sprintf $fmt, $item, $price, $quant, rnd($extension);
}

my $tax_rate = dec_canonise(0.0765);
my $tax      = dec_mul($subtotal,$tax_rate);
my $total    = dec_add($subtotal,$tax);

push @res, sprintf $fmt, '', '', '',          '-----------------';
push @res, sprintf $fmt, '', '', 'Subtotal ', rnd($subtotal);
push @res, sprintf $fmt, '', '', 'Tax ',      rnd($tax);
push @res, sprintf $fmt, '', '', 'Total ',    rnd($total);

say my $result = join '', @res;

sub rnd {
    my($q, $r) = dec_rndiv_and_rem("FLR", $_[0], 1);
    $q . substr((sprintf "%.2f", $r), 1, 3);
}

my $ref = <<'END';
Item          Price           Quantity              Extension
Hamburger      5.50   4000000000000000   22000000000000000.00
Milkshake      2.86                  2                   5.72
                                            -----------------
                             Subtotal    22000000000000005.72
                                  Tax     1683000000000000.44
                                Total    23683000000000006.16
END

use Test::More;
is($result, $ref);
done_testing;
