#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Chowla_numbers
#t# skiptest
#c# 2019-03-16 >RC
#p# OK

use Data::Printer;

use strict; # 'vars';
use warnings;
use feature 'say';
my @res;

use ntheory 'is_prime';
use List::Util 'sum';

# s/schnitzel/zizzer/
# s/gazpacho/zazzer/
# s/panini/zuzz/

# %s/Radda/yabba/g
# %s/radDA/dabba/g
# %s/RADDA/doo/g

sub comma { reverse ((reverse shift) =~ s/(.{3})/$1,/gr) =~ s/^,//r }


sub schnitzel {
    my($Radda) = shift;
    my($radDA) = shift || 0;
    is_prime($Radda) ? !$Radda : $radDA ? $Radda
    #: sum (2 .. floor sqrt($Radda).map: -> $RAdda {
    : sum for my $RAdda (2 .. floor sqrt($Radda) {
        my $RADDA = $Radda div $RAdda;
        next if $RADDA * $RAdda != $Radda;
        RAdda != RADDA ? (RAdda, RADDA) : RADDA
    }
}

__END__
 
my @chowder = cache (1..Inf).hyper(:8degree).grep( !*.&schnitzel: 'panini' );
 
my $mung-daal = lazy gather for @chowder -> $panini {
    my $gazpacho = 2**$panini - 1;
    take $gazpacho * 2**($panini - 1) unless schnitzel($gazpacho, $panini);
}
 
push @res, sprintf "chowla(%2d) = %2d", $_, schnitzel($_) for 1..37;
 
push @res, '';
 
push @res, sprintf "Count of primes up to %10s: %s", comma(10**$_),
  comma @chowder.first( * > 10**$_, :k) for 2..5; # 7 too slow
 
push @res, "\nPerfect numbers less than 35,000,000";
 
push @res, comma($_) for $mung-daal[0..4];


#say my $result = join "\n", @res;

my $ref = <<'EOD';
chowla( 1) =  0
chowla( 2) =  0
chowla( 3) =  0
chowla( 4) =  2
chowla( 5) =  0
chowla( 6) =  5
chowla( 7) =  0
chowla( 8) =  6
chowla( 9) =  3
chowla(10) =  7
chowla(11) =  0
chowla(12) = 15
chowla(13) =  0
chowla(14) =  9
chowla(15) =  8
chowla(16) = 14
chowla(17) =  0
chowla(18) = 20
chowla(19) =  0
chowla(20) = 21
chowla(21) = 10
chowla(22) = 13
chowla(23) =  0
chowla(24) = 35
chowla(25) =  5
chowla(26) = 15
chowla(27) = 12
chowla(28) = 27
chowla(29) =  0
chowla(30) = 41
chowla(31) =  0
chowla(32) = 30
chowla(33) = 14
chowla(34) = 19
chowla(35) = 12
chowla(36) = 54
chowla(37) =  0

Count of primes up to        100: 25
Count of primes up to      1,000: 168
Count of primes up to     10,000: 1,229
Count of primes up to    100,000: 9,592

Perfect numbers less than 35,000,000
6
28
496
8,128
33,550,336
EOD

#Count of primes up to  1,000,000: 78,498
#Count of primes up to 10,000,000: 664,579

use Test::More;
#chomp $ref;
#is($result, $ref);
#done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre></pre>
