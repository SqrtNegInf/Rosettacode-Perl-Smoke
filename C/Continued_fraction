#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Continued_fraction
#c# 2018-07-25 <RC, 2021-01-30 >RC
#p# OK
#n# use closures to implement the infinite lists of coeffficients

my $result;

use strict;
use warnings;
use feature 'say';

no warnings 'recursion';
use experimental 'signatures';

# why @_[0,1] ?
sub continued_fraction ($a, $b, $n = 100) { # without sig: (@_[0,1], $_[2] // 100)
 
    $a->() + ($n and $b->() / continued_fraction($a, $b, $n-1));
}
 
$result .= sprintf "√2  ≈ %.9f\n", continued_fraction do { my $n; sub { $n++ ? 2 : 1  } },              sub { 1                 };
$result .= sprintf "e   ≈ %.9f\n", continued_fraction do { my $n; sub { $n++ or 2     } },  do { my $n; sub { $n++ or 1       } };
$result .= sprintf "π   ≈ %.9f\n", continued_fraction do { my $n; sub { $n++ ? 6 : 3  } },  do { my $n; sub { (2*$n++ + 1)**2 } }, 1000;
$result .= sprintf "π/2 ≈ %.9f\n", continued_fraction do { my $n; sub { 1/($n++ or 1) } },              sub { 1                 }, 1000;

say $result; 

my $ref = <<'EOD';
√2  ≈ 1.414213562
e   ≈ 2.718281828
π   ≈ 3.141592653
π/2 ≈ 1.570011909
EOD

use Test::More;
is ($result, $ref);
done_testing();
