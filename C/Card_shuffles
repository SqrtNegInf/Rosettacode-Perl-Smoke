#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Card_shuffles
#c# 2018-08-28 >RC
#p# OK
#n# v5.36 and a few tweaks

srand 123456;

use v5.36;

# shuffle 'n' times and return updated deck
sub overhand ($n,@cards) {
  for (1..$n) {
    my(@splits,@shuffle);
    my $x = int @cards / 5;
    push @splits, (1..$x)[int rand $x] for 1..@cards;
   #while (@cards) { push @shuffle, [splice @cards, 0, shift @splits] }
    push @shuffle, [splice @cards, 0, shift @splits] while @cards;
    @cards = flatten(reverse @shuffle);
  }
  @cards;
}

sub flatten { map { ref $_ eq 'ARRAY' ? @$_ : $_ } @_ }

# shuffle once, in-place
sub riffle ($cards) {
   #our @cards; local *cards = shift;
   #splice @cards,   @cards/2 - $_, 0, pop  @cards for 0 .. ( @cards/2)-1;
    splice @$cards, @$cards/2 - $_, 0, pop @$cards for 0 .. (@$cards/2)-1;
}

my @cards = 1..20;
my $result = join ' ', overhand(10,@cards);
$result .= "\n";

riffle(\@cards) for 1..10;
$result .= join ' ', @cards, "\n";

say $result; 

my $ref = <<'EOD';
4 5 7 3 10 2 8 9 1 11 13 14 6 17 12 18 20 15 19 16
1 10 19 9 18 8 17 7 16 6 15 5 14 4 13 3 12 2 11 20 
EOD

use Test::More;
is ($result, $ref);
done_testing;
