#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Count_the_coins
#c# 2018-07-26 <RC
#p# OK
#n# memoize is vital to finite run time...
#n# when run at terminal 'Deep recursion' warnings (not see in cronjob)

use strict;
#use warnings;
use feature 'say';

my $result;
local $SIG{__WARN__} = sub { };

use Memoize;
 
sub cc {
#   no warnings 'recursion';
    my $amount = shift;
    return 0 if !@_ || $amount < 0;
    return 1 if $amount == 0;
    my $first = shift;
    cc( $amount, @_ ) + cc( $amount - $first, $first, @_ );
}
memoize 'cc';
 
# Make recursive algorithm run faster by sorting coins descending by value:
sub cc_optimized {
    my $amount = shift;
    cc( $amount, sort { $b <=> $a } @_ );
}
 
$result .= 'Ways to change $ 1 with common coins: '.
    cc_optimized( 100, 1, 5, 10, 25 ) . "\n";
$result .= 'Ways to change $ 1000 with addition of less common coins: '.
    cc_optimized( 1000 * 100, 1, 5, 10, 25, 50, 100 ) . "\n";
 
say $result; 

my $ref = <<'EOD';
Ways to change $ 1 with common coins: 242
Ways to change $ 1000 with addition of less common coins: 13398445413854501
EOD

use Test::More;
is ($result, $ref);
done_testing;
