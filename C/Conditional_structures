#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Conditional_structures
#t# testok
#c# 2018-07-24 <RC
#p# OK
#n# all pretty bogus, but it runs without errors

use v5.36;

my ($expression, $expression1, $expression2);
my ($variable, $value_for_true, $value_for_false, $condition1, $condition2, $input);

if ($expression) {
    ...;
}

# postfix conditional
say 'hi' if $expression;

if ($expression) {
    say  'woof'
} else {
    say  'foof'
}

if ($expression1) {
    say 'glorp'
}
elsif ($expression2) {
    say 'florp'
}
else {
    say 'snorp'
}

# unless behaves like if, only logically negated.
# You can use it wherever you can use if. An unless block can have elsif and else blocks, but there is no elsunless.

# The ternary operator is used as an expression within a statement, rather than as a control flow structure containing one or more statements. It is frequently used in assignment, or sometimes for passing function call arguments that vary depending on some condition.

$variable = $expression ? $value_for_true : $value_for_false;

# logical operators
$condition1 and $condition2 and say 'boo';  # equivalent to  $condition ? ... : $condition
$condition1 or $condition2 or say 'foo';  # equivalent to  $condition ? $condition : ...
# && and || have the same semantics as and and or, respectively, but their precedence is much higher, making them better for conditional expressions than control flow.

# switch
# At first there was no switch structure in Perl, although there were plenty ways to emulate it. 
# In Perl 5.8, an experimental switch/case/else structure was introduced. 
# Perl 5.10 replaced this with the given/when/default structure borrowed from Perl 6.
# With v5.36 it is turned 'off' by default, but you can still use it if desired

use feature 'switch';
no warnings 'experimental';
$input = '42';
given ($input) {
    when (0)          { print 'input == 0' }
    when ([1..9])     { print 'input between 1 and 9' }
    when ('coffee')   { print 'input equal coffee' }
    when (/rats/)     { print 'input matches rats' }
    default           { say 'hey' }
}

say 'ok 1';
