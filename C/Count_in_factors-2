#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Count_in_factors
#c# 2018-07-25 <RC
#p# BROKEN
#n# Math::Pari 'factorint' produces unreliable results?  cf 'Prime_decomposition-4'
#n# 2018-08-22 specifically 1000000000000000000 always fails, sometimes other do to, e.g.
#   1000000000000000008 = 2 x 2 x 2 x 3 x 3 x 97 x 26209 x 32779 x a000000000000000

use strict;
use warnings;
use feature 'say';
my $result;

use Math::Pari qw/factorint allocatemem/;
#use Math::Pari 'factorint';

allocatemem(1e8);

sub factor {
  my ($pn,$pc) = @{Math::Pari::factorint(shift)};
#  $result .= 'pn: ' . $pn . ' pc: ' . $pc . "\n";
  return map { ($pn->[$_]) x $pc->[$_] } 0 .. $#$pn;
}

$result .= "$_ = ". join(" x ", factor($_)). "\n" for 1000000000000000001 .. 1000000000000000010;
if (0) { 
my $x = 100000; $result .= "$x = " . join('*', factor($x)) . "\n";
   $x = 100001; $result .= "$x = " . join('*', factor($x)) . "\n";
   $x = 100002; $result .= "$x = " . join('*', factor($x)) . "\n";
   $x = 100003; $result .= "$x = " . join('*', factor($x)) . "\n";
   $x = 100004; $result .= "$x = " . join('*', factor($x)) . "\n";
   $x = 100005; $result .= "$x = " . join('*', factor($x)) . "\n";
}

say $result;

#1000000000000000000 = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5 x 5
my $ref = <<'END';
1000000000000000001 = 101 x 9901 x 999999000001
1000000000000000002 = 2 x 3 x 17 x 131 x 1427 x 52445056723
1000000000000000003 = 1000000000000000003
1000000000000000004 = 2 x 2 x 1801 x 246809 x 562425889
1000000000000000005 = 3 x 5 x 44087 x 691381 x 2187161
1000000000000000006 = 2 x 7 x 919 x 77724234416291
1000000000000000007 = 1370531 x 729644203597
1000000000000000008 = 2 x 2 x 2 x 3 x 3 x 97 x 26209 x 32779 x 166667
1000000000000000009 = 1000000000000000009
1000000000000000010 = 2 x 5 x 11 x 103 x 4013 x 21993833369
END

use Test::More;
is ($result, $ref);
done_testing();
