#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Calkin-Wilf_sequence
#c# 2021-01-28 >RC
#p# OK
#n# cf Stern-Brocot_sequence, -1 vs -3

my @res;

use strict;
use warnings;
use feature 'say';
use feature 'state';

use ntheory      'fromdigits';
use List::Lazy   'lazy_list';
use Math::AnyNum ':overload';

my $calkin_wilf = lazy_list { state @cw = (1); push @cw, 1 / ( (2 * int $cw[0]) + 1 - $cw[0] ); shift @cw };

#my $calkin_wilf = lazy_list { $_ = 1 / ( (2 * int $_) + 1 - $_ ) } 1; # no 1st term

sub r2cf {
  my($num, $den) = @_;
  my($n, @cf);
  my $f = sub { return unless $den;
               my $q = int($num/$den);
               ($num, $den) = ($den, $num - $q*$den);
               $q;
             };
  push @cf, $n while defined($n = $f->());
  reverse @cf;
}

sub r2cw {
    my($num, $den) = @_;
    my $bits;
    my @f = r2cf($num, $den);
    $bits .= ($_%2 ? 0 : 1) x $f[$_] for 0..$#f;
    fromdigits($bits, 2);
    #unpack("N", pack("B32", substr("0" x 32 . $bits, -32)))
}

# on RC
# say 'First twenty terms of the Calkin-Wilf sequence:';
# printf "%s ", $_>1 ? $calkin_wilf->next() : 1 for 1..20;
# say "\n\n83116/51639 is at index: " . r2cw(83116,51639);

my @cw;
push @cw, $calkin_wilf->next() for 1..20;
#push @cw, $_>1 ? $calkin_wilf->next() : 1 for 1..20;
push @res, join ', ', @cw;
push @res, '83116/51639 is at index: ' . r2cw(83116,51639);

say my $result = join "\n", @res;

my $ref = <<'END';
1, 1/2, 2, 1/3, 3/2, 2/3, 3, 1/4, 4/3, 3/5, 5/2, 2/5, 5/3, 3/4, 4, 1/5, 5/4, 4/7, 7/3, 3/8
83116/51639 is at index: 123456789
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
