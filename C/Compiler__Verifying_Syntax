#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Compiler/ Verifying_Syntax
#c# 2019-12-28 <RC, 2020-01-03 <RC
#p# OK
#n# note the stupid space in the URL...

my @res;

use strict;
use warnings;
use feature 'say';

sub error { die s/\G/{{\U@_}}/r }
sub want  { /\G\Q$_[0]/gc ? pop : error $_[1]; 1 }

sub expr {
  my $level = shift;
  /\G\h+/gc;
  /\G\(/gc && want ')', "expected a closing paren", expr(0) or
    $level <= 4 && /\Gnot\b/gc && expr(5) or
    /\G(?!(?:and|or|not)\b)(?:\d+|[a-zA-Z]\w*)/gc or
    error "expected a primary";
  /\G\h+/gc ? 1 :
    $level <= 2   && /\Gor\b/gc  ? expr(2) :
    $level <= 3   && /\Gand\b/gc ? expr(4) :
    $level <= 4   && /\G[=<]/gc  ? expr(4.5) :
    $level == 4.5 && /\G(?=[=<])/gc  ? error "operator is non-associative" :
    $level <= 5   && /\G[+-]/gc  ? expr(6) :
    $level <= 6   && /\G[*\/]/gc ? expr(7) :
    return 1 while 1;
}

while( <DATA> ) {
  push @res, eval { want "\n", "expected end of input", expr(0) } ?
    "${_}true\n" : "$@false\n", "\n";
}

say my $result = join "", @res;

my $ref = <<'END';
3 + {{EXPECTED A PRIMARY}}not 5
false

3 + (not 5)
true

(42 + 3{{EXPECTED A CLOSING PAREN}}
false

not 3 < 4 or (true or 3 /  4 + 8 *  5 - 5 * 2 < 56) and 4 * 3  < 12 or not true
true

{{EXPECTED A PRIMARY}}and 3 < 2
false

not 7 < 2
true

2 < 3 {{OPERATOR IS NON-ASSOCIATIVE}}< 4
false

2 < foobar - 3 {{OPERATOR IS NON-ASSOCIATIVE}}< 4
false

2 < foobar and 3 < 4
true

4 * (32 - 16) + 9 = 73
true

235 {{EXPECTED END OF INPUT}}76 + 1
false

a + b = {{EXPECTED A PRIMARY}}not c and false
false

a + b = (not c) and false
true

a + b = (not c and false)
true

ab_c / bd2 or {{EXPECTED A PRIMARY}}< e_f7
false

g {{EXPECTED END OF INPUT}}not = h
false

{{EXPECTED A PRIMARY}}été = false
false

i+{{EXPECTED A PRIMARY}}+
false

j {{EXPECTED END OF INPUT}}& k
false

l or {{EXPECTED A PRIMARY}}_m
false

END

use Test::More;
is($result, $ref);
done_testing();

__DATA__
3 + not 5
3 + (not 5)
(42 + 3
not 3 < 4 or (true or 3 /  4 + 8 *  5 - 5 * 2 < 56) and 4 * 3  < 12 or not true
and 3 < 2
not 7 < 2
2 < 3 < 4
2 < foobar - 3 < 4
2 < foobar and 3 < 4
4 * (32 - 16) + 9 = 73
235 76 + 1
a + b = not c and false
a + b = (not c) and false
a + b = (not c and false)
ab_c / bd2 or < e_f7
g not = h
été = false
i++
j & k
l or _m
