#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Cut_a_rectangle
#c# 2018-07-26 <RC
#p# OK
#n# 2022-05-29 minor improvements, NOT ON RC

my $result;

use strict;
use warnings;
use feature 'say';

my ($w, $h, $len);
my $cnt  = 0;
my @grid = 0;
my @next;

my @dir = ([0, -1], [-1, 0], [0, 1], [1, 0]); # faster if global
 
sub walk {
    my ($y, $x) = @_;
	($cnt += 2 and return) if !$y or $y == $h or !$x or $x == $w;
 
    my $t = $y * ($w + 1) + $x;
    $grid[$_]++ for $t, $len - $t;
    for my $i (0 .. 3) {
	    walk($y + $dir[$i]->[0], $x + $dir[$i]->[1]) if not $grid[ $t + $next[$i] ]
    }
 
    $grid[$_]-- for $t, $len - $t;
}
 
sub solve {
    my ($hh, $ww, $recurse) = @_;
    my $t;
    ($h, $w) = ($hh, $ww);
    ($t, $w, $h) = ($w, $h, $w) if $h & 1;
    return  0 if $h == 1;
    return  1 if $w == 1;
    return $h if $w == 2;
    return $w if $h == 2;
 
    my($cy, $cx) = (int($h/2), int($w/2));
    #{ use integer; ($cy, $cx) = ($h / 2, $w / 2) } # cute
    $len = ($h + 1) * ($w + 1);
    @grid = ();
    $grid[$len--] = 0;
    @next = (-1, -$w - 1, 1, $w + 1);
 
    $cnt = 0 if $recurse;
    for (my $x = $cx + 1; $x < $w; $x++) {
	    $t = $cy * ($w + 1) + $x;
        $grid[$_] = 1 for $t, $len - $t;
	    walk($cy - 1, $x);
    }
 
    $cnt++;
    if    ( $h == $w                ) { $cnt *= 2     }
    elsif ( $recurse and not $w & 1 ) { solve($w, $h) }
    $cnt
}
 
for my $y (1 .. 9) {
    for my $x (1 .. $y) {
		$result .= sprintf "%d × %d: %d\n", $y, $x, solve $y, $x, 1 unless $x & 1 and $y & 1
	}
}

say $result; 

my $ref = <<'EOD';
2 × 1: 1
2 × 2: 2
3 × 2: 3
4 × 1: 1
4 × 2: 4
4 × 3: 9
4 × 4: 22
5 × 2: 5
5 × 4: 39
6 × 1: 1
6 × 2: 6
6 × 3: 23
6 × 4: 90
6 × 5: 263
6 × 6: 1018
7 × 2: 7
7 × 4: 151
7 × 6: 2947
8 × 1: 1
8 × 2: 8
8 × 3: 53
8 × 4: 340
8 × 5: 1675
8 × 6: 11174
8 × 7: 55939
8 × 8: 369050
9 × 2: 9
9 × 4: 553
9 × 6: 31721
9 × 8: 1812667
EOD

use Test::More;
is ($result, $ref);
done_testing();
