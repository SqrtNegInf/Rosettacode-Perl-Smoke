#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Cartesian_product_of_two_or_more_lists
#c# 2018-11-15 <RC
#p# OK

use feature 'say';

# A variety of modules can do this correctly for an arbitrary number of lists (each of independent length). 
# Arguably using modules is very idiomatic Perl.

my @input = ( [1,2,3], [qw/a b c/], [qw/@ $ !/] );

use ntheory qw/forsetproduct/;
forsetproduct { push @res1, "@_" } @input;

use Set::Product qw/product/;
product       { push @res2, "@_" } @input;

use Math::Cartesian::Product;
cartesian     { push @res3, "@_" } @input;

use Algorithm::Loops qw/NestedLoops/;
NestedLoops(                      [@input],
          sub { push @res4, "@_" }
);

say $result1 = join "\n", @res1;
say $result2 = join "\n", @res2;
say $result3 = join "\n", @res3;
say $result4 = join "\n", @res4;

my $ref = <<'EOD';
1 a @
1 a $
1 a !
1 b @
1 b $
1 b !
1 c @
1 c $
1 c !
2 a @
2 a $
2 a !
2 b @
2 b $
2 b !
2 c @
2 c $
2 c !
3 a @
3 a $
3 a !
3 b @
3 b $
3 b !
3 c @
3 c $
3 c !
EOD

use Test::More;
chop $ref;
is ($result1, $ref);
is ($result2, $ref);
is ($result3, $ref);
is ($result4, $ref);
done_testing();
