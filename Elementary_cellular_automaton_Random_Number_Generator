#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Elementary_cellular_automaton/Random_Number_Generator
#c# 2018-07-31 <RC
#p# OK

use feature 'say';
my $result;

#Translation of: Perl 6

package Automaton {
    sub new {
	my $class = shift;
	my $rule = [ reverse split //, sprintf "%08b", shift ];
	return bless { rule => $rule, cells => [ @_ ] }, $class;
    }
    sub next {
	my $this = shift;
	my @previous = @{$this->{cells}};
	$this->{cells} = [
	    @{$this->{rule}}[
	    map {
	      4*$previous[($_ - 1) % @previous]
	    + 2*$previous[$_]
	    +   $previous[($_ + 1) % @previous]
	    } 0 .. @previous - 1
	    ]
	];
	return $this;
    }
    use overload
    q{""} => sub {
	my $this = shift;
	join '', map { $_ ? '#' : ' ' } @{$this->{cells}}
    };
}
 
my $a = Automaton->new(30, 1, map 0, 1 .. 100);
 
for my $n (1 .. 10) {
    my $sum = 0;
    for my $b (1 .. 8) {
	$sum = $sum * 2 + $a->{cells}[0];
	$a->next;
    }
    $result .= sprintf '%d%s', $sum, $n == 10 ? "\n" : " ";
}


say $result; 
my $ref = <<'EOD';
220 197 147 174 117 97 149 171 240 241
EOD

use Test::More;
is ($result, $ref);
done_testing();
