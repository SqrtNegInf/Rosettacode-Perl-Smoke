#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Minimum_positive_multiple_in_base_10_using_only_0_and_1
#c# 2020-03-03 NOT ON RC
#p# OK
#n# no special cases, fastest of 3 versions (a literal translation of Julia entry)

use strict;
use warnings;
use feature 'say';

use Math::BigInt;

my @res;

sub B10 {
    my($n) = @_;
    return 1 if $n == 1;
    my ($num, $count, $ten) = ($n+1, 0, 1);
    my @val = my @pow = (0) x ($num+1);
    for my $i (1..$n) {
        $val[$i+1] = $ten;
        for my $j (1..$num) {
            my $k = ($j + $ten - 1) % $n+1;
            $pow[$k] = $i if $pow[$j] != 0 && $pow[$k] == 0 && $pow[$j] != $i;
        }
        $pow[$ten+1] = $i if $pow[$ten+1] == 0;
        last if $pow[1] != 0;
        $ten = (10 * $ten) % $n;
    }

    my($res,$i) = ('',$n);
    while ($i != 0) {
        my $pm = $pow[$i % $n+1];
        $res .= '0' x ($count - $pm) if $count > $pm;
        $count = $pm - 1;
        $res .= '1';
        $i = ($n + $i - $val[$pm+1]) % $n
    }
    $res .= '0' x $count if $count > 0;
    return $res;
}

for my $n (1..10, 95..105, 97, 576, 891, 909, 999, 1998, 2079, 2251, 2277, 2439, 2997, 4878) {
    my $i = B10($n);
    push @res, sprintf "%4d: %28s  %s", $n, $i, Math::BigInt->new($i) / Math::BigInt->new($n)
}

say my $result = join "\n", @res;

my $ref = <<'END';
   1:                            1  1
   2:                           10  5
   3:                          111  37
   4:                          100  25
   5:                           10  2
   6:                         1110  185
   7:                         1001  143
   8:                         1000  125
   9:                    111111111  12345679
  10:                           10  1
  95:                       110010  1158
  96:                     11100000  115625
  97:                     11100001  114433
  98:                     11000010  112245
  99:           111111111111111111  1122334455667789
 100:                          100  1
 101:                          101  1
 102:                      1000110  9805
 103:                     11100001  107767
 104:                      1001000  9625
 105:                       101010  962
  97:                     11100001  114433
 576:              111111111000000  192901234375
 891:          1111111111111111011  1247038284075321
 909:          1011111111111111111  1112333455567779
 999:  111111111111111111111111111  111222333444555666777889
1998: 1111111111111111111111111110  556111667222778333889445
2079:       1001101101111111111111  481530111164555609
2251:                 101101101111  44913861
2277:         11110111111111111011  4879275850290343
2439:   10000101011110111101111111  4100082415379299344449
2997: 1111110111111111111111111111  370740777814851888925963
4878:  100001010111101111011111110  20500412076896496722245
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
