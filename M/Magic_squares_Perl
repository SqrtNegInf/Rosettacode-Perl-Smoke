#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/RC_REMOTE
#t# skiptest
#c# 2019-05-xx >RC
#p# OK
#   pass in '2' on command line to have results 2 .. 12 validated

use Data::Printer;

use strict;
use warnings;
use feature 'say';
my $result;

#Rather than having multiple examples for different orders of magic square, this will generate a magic square for any valid n x n grid.
#Invoke at the command line and pass in the desired size as a parameter.

use List::Util 'sum';

#sub MAIN (Int $n where {$n > 0}) {
my $n = 2;
my(@sq,$i,$h,$q);
 
if ($n == 2) {
  for $n (3..12) {
    $i = 1;
    $h = int($n / 2);
    $q = int($n / 4);
    gen_sq($n);
    $result .= sprintf("%@{[1+length($n)]}d"x$n,@$_), $result .= "\n" for @sq;
    say $result;
    printf("The magic number is %d", sum @{$sq[0]}); $result .=  "\n\n";
exit;
  }
} else { 
    gensq($n);
}

say $result;

sub gensq {
    my($n) = @_;
    $i = 1;
    $h = int($n / 2);
    $q = int($n / 4);
    gen_sq($n);
    $result .= sprintf("%@{[1+length($n)]}d"x$n,@$_), $result .= "\n" for @sq;
    $result .= sprintf("The magic number is %d", sum $sq[0]); $result .=  "\n\n";
} 

 
sub gen_sq {
    my($n) = @_;

    if ($n == 2) {
        die "Sorry, can not generate a 2 x 2 magic square.";
 
    } elsif ($n % 2) { # odd
        my $x = $n/2;
        my $y = 0;
    say "x0: $x";
        $sq[($i % $n  ? $y--  : $y++) % $n][($i % $n  ? $x++  : $x) % $n] = $i++ for 0..-1+$n**2;
       #@sq[($i % $n ?? $y-- !! $y++) % $n][($i % $n ?? $x++ !! $x) % $n] = $i++ for ^$n²;
    say "x1: $x";
    say "y1: $y";
    }
 
}
#@sq = [[8, 1, 6], [3, 5, 7], [4, 9, 2]]
#The magic number is 15

    #p @sq; exit;
__END__
    multi sub gen_sq ($n where {$n %% 4}) { # doubly even
        my $x = 0;
        my $y = 0;
        @sq[$i % $n ?? $y !! $y++][($i-1) % $n] = $i++ for ^$n²;
        for ^$q -> $r {
            for $q ..^ $n - $q -> $c {
                my $ŕ = $n - 1 - $r;
                my $ć = $n - 1 - $c;
                (@sq[$r;$c], @sq[$ŕ;$ć]) = (@sq[$ŕ;$ć], @sq[$r;$c]);
                (@sq[$c;$r], @sq[$ć;$ŕ]) = (@sq[$ć;$ŕ], @sq[$c;$r]);
            }
        }
    }
 
    multi sub gen_sq ($n where {$n %% 2 and $n % 4}) { # singly even
        gen_sq($h);
        $i *= 4;
        for ^$h -> $r {
            for ^$h -> $c {
                @sq[$r + $h; $c]      = @sq[$r;$c] + $h² * 3;
                @sq[$r; $c + $h]      = @sq[$r;$c] + $h² * 2;
                @sq[$r + $h; $c + $h] = @sq[$r;$c] + $h²;
            }
            for ^$q -> $c {
                next if $c == 0 and $r == ($h-1) div 2;
                (@sq[$r;$c], @sq[$r + $h;$c]) = (@sq[$r + $h;$c], @sq[$r;$c]);
            }
            if $h > 4 {
                for ($n - $q + 1) ..^ $n -> $c {
                        (@sq[$r;$c], @sq[$r + $h;$c]) = (@sq[$r + $h;$c], @sq[$r;$c]);
                }
            }
        }
        (@sq[$q;$q], @sq[$q+$h;$q]) = (@sq[$q+$h;$q], @sq[$q;$q]);
    }

exit unless $n == 2;
my $ref = slurp 'ref/magic_squares.txt';
use Test;
is $result, $ref;
#}

# say $result; 
# say my $result = join "\n", @res;
my $ref = <<'EOD';
EOD

use Test::More;
#chomp $ref;
#is($result, $ref);
#done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre style="height:20ex"></pre>
[https://github.com/SqrtNegInf/Rosettacode-Perl5-Smoke/blob/master/ref/XXX XXX]
