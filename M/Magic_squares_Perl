#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Magic_magics/Perl
#c# 2019-05-04 >RC
#p# OK
#n# rather than having multiple examples for different orders of magic square, this will generate a magic square for any valid n x n grid.
#n# surprising P5/P6 difference: '= $i++' must be done *after* subscripting

use strict;
use warnings;
use feature 'say';
my $result;

use List::Util 'sum';

my(@sq,$i,$h,$q);
 
for my $n (3..12,31) {
    $i = 1;
    $h = int($n / 2);
    $q = int($n / 4);
    generate_magic($n);
    validate_magic($n);
    $result .= sprintf("N = $n, magic number = %d\n", sum @{$sq[0]});
    $result .= sprintf(("%@{[1+length($n**2)]}d"x$n)."\n",@$_) for @sq;
    $result .= "\n";
}

sub generate_magic {
    my($n) = @_;

    if ($n <= 2) {
        print "Sorry, can not generate a $n x $n magic square.\n" and return;
 
    } elsif ($n % 2) { # odd
        my $x = $n/2;
        my $y = 0;
        for (0 .. $n**2-1) {
            $sq[($i%$n ? $y-- : $y++) % $n][($i%$n ? $x++ : $x) % $n] = $i;
            $i++;
        }
 
    } elsif (0 == int $n%4) { # doubly even
        my $x = 0;
        my $y = 0;
        for (0 .. $n**2-1) {
            $sq[$i % $n ? $y : $y++][($i-1) % $n] = $i;
            $i++;
        }
        for my $r (0..$q-1) {
            for my $c ($q .. $n-$q-1) {
                swap( ($r,$c), ($n-1-$r,$n-1-$c) );
                swap( ($c,$r), ($n-1-$c,$n-1-$r) );
            }
        }
 
    } elsif (0 == int($n%2) && $n%4) { # singly even
        generate_magic($h);
        $i *= 4;
        for my $r (0..$h-1) {
            for my $c (0..$h-1) {
                $sq[$r+$h][$c   ] = $sq[$r][$c] + $h**2 * 3;
                $sq[$r   ][$c+$h] = $sq[$r][$c] + $h**2 * 2;
                $sq[$r+$h][$c+$h] = $sq[$r][$c] + $h**2;
            }
            for my $c (0..$q-1) {
                next if $c == 0 and $r == int(($h-1)/2);
                swap( ($r,$c), ($r+$h,$c) );
            }
            if ($h > 4) {
                swap( ($r,$_), ($r+$h,$_) ) for $n-$q+1 .. $n-1;
            }
        }
        swap( ($q,$q), ($q+$h,$q) );
    }
}

sub swap { 
    my($a,$b,$c,$d) = @_;
    ($sq[$a][$b], $sq[$c][$d]) = ($sq[$c][$d], $sq[$a][$b]);
} 

sub validate_magic {
    my $magic = sum @{$sq[0]};
    my @transpose;
    foreach my $j (0..$#{$sq[0]}) {
        push(@transpose, [map $_->[$j], @sq]);
    }
    for (0..$#sq) {
        die unless $magic == sum @{ $sq[$_]} and $magic == sum @{$transpose[$_]}
    }
}

#say $result;

use Test::More;
my $ref = `cat ref/magic_squares.txt`;
chomp $ref;
is($result, $ref);
done_testing();
