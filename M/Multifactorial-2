#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Multifactorial
#c# 2018-08-19 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

# We can also do this iteratively. ntheory's vecprod makes bigint products if needed, so we don't have to worry about it.
# Library: ntheory

use ntheory qw/vecprod/;

sub mfac {
  my($n,$d) = @_;
  vecprod(map { $n - $_*$d } 0 .. int(($n-1)/$d));
}

for my $degree (1..5) {
  $result .= "$degree: " . join(" ",map{mfac($_,$degree)} 1..10) . "\n";
}

say $result; 
my $ref = <<'EOD';
1: 1 2 6 24 120 720 5040 40320 362880 3628800
2: 1 2 3 8 15 48 105 384 945 3840
3: 1 2 3 4 10 18 28 80 162 280
4: 1 2 3 4 5 12 21 32 45 120
5: 1 2 3 4 5 6 14 24 36 50
EOD

use Test::More;
is ($result, $ref);
done_testing();
