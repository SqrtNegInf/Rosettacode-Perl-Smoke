#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Multifactorial
#c# 2018-08-19 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

{ # <-- scoping the cache and bigint clause
	my @cache;
	use bigint;
	sub mfact {
		my ($s, $n) = @_;
		return 1 if $n <= 0;
		$cache[$s][$n] //= $n * mfact($s, $n - $s);
	}
}

for my $s (1 .. 10) {
	$result .= "step=$s: ";
	$result .= join(" ", map(mfact($s, $_), 1 .. 10)). "\n";
}

say $result; 
my $ref = <<'EOD';
step=1: 1 2 6 24 120 720 5040 40320 362880 3628800
step=2: 1 2 3 8 15 48 105 384 945 3840
step=3: 1 2 3 4 10 18 28 80 162 280
step=4: 1 2 3 4 5 12 21 32 45 120
step=5: 1 2 3 4 5 6 14 24 36 50
step=6: 1 2 3 4 5 6 7 16 27 40
step=7: 1 2 3 4 5 6 7 8 18 30
step=8: 1 2 3 4 5 6 7 8 9 20
step=9: 1 2 3 4 5 6 7 8 9 10
step=10: 1 2 3 4 5 6 7 8 9 10
EOD

use Test::More;
is ($result, $ref);
done_testing();
