#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Make_a_backup_file
#c# 2019-05-11 >RC
#p# OK
#r# RC prep: cp -p ref/not-in-kansas.txt run
#f# RC file: not-in-kansas.txt.bk1

use strict;
use warnings;

# Back up the given path/filename with a default extension .bk(n)
# where n is in the range 1 - $limit (default 3).
# Prints 'File not found' to STDERR if the file does not exist.
# Will not do anything if limit is set to less than 1.
# Will not follow symlinks by default.
 
sub backup {
    my($filepath,$limit,$ext) = @_;
    my $abs = readlink $filepath // $filepath;
    for my $bnum (reverse 1 .. $limit-1) {
        rename "$abs$ext$bnum", "$abs$ext" . ++$bnum if -e "$abs$ext$bnum";
    }

    if (-e $abs) {
        if ($limit > 0) {
            my $orig = $abs . $ext . '1';
            rename $abs, $orig;
            open(my $IN,  '<', $orig) or die "can't open $orig: $!";
            open(my $OUT, '>', $abs) or die "can't open $abs: $!";

            my $blksize = (stat $IN)[11] || 2**14;          # preferred block size?
            my $buf;
            while (my $len = sysread $IN, $buf, $blksize) {
                die "System read error: $!\n" if !defined $len;
                my $offset = 0;
                while ($len) {          # Handle partial writes.
                    defined(my $written = syswrite $OUT, $buf, $len, $offset)
                        or die "System write error: $!\n";
                    $len    -= $written;
                    $offset += $written;
                };
            }

            close($IN);
            close($OUT);
        }
    } else {
        warn "File not found: $abs" and return 0;
    }
    $abs # return filepath on success
}
 
my $fn = 'not-in-kansas.txt';
unlink "run/$fn.bk1" if  -e "run/$fn.bk1";
backup("run/$fn",3,'.bk');
