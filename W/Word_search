#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Word_search
#c# 2019-12-19 <RC, 2023-04-02 >RC
#p# OK
#n# stick with word source inside git archive
#n# 2023-04-02 fails dramaticallly with v5.36, must use new bitwise operators: &. |. ~.

my @res;

srand 123456;

use strict;
use warnings;
use feature 'say';

use Path::Tiny;
use List::Util qw 'shuffle';

my $size = 10;
my $s1   = $size + 1;

$_ = <<'END';
.....R....
......O...
.......S..
........E.
T........T
.A........
..C.......
...O......
....D.....
.....E....
END

#my @words = shuffle path('/usr/share/dict/words')->slurp =~ /^[a-z]{3,7}$/gm;
my @words = shuffle path('ref/unixdict.txt')->slurp =~ /^[a-z]{3,7}$/gm;
my @played;
my %used;

for my $word ( (@words) x 5 ) {
    my ($pat, $start, $end, $mask, $nulls) = find( $word );
    defined $pat or next;
    $used{$word}++ and next; # only use words once
    $nulls //= '';
    my $expand = $word =~ s/\B/$nulls/gr;
    my $pos = $start;
    if ($start > $end) {
        $pos = $end;
        $expand = reverse $expand;
    }
    substr $_, $pos, length $mask, (substr( $_, $pos, length $mask ) &  ~  "$mask") |  "$expand"; 
   #substr $_, $pos, length $mask, (substr( $_, $pos, length $mask ) &. ~. "$mask") |. "$expand"; # use this with v5.36
    push @played, join ' ', $word, $start, $end;
    tr/.// > 0 or last;
}

push @res, "   0 1 2 3 4 5 6 7 8 9\n\n";
my $row = 0;
push @res, s/(?<=.)(?=.)/ /gr =~ s/^/ $row++ . '  ' /gemr;
push @res, "\nNumber of words: " . @played . "\n\n";

my @where = map {
    my ($word, $start, $end) = split;
    sprintf "%11s %s", $word, $start < $end
    ? "(@{[$start % $s1    ]}, @{[int $start / $s1]})->" .
      "(@{[$end   % $s1 - 1]}, @{[int $end   / $s1]})"
    : "(@{[$start % $s1 - 1]}, @{[int $start / $s1]})->" .
      "(@{[$end   % $s1    ]}, @{[int $end   / $s1]})";
} sort @played;

push @res, join(' ', splice(@where, 0, 3)) while @where;
tr/.// and die "incomplete";

sub find {
    my ($word) = @_;
    my $n = length $word;
    my $nm1 = $n - 1;
    my %pats;

    for my $space ( 0, $size - 1 .. $size + 1 ) {
        my $nulls = "\0" x $space;
        my $mask = "\xff" . ($nulls . "\xff") x $nm1; # vert
        my $gap = qr/.{$space}/s;
        while (/(?=(.(?:$gap.){$nm1}))/g) {
            my $pat = ($1 &  $mask) =~ tr/\0//dr;
           #my $pat = ($1 &. $mask) =~ tr/\0//dr; # use this with v5.36
            $pat =~ tr/.// or next;
            my $pos = "$-[1] $+[1]";
            $word =~ /$pat/ or reverse($word) =~ /$pat/ or next;
            push @{ $pats{$pat} }, "$pos $mask $nulls";
        }
    }

    for my $key ( sort keys %pats ) {
        if ($word =~ /^$key$/) {
            my @all = @{ $pats{$key} };
            return $key, split ' ', $all[ rand @all ];
        } elsif ((reverse $word) =~ /^$key$/) {
            my @all = @{ $pats{$key} };
            my @parts = split ' ', $all[ rand @all ];
            return $key, @parts[ 1, 0, 2, 3]
        }
    }
    return undef
}

say my $result = join "\n", @res;

my $ref = <<'EOD';
   0 1 2 3 4 5 6 7 8 9


0  y s g k d R c n o b
1  r e y r e o O i t o
2  h c n k a n o S t l
3  p o a s e d e m E e
4  T e p t i s e l l T
5  b A n b s d w i a e
6  e c C m r u e n n x
7  s f a O a o p e d e
8  t c e m D n t n i r
9  e v i e p E d h s t


Number of words: 25


        and (4, 7)->(6, 9)        best (0, 5)->(0, 8)        bole (9, 0)->(9, 3)
      broth (3, 5)->(7, 9)        camp (1, 6)->(4, 9)      catsup (1, 2)->(6, 7)
        cit (6, 0)->(8, 2)      disney (5, 5)->(0, 0)        doom (4, 0)->(7, 3)
      exert (9, 5)->(9, 9)         fee (1, 7)->(3, 9)       grade (2, 0)->(6, 4)
        hop (0, 2)->(2, 4)         ito (7, 1)->(9, 1)         ken (3, 0)->(5, 2)
     landis (8, 4)->(8, 9)       linen (7, 4)->(7, 8)        mace (3, 6)->(0, 9)
        nap (2, 2)->(2, 4)         nob (7, 0)->(9, 0)      penman (0, 3)->(5, 8)
      pewee (6, 7)->(6, 3)         rca (0, 1)->(2, 3)       sykes (1, 0)->(5, 4)
        vie (1, 9)->(3, 9)
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
