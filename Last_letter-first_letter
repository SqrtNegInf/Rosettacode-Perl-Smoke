#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Last_letter-first_letter
#c# 2018-08-14 <RC
#p# OK

srand 123456;

# This is rather 'one liner' code, not to be used in production.
# The idea is to try all possible variants recursively.

# First, it creates the map-like structure: first letter â†’ array of (name + last letter).
# During the cycle it uses @w as stack;
# @m keeps the longest sequence which is copied from @w;
# to prevent the words from appearing twice, they are (temporarily) deleted from the structure keeping the value in a stack variable.

/^(.).*(.)$/,$f{$1}{$_}=$2 for qw(
audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon
cresselia croagunk darmanitan deino emboar emolga exeggcute gabite
girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan
kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine
nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2
porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking
sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko
tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask
);

sub poke
{
	my $h = $f{$_[0]};
	for my $w (keys %$h) {
		my $v = $h->{$w};
		delete $h->{$w};
		push @w, $w;
		@m = @w if @w > @m;
		poke($v);
		pop @w;
		$h->{$w} = $v;
	}
}

poke($_) for keys %f;
print @m.": @m\n";

$ref = <<END;
23: machamp petilil landorus simisear rufflet trapinch haxorus scrafty yamask kricketune exeggcute emboar relicanth heatmor registeel loudred darmanitan nosepass seaking girafarig gabite emolga audino
END

use Test::More;
is (scalar @m, 23);
#is ($result, $ref);
done_testing();
