#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Topological_sort
#c# 2018-08-09 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my @res;
my $result;

# In July 2002, Topological Sort was the monthly Perl Golf course. The post-mortem contains many solutions. This code was adapted from the solution that scored 144.39.
# The algorithm used allows the output to be clustered; libraries on the same line are all independent (given the building of any previous lines of libraries), and so could be built in parallel.

sub print_topo_sort {
    my %deps = @_;

    my %ba;
    while ( my ( $before, $afters_aref ) = each %deps ) {
        for my $after ( @{ $afters_aref } ) {
            $ba{$before}{$after} = 1 if $before ne $after;
            $ba{$after} ||= {};
        }
    }

    while ( my @afters = sort grep { ! %{ $ba{$_} } } keys %ba ) {
        $result .= "@afters\n";
        delete @ba{@afters};
        delete @{$_}{@afters} for values %ba;
    }

    $result .= !!%ba ? "Cycle found! ". join( ' ', sort keys %ba ). "\n" : "---\n";
}

my %deps = (
    des_system_lib => [<std synopsys std_cell_lib des_system_lib dw02 dw01 ramlib ieee >],
    dw01           => [<ieee dw01 dware gtech                         >],
    dw02           => [<ieee dw02 dware                               >],
    dw03           => [<std synopsys dware dw03 dw02 dw01 ieee gtech  >],
    dw04           => [<dw04 ieee dw01 dware gtech                    >],
    dw05           => [<dw05 ieee dware                               >],
    dw06           => [<dw06 ieee dware                               >],
    dw07           => [<ieee dware                                    >],
    dware          => [<ieee dware                                    >],
    gtech          => [<ieee gtech                                    >],
    ramlib         => [<std ieee                                      >],
    std_cell_lib   => [<ieee std_cell_lib                             >],
    synopsys       => [<                                              >],
);
print_topo_sort(%deps);
push @{ $deps{'dw01'} }, 'dw04'; # Add unresolvable dependency
print_topo_sort(%deps);

say $result; 
my $ref = <<'EOD';
ieee std synopsys
dware gtech ramlib std_cell_lib
dw01 dw02 dw05 dw06 dw07
des_system_lib dw03 dw04
---
ieee std synopsys
dware gtech ramlib std_cell_lib
dw02 dw05 dw06 dw07
Cycle found! des_system_lib dw01 dw03 dw04
EOD

use Test::More;
is ($result, $ref);
done_testing;
