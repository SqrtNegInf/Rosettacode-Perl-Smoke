#!/usr/local/bin/perl -Ilib do-not-check
#u# http://rosettacode.org/wiki/Test_a_function
#c# 2018-08-11 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

# A test file, with a .t suffix, is just a Perl program that prints a test stream in Test Anything Protocol (TAP). There are modules to help print things in the correct TAP format; Perl 5 bundles Test, Test::Simple and Test::More.
# This example uses Test and requires the Palindrome.pm file from Palindrome detection#Perl.

use lib 'lib';
use Test;

my %tests;
BEGIN {
    # plan tests before loading Palindrome.pm
    %tests = (
        'A man, a plan, a canal: Panama.'           => 1,
        'My dog has fleas'                          => 0,
#        "Madam, I'm Adam."                          => 1,
#        '1 on 1'                                    => 0,
#        'In girum imus nocte et consumimur igni'    => 1,
#        ''                                          => 1,
    );

    # plan 4 tests per string
    plan tests => (keys(%tests) * 4);
}

use Palindrome;

for my $key (keys %tests) {
    $_ = lc $key;  # convert to lowercase
    s/[\W_]//g;    # keep only alphanumeric characters

    my $expect = $tests{$key};
    my $note = ("\"$key\" should " . ($expect ? '' : 'not ') .
                "be a palindrome.");

    ok palindrome == $expect, 1, "palindrome: $note";
    ok palindrome_c == $expect, 1, "palindrome_c: $note";
    ok palindrome_r == $expect, 1, "palindrome_r: $note";
    ok palindrome_e == $expect, 1, "palindrome_e: $note";
}
