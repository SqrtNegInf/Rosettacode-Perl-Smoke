#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Tree_datastructures
#c# 2019-11-08 >RC
#p# OK

use strict;
use warnings;
use feature 'say';

use JSON;
use Data::Printer;

my @res;

my $trees = <<~END;
    RosettaCode
      encourages
        code
          diversity
          comparison
      discourages
        golfing
        trolling
        emphasising execution speed
    code-golf.io
      encourages
        golfing
      discourages
        comparison
    END

my $level = '  ';
#sub nested_to_indent { shift =~ s#^(($level*))*# ($1 ? length($1)/length $level : 0) . ' ' #egmr } # tree root marked with 'zero'
sub nested_to_indent { shift =~ s#^($level*)# (length($1)/length $level) . ' ' #egmr }  # no 'zero' level, but OK for round-trip
sub indent_to_nested { shift =~ s#^(\d+)\s*# $level x $1 #egmr }

say my $indent = nested_to_indent $trees;
    my $nest   = indent_to_nested $indent;

# Import outline paragraph into native data structure
sub import {
    my($trees) = @_;
    my $level = '  ';
    my $forest;
    my $last = -999;

    for my $branch (split /\n/, $trees) {
        $branch =~ m/(($level*))*/;
        my $this = $1 ? length($1)/length($level) : 0;
        $forest .= do {
            if    ($this gt $last) { '['                   . trim_and_quote($branch) }
            elsif ($this lt $last) { ']'x($last-$this).',' . trim_and_quote($branch) }
            else                   {                         trim_and_quote($branch) }
        };
        $last = $this;
    }
    sub trim_and_quote { shift =~ s/^\s*(.*\S)\s*$/"$1",/r }

    eval $forest . ']' x (1+$last);
}

my $forest = import $trees;
push @res, "Native data structure:\n" . np $forest;
push @res, "\nJSON:\n" . encode_json($forest);

say my $result = join "\n", @res;

my $ref = <<'END';
Native data structure:
\ [
    [0] "RosettaCode",
    [1] [
        [0] "encourages",
        [1] [
            [0] "code",
            [1] [
                [0] "diversity",
                [1] "comparison"
            ]
        ],
        [2] "discourages",
        [3] [
            [0] "golfing",
            [1] "trolling",
            [2] "emphasising execution speed"
        ]
    ],
    [2] "code-golf.io",
    [3] [
        [0] "encourages",
        [1] [
            [0] "golfing"
        ],
        [2] "discourages",
        [3] [
            [0] "comparison"
        ]
    ]
]

JSON:
["RosettaCode",["encourages",["code",["diversity","comparison"]],"discourages",["golfing","trolling","emphasising execution speed"]],"code-golf.io",["encourages",["golfing"],"discourages",["comparison"]]]
END

use Test::More;
is($trees, $nest, 'Round-trip is good.');
chomp $ref;
is($result, $ref);
done_testing();
