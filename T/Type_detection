#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Type_detection
#c# 2018-08-31 >RC
#p# OK

my $result;

use strict;
use warnings;
use feature 'say';

my $scalar    = 1;
my @array     = (1, 2);
my %hash      = ('a' => 1);
my $regex     = qr/foo.*bar/;
my $reference = \%hash;
sub greet { print "Hello world!" };
my $subref    = \&greet;

my $fmt = "%-11s is type:  %s\n";
$result .= sprintf $fmt, '$scalar',    ref(\$scalar);
$result .= sprintf $fmt, '@array',     ref(\@array);
$result .= sprintf $fmt, '%hash',      ref(\%hash);
$result .= sprintf $fmt, '$regex',     ref($regex);
$result .= sprintf $fmt, '$reference', ref(\$reference);
$result .= sprintf $fmt, '$subref',    ref($subref);

# but easy to fool
# ref(\@{$scalar});

say $result;

my $ref = <<'EOD';
$scalar     is type:  SCALAR
@array      is type:  ARRAY
%hash       is type:  HASH
$regex      is type:  Regexp
$reference  is type:  REF
$subref     is type:  CODE
EOD

use Test::More;
is ($result, $ref);
done_testing;
