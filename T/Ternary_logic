#!/usr/bin/env perl
#u# http://rosettacode.org/wiki/Ternary_logic
#c# 2018-08-11 <RC, 2023-03-21 >RC
#p# OK

use strict;
use warnings;
use feature 'say';

package Trit;

our @ISA = qw(Exporter);
our @EXPORT = qw(TRUE FALSE MAYBE);

use List::Util qw(min max);

use overload
'='  => sub { $_[0]->clone() },
'<=>'=> sub { $_[0]->cmp($_[1]) },
'cmp'=> sub { $_[0]->cmp($_[1]) },
'==' => sub { ${$_[0]} == ${$_[1]} },
'eq' => sub { $_[0]->equiv($_[1]) },
'>'  => sub { ${$_[0]} > ${$_[1]} },
'<'  => sub { ${$_[0]} < ${$_[1]} },
'>=' => sub { ${$_[0]} >= ${$_[1]} },
'<=' => sub { ${$_[0]} <= ${$_[1]} },
'|'  => sub { $_[0]->or($_[1]) },
'&'  => sub { $_[0]->and($_[1]) },
'!'  => sub { $_[0]->not() },
'~'  => sub { $_[0]->not() },
'""' => sub { $_[0]->tostr() },
'0+' => sub { $_[0]->tonum() },
;

sub new {
    my ($class, $v) = @_;
    my $ret =
        !defined($v) ? 0 :
        $v eq 'true' ? 1 :
        $v eq 'false'? -1 :
        $v eq 'maybe'? 0 :
        $v > 0 ? 1 :
        $v < 0 ? -1 :
        0;
    return bless \$ret, $class;
}

sub TRUE()  { new Trit( 1) }
sub FALSE() { new Trit(-1) }
sub MAYBE() { new Trit( 0) }

sub clone {
    my $ret = ${$_[0]};
    return bless \$ret, ref($_[0]);
}

sub tostr { ${$_[0]} > 0 ? 'true' : ${$_[0]} < 0 ? 'false' : 'maybe' }
sub tonum { ${$_[0]} }

sub cmp { ${$_[0]} <=> ${$_[1]} }
sub not { new Trit(-${$_[0]}) }
sub and { new Trit(min(${$_[0]}, ${$_[1]}) ) }
sub or  { new Trit(max(${$_[0]}, ${$_[1]}) ) }

sub equiv { new Trit( ${$_[0]} * ${$_[1]} ) }

package main;
Trit->import;

my @a = (TRUE(), MAYBE(), FALSE());

# prefix ! (not) ['~' also can be used]
my $result = "a\tNOT a" . "\n";
$result .= "$_\t".(!$_)."\n" for @a;

# infix & (and)
$result .= "\nAND\t" . join("\t",@a) . "\n";
for my $a (@a) { $result .= $a; $result .= "\t" . ($a & $_)  for @a; $result .= "\n" }

# infix | (or)
$result .= "\nOR\t" . join("\t",@a) . "\n";
for my $a (@a) { $result .= $a; $result .= "\t" . ($a | $_)  for @a; $result .= "\n" }

# infix eq (equivalence)
$result .= "\nEQV\t" . join("\t",@a) . "\n";
for my $a (@a) { $result .= $a; $result .= "\t" . ($a eq $_) for @a; $result .= "\n" }

# infix == (equality)
$result .= "\n==\t" . join("\t",@a) . "\n";
for my $a (@a) { $result .= $a; $result .= "\t" . ($a == $_) for @a; $result .= "\n" }

say $result;

my $ref = <<'EOD';
a	NOT a
true	false
maybe	maybe
false	true

AND	true	maybe	false
true	true	maybe	false
maybe	maybe	maybe	false
false	false	false	false

OR	true	maybe	false
true	true	true	true
maybe	true	maybe	maybe
false	true	maybe	false

EQV	true	maybe	false
true	true	maybe	false
maybe	maybe	maybe	maybe
false	false	maybe	true

==	true	maybe	false
true	1		
maybe		1	
false			1
EOD

use Test::More;
is ($result, $ref);
done_testing();
