#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Ternary_logic
#c# 2018-08-11 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

#File Trit.pm:

package Trit;

# -1 = false ; 0 = maybe ; 1 = true

#use Exporter 'import';

#our @EXPORT_OK = qw(TRUE FALSE MAYBE is_true is_false is_maybe);
#our %EXPORT_TAGS = (
#	all => \@EXPORT_OK,
#	const => [qw(TRUE FALSE MAYBE)],
#	bool => [qw(is_true is_false is_maybe)],
#);

use List::Util qw(min max);

use overload
'='  => sub { $_[0]->clone() },
'<=>'=> sub { $_[0]->cmp($_[1]) },
'cmp'=> sub { $_[0]->cmp($_[1]) },
'==' => sub { ${$_[0]} == ${$_[1]} },
'eq' => sub { $_[0]->equiv($_[1]) },
'>'  => sub { ${$_[0]} > ${$_[1]} },
'<'  => sub { ${$_[0]} < ${$_[1]} },
'>=' => sub { ${$_[0]} >= ${$_[1]} },
'<=' => sub { ${$_[0]} <= ${$_[1]} },
'|'  => sub { $_[0]->or($_[1]) },
'&'  => sub { $_[0]->and($_[1]) },
'!'  => sub { $_[0]->not() },
'~'  => sub { $_[0]->not() },
'""' => sub { $_[0]->tostr() },
'0+' => sub { $_[0]->tonum() },
;

sub new
{
	my ($class, $v) = @_;
	my $ret =
		!defined($v) ? 0 :
		$v eq 'true' ? 1 :
		$v eq 'false'? -1 :
		$v eq 'maybe'? 0 :
		$v > 0 ? 1 :
		$v < 0 ? -1 :
		0;
	return bless \$ret, $class;
}

sub TRUE()  { new Trit( 1) }
sub FALSE() { new Trit(-1) }
sub MAYBE() { new Trit( 0) }

sub clone
{
	my $ret = ${$_[0]};
	return bless \$ret, ref($_[0]);
}

sub tostr { ${$_[0]} > 0 ? "true" : ${$_[0]} < 0 ? "false" : "maybe" }
sub tonum { ${$_[0]} }

sub is_true { ${$_[0]} > 0 }
sub is_false { ${$_[0]} < 0 }
sub is_maybe { ${$_[0]} == 0 }

sub cmp { ${$_[0]} <=> ${$_[1]} }
sub not { new Trit(-${$_[0]}) }
sub and { new Trit(min(${$_[0]}, ${$_[1]}) ) }
sub or  { new Trit(max(${$_[0]}, ${$_[1]}) ) }

sub equiv { new Trit( ${$_[0]} * ${$_[1]} ) }

#File test.pl:

#use Trit ':all';

my @a = (TRUE(), MAYBE(), FALSE());

$result .= "\na\tNOT a\n";
$result .= "$_\t".(!$_)."\n" for @a;	# Example of use of prefix operator NOT. Tilde ~ also can be used.
 
$result .= "\nAND\t".join("\t",@a)."\n";
for my $a (@a) {
	$result .= $a;
	for my $b (@a) {
		$result .= "\t".($a & $b);	# Example of use of infix & (and)
	}
	$result .= "\n";
}

$result .= "\nOR\t".join("\t",@a)."\n";
for my $a (@a) {
	$result .= $a;
	for my $b (@a) {
		$result .= "\t".($a | $b);	# Example of use of infix | (or)
	}
	$result .= "\n";
}

$result .= "\nEQV\t".join("\t",@a)."\n";
for my $a (@a) {
	$result .= $a;
	for my $b (@a) {
		$result .= "\t".($a eq $b);	# Example of use of infix eq (equivalence)
	}
	$result .= "\n";
}

$result .= "\n==\t".join("\t",@a)."\n";
for my $a (@a) {
	$result .= $a;
	for my $b (@a) {
		$result .= "\t".($a == $b);	# Example of use of infix == (equality)
	}
	$result .= "\n";
}

say $result;

my $ref = <<'EOD';

a	NOT a
true	false
maybe	maybe
false	true

AND	true	maybe	false
true	true	maybe	false
maybe	maybe	maybe	false
false	false	false	false

OR	true	maybe	false
true	true	true	true
maybe	true	maybe	maybe
false	true	maybe	false

EQV	true	maybe	false
true	true	maybe	false
maybe	maybe	maybe	maybe
false	false	maybe	true

==	true	maybe	false
true	1		
maybe		1	
false			1
EOD

use Test::More;
is ($result, $ref);
done_testing();
