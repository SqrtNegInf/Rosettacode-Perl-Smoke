#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Tree_from_nesting_levels
#c# 2021-02-07 <RC
#p# OK
#n# Iterative

my @res;

use strict;
use warnings;
use feature 'say';
use experimental qw<signatures>;
use Data::Dump   qw<pp>;

sub new_level ( $stack ) {
    my $e = [];
    push @{ $stack->[-1] }, $e;
    push @{ $stack       }, $e;
}

sub to_tree_iterative ( @xs ) {
    my $nested = [];
    my $stack  = [$nested];

    for my $x (@xs) {
        new_level($stack) while $x > @{$stack};
        pop     @{$stack} while $x < @{$stack};
        push    @{$stack->[-1]},$x;
    }

    return $nested;
}

my @tests = ([],[1,2,4],[3,1,3,1],[1,2,3,1],[3,2,1,3],[3,3,3,1,1,3,3,3]);
push @res, sprintf('%15s => ', join(' ', @{$_})) . pp(to_tree_iterative(@{$_})) for @tests;

say my $result = join "\n", @res;

my $ref = <<'EOD';
                => []
          1 2 4 => [1, [2, [[4]]]]
        3 1 3 1 => [[[3]], 1, [[3]], 1]
        1 2 3 1 => [1, [2, [3]], 1]
        3 2 1 3 => [[[3], 2], 1, [[3]]]
3 3 3 1 1 3 3 3 => [[[3, 3, 3]], 1, 1, [[3, 3, 3]]]
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
