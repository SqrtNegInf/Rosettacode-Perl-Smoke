#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Time_a_function
#c# 2018-08-10 <RC
#p# OK
#n# even more generous timing limit on 'f1'

use strict;
use warnings;
use feature 'say';
my $result;

# Example of using the built-in Benchmark core module - it compares two versions of recursive factorial functions:

use Benchmark;
use Memoize;

sub fac1 {
    my $n = shift;
    return $n == 0 ? 1 : $n * fac1($n - 1);
}
sub fac2 {
    my $n = shift;
    return $n == 0 ? 1 : $n * fac2($n - 1);
}
memoize('fac2');

$result = timethese(100000, {
    'fac1' => sub { fac1(50) },
    'fac2' => sub { fac2(50) },
});
my $f1 = $$result{'fac1'}[0];
my $f2 = $$result{'fac2'}[0];

Benchmark::cmpthese($result);

# Benchmark: timing 100000 iterations of fac1, fac2...
#       fac1:  6 wallclock secs ( 5.45 usr +  0.00 sys =  5.45 CPU) @ 18348.62/s (n=100000)
#       fac2:  1 wallclock secs ( 0.84 usr +  0.00 sys =  0.84 CPU) @ 119047.62/s (n=100000)
#          Rate fac1 fac2
# fac1  18349/s   -- -85%
# fac2 119048/s 549%   --

#Example without using Benchmark:

sub cpu_time {
  my ($user,$system,$cuser,$csystem) = times;
  $user + $system
}

sub time_it {
  my $action = shift;
  my $startTime = cpu_time();
  $action->(@_);
  my $finishTime = cpu_time();
  $finishTime - $startTime
}

printf "Identity(4) takes %f seconds.\n", my $t1 = time_it(sub {@_}, 4);

sub sum {
  my $x = shift;
  foreach (0 .. 999999) {
    $x += $_;
  }
  $x
}

printf "Sum(4) takes %f seconds.\n", my $t2 = time_it(\&sum, 4);

say '';
say "f1: $f1";
say "f2: $f2";
say "t1: $t1";
say "t2: $t2";
say '';

use Test::More;
ok $f1 <=5.00;
ok $f2 < 3.00;
ok $t1 < 0.02;
ok $t2 < 0.10;
done_testing();
