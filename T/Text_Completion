#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Text_Completion
#c# 2020-08-22 >RC, 2022-03-17 >RC
#p# OK
#n# too much work to handle extended grapheme clusters, Text::Dice can do it...
#n# 2022-09-28 corrected spelling to  'sorensen' (cf 'S/Sorensen–Dice_coefficient')

my @res;

use strict;
use warnings;
use feature 'say';

use Path::Tiny;
use List::Util <uniq head>;

# too bad, stopped working with 5.30?
#sub bi_gram { (lc shift) =~ /(?<=\K.)./g }

sub bi_gram {
    my $line = lc shift;
    uniq map { substr $line,$_,2 } 0..length($line)-2;
}

sub score {
    my($phrase, $word) = @_;
    my %count;

    my @match = bi_gram $phrase;
    $count{$_}++ for @match, @$word;
    2 * (grep { $count{$_} > 1 } keys %count) / (@match + @$word);
}

sub sorensen {
    my($dict,$word,$cutoff) = @_; $cutoff //= 0.55;
    my(%matches,$s);

    ($s = score($word, $$dict{$_})) > $cutoff and $matches{$_} = $s for keys %$dict;
    %matches;
}

my %dict = map { $_ => [ bi_gram($_) ] } path('ref/unixdict.txt')->slurp =~ /.{3,}/gm;

for my $word (<complition inconsqual>) { # Sørenson>) {
    my(%scored,@ranked); 

    %scored = sorensen(\%dict,$word);
    push @ranked, sprintf "%.3f $_", $scored{$_} for sort { $scored{$b} <=> $scored{$a} || $a cmp $b } keys %scored;
    push @res, "\n$word:\n" . join("\n", head 10, @ranked);
}

say my $result = join "\n", @res;

my $ref = <<'END';

complition:
0.778 competition
0.778 completion
0.737 composition
0.706 coalition
0.700 incompletion
0.667 complexion
0.667 complicity
0.667 decomposition
0.632 compilation
0.632 compunction

inconsqual:
0.609 inconsequential
0.588 continual
0.571 squall
0.556 conceptual
0.556 inconstant
0.556 instinctual
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
