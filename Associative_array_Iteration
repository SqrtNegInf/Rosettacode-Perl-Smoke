#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Associative_array/Iteration
#c# 2018-07-15 <RC
#p# OK

use feature 'say';
my $result;

use strict;
 
my %pairs = ( "hello" => 13,
	      "world" => 31,
	      "!" => 71 );
 
# iterate over pairs
 
# Be careful when using each(), however, because it uses a global iterator
# associated with the hash. If you call keys() or values() on the hash in the
# middle of the loop, the each() iterator will be reset to the beginning. If
# you call each() on the hash somewhere in the middle of the loop, it will
# skip over elements for the "outer" each(). Only use each() if you are sure
# that the code inside the loop will not call keys(), values(), or each().

my @res1;
while ( my ($k, $v) = each %pairs) {
    push @res1, sprintf "(k,v) = ($k, $v)\n";
}
 
# iterate over keys
my @res2;
foreach my $key (keys %pairs ) {
    push @res2, sprintf "key = $key, value = $pairs{$key}\n";
}
# or (see note about each() above)
my @res3;
while ( my $key = each %pairs) {
    push @res3, sprintf "key = $key, value = $pairs{$key}\n";
}
 
my @res4;
# iterate over values
foreach my $val ( values %pairs ) {
    push @res4, sprintf "value = $val\n";
}

$result = join '', sort @res1, sort @res2, sort @res3, sort @res4;
say $result; #exit;

my $ref = <<'EOD';
(k,v) = (!, 71)
(k,v) = (hello, 13)
(k,v) = (world, 31)
key = !, value = 71
key = !, value = 71
key = hello, value = 13
key = hello, value = 13
key = world, value = 31
key = world, value = 31
value = 13
value = 31
value = 71
EOD

use Test::More;
is ($result, $ref);
done_testing();
