#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Exactly_three_adjacent_3_in_lists
#c# 2021-12-09 >RC
#p# OK
#n# testing as with Raku version, but adding 0x0 case for the degeneracy of it
#n# tweaked penultimate list to test for '3 x 3 3' case handled by '$n-1 == grep'

my @res;

use strict;
use warnings;
use feature 'say';

my @lists = (
    [ < 9 3 3 3 2 1 7 8 5 > ],
    [ < 5 2 9 3 3 7 8 4 1 > ],
    [ < 1 4 3 6 7 3 8 3 2 > ],
    [ < 1 2 3 4 5 6 7 8 9 > ],
    [ < 4 6 8 7 2 3 3 3 1 > ],
    [ < 3 3 3 1 2 4 5 1 3 > ],
    [ < 0 3 9 3 3 7 2 2 6 > ],
    [ < 3 3 3 3 3 4 4 4 4 > ],
);

push @res, ' 'x21 . '0@0 1@1 2@2 3@3 4@4';
for my $ref ( @lists ) {
    push @res, "@$ref: ";
    for my $n (0..4) {
        my @i = grep $ref->[$_] == $n, 0 .. $#$ref;
        $res[-1] .= '   ' . ($n==0 && !@i || @i == $n && ($n==1 || ($n-1 == grep $i[$_-1]+1 == $i[$_], 1..$n-1)) ? 'Y' : 'N');
        #$res[-1] .= '   ' . (($n==0 and !@i or (@i == $n and ($n==1 or $n-1 == grep $i[$_-1]+1 == $i[$_], 1..$n-1))) ? 'Y' : 'N');
    }
}

say my $result = join "\n", @res;

my $ref = <<'EOD';
                     0@0 1@1 2@2 3@3 4@4
9 3 3 3 2 1 7 8 5:    Y   Y   N   Y   N
5 2 9 3 3 7 8 4 1:    Y   Y   N   N   N
1 4 3 6 7 3 8 3 2:    Y   Y   N   N   N
1 2 3 4 5 6 7 8 9:    Y   Y   N   N   N
4 6 8 7 2 3 3 3 1:    Y   Y   N   Y   N
3 3 3 1 2 4 5 1 3:    Y   N   N   N   N
0 3 9 3 3 7 2 2 6:    N   N   Y   N   N
3 3 3 3 3 4 4 4 4:    Y   N   N   N   Y
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
