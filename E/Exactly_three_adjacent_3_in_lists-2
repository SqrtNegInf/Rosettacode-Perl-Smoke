#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Exactly_three_adjacent_3_in_lists
#c# 2021-12-xx >RC
#p# OK
#n# testing as with Raku version, but adding 0x0 case for chuckles

my @res;

use strict;
use warnings;
use feature 'say';

my @lists = (
    [ <9 3 3 3 2 1 7 8 5> ],
    [ <5 2 9 3 3 7 8 4 1> ],
    [ <1 4 3 6 7 3 8 3 2> ],
    [ <1 2 3 4 5 6 7 8 9> ],
    [ <4 6 8 7 2 3 3 3 1> ],
    [ <3 3 3 1 2 4 5 1 3> ],
    [ <0 3 3 3 3 7 2 2 6> ],
    [ <3 3 3 3 3 4 4 4 4> ],
);

for my $n (0..4) {
  push @res,  "\nExactly $n ${n}'s, and they are consecutive:";
  for my $ref ( @lists ) {
    my @index = grep $ref->[$_] == $n, 0 .. $#$ref;
    push @res, "[@$ref] " . ((!@index && $n==0) || @index == $n && ($n==1 || (grep { $index[$_-1]+1 == $index[$_] } 1..$n-1)) ? 'true' : 'false');
  }
}

say my $result = join "\n", @res;

my $ref = <<'EOD';

Exactly 0 0's, and they are consecutive:
[9 3 3 3 2 1 7 8 5] true
[5 2 9 3 3 7 8 4 1] true
[1 4 3 6 7 3 8 3 2] true
[1 2 3 4 5 6 7 8 9] true
[4 6 8 7 2 3 3 3 1] true
[3 3 3 1 2 4 5 1 3] true
[0 3 3 3 3 7 2 2 6] false
[3 3 3 3 3 4 4 4 4] true

Exactly 1 1's, and they are consecutive:
[9 3 3 3 2 1 7 8 5] true
[5 2 9 3 3 7 8 4 1] true
[1 4 3 6 7 3 8 3 2] true
[1 2 3 4 5 6 7 8 9] true
[4 6 8 7 2 3 3 3 1] true
[3 3 3 1 2 4 5 1 3] false
[0 3 3 3 3 7 2 2 6] false
[3 3 3 3 3 4 4 4 4] false

Exactly 2 2's, and they are consecutive:
[9 3 3 3 2 1 7 8 5] false
[5 2 9 3 3 7 8 4 1] false
[1 4 3 6 7 3 8 3 2] false
[1 2 3 4 5 6 7 8 9] false
[4 6 8 7 2 3 3 3 1] false
[3 3 3 1 2 4 5 1 3] false
[0 3 3 3 3 7 2 2 6] true
[3 3 3 3 3 4 4 4 4] false

Exactly 3 3's, and they are consecutive:
[9 3 3 3 2 1 7 8 5] true
[5 2 9 3 3 7 8 4 1] false
[1 4 3 6 7 3 8 3 2] false
[1 2 3 4 5 6 7 8 9] false
[4 6 8 7 2 3 3 3 1] true
[3 3 3 1 2 4 5 1 3] false
[0 3 3 3 3 7 2 2 6] false
[3 3 3 3 3 4 4 4 4] false

Exactly 4 4's, and they are consecutive:
[9 3 3 3 2 1 7 8 5] false
[5 2 9 3 3 7 8 4 1] false
[1 4 3 6 7 3 8 3 2] false
[1 2 3 4 5 6 7 8 9] false
[4 6 8 7 2 3 3 3 1] false
[3 3 3 1 2 4 5 1 3] false
[0 3 3 3 3 7 2 2 6] false
[3 3 3 3 3 4 4 4 4] true
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
