#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Egyptian_division
#c# 2018-11-18 >RC, 2018-11-19 <RC,
#p# OK

use strict;
use warnings;
use feature 'say';
my(@res,$result);

sub egyptian_divmod {
    my($dividend, $divisor) = @_;
    die "Invalid divisor" if $divisor <= 0;

    my @table = ($divisor);
    push @table, 2*$table[-1] while $table[-1] <= $dividend;

    my $accumulator = 0;
    for my $k (reverse 0 .. $#table) {
        next unless $dividend >= $table[$k];
        $accumulator += 1 << $k;
        $dividend    -= $table[$k];
    }
    ($accumulator, $dividend)
}

for ([580,34], [578,34], [7532795332300578,235117]) {
    my($n,$d) = @$_;
    push @res, sprintf "Egyption divmod %s %% %s = %s remainder %s", $n, $d, egyptian_divmod( $n, $d )
}

say $result = join "\n", @res;

my $ref = <<'EOD';
Egyption divmod 580 % 34 = 17 remainder 2
Egyption divmod 578 % 34 = 17 remainder 0
Egyption divmod 7532795332300578 % 235117 = 32038497141 remainder 81
EOD

use Test::More;
chop $ref;
is ($result, $ref);
done_testing;
