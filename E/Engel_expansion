#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Engel_expansion
#c# 2022-09-17 >RC
#p# OK
#n# works quickly for most, slows down for highest-precision; π and sqrt(2) both have >200 terms, are omitted from daily testing:
#n#     447.62s user 2.39s system 99% cpu 7:30.88 total
#n# the version on RC uses 'abbr' to condense output from high-precision values

my @res;

use v5.36;
use bigrat;
use experimental <builtin for_list>;

use List::Util <sum min product>;

sub ceiling ($n) { $n == int $n ? $n : int $n + 1 }

sub to_engel ($rat) { 
    my @E;
    while ($rat) { 
        push @E, ceiling 1/$rat; 
        $rat = $rat*$E[-1] - 1; 
    } 
    @E
}

#sub product (@a) { my $p=1; for (@a) { $p *= $_ }; $p }  # also works

sub from_engel (@expanded) { 
    my @a;
    sum( map { push @a, $_; 1/product(@a) } @expanded )
}

for my($rat,$p) (
    #  low precision 𝜋, 𝑒, √2 and 1.5 to powers
    3.14159265358979, 15,
    2.71828182845904, 15,
    1.414213562373095, 16,
    1.5**5, 6,
    1.5**8, 10,

    # high precision 𝜋, 𝑒, and √2
    #3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211, 176,
    2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642743, 102,
    #1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927558, 179,
    ) {
    push @res, "Rational number: " . $rat->as_float($p);
    my $terms = join ' ', my @expanded = to_engel $rat;
    push @res, "Engel expansion: " . (length($terms) > 100 ? $terms =~ s/^(.{90}\S*).*$/$1/r . '... (' . +@expanded . ' terms)' : $terms);
    push @res, " Converted back: " . from_engel(@expanded)->as_float($p);
    push @res, '';
}

say my $result = join "\n", @res;

my $ref = <<'END';
Rational number: 3.14159265358979
Engel expansion: 1 1 1 8 8 17 19 300 1991 2768 4442 4830 10560 37132 107315 244141 651042 1953125
 Converted back: 3.14159265358979

Rational number: 2.71828182845904
Engel expansion: 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 82 144 321 2289 9041 21083 474060 887785 976563 1953125
 Converted back: 2.71828182845904

Rational number: 1.414213562373095
Engel expansion: 1 3 5 5 16 18 78 102 120 144 260 968 18531 46065 63005 65105 78125
 Converted back: 1.414213562373095

Rational number: 7.59375
Engel expansion: 1 1 1 1 1 1 1 2 6 8
 Converted back: 7.59375

Rational number: 25.62890625
Engel expansion: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 4 32
 Converted back: 25.62890625

Rational number: 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642743
Engel expansion: 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33... (150 terms)
 Converted back: 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642743
END

use Test::More;
is($result, $ref);
done_testing;
