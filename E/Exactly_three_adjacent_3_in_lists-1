#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Exactly_three_adjacent_3_in_lists
#c# 2021-12-07 <>RC, 2021-12-08 >RC
#p# OK
#n# Tybalt89's initial version upgraded almost to parity with Raku (see also *-2 for fully general one)
#n# oops, fixed bug: $i-1 == grep ...

my @res;

use strict;
use warnings;
use feature 'say';

#use List::Util 'all'; # adds clarity, but not required

my @lists = (
  [ <9 3 3 3 2 1 7 8 5> ],
  [ <5 2 9 3 3 7 8 4 1> ], 
  [ <1 4 3 6 7 3 8 3 2> ], 
  [ <1 2 3 4 5 6 7 8 9> ], 
  [ <4 6 8 7 2 3 3 3 1> ], 
  [ <4 6 8 7 2 0 0 3 3> ], 
  [ <0 3 0 3 3 0 0 0 0> ], 
);

my $i = 3;

for my $ref ( @lists ) {
    my @n = grep $ref->[$_] == $i, 0 .. $#$ref;
    push @res, "@$ref => " . (@n == $i && ($i-1 == grep $n[$_-1]+1 == $n[$_], 1..$i-1) ? 'true' : 'false');
    #push @res, "@$ref => " . (@n == $i && (all { $n[$_-1]+1 == $n[$_] } 1..$i-1) ? 'true' : 'false');
}

say my $result = join "\n", @res;

my $ref = <<'EOD';
9 3 3 3 2 1 7 8 5 => true
5 2 9 3 3 7 8 4 1 => false
1 4 3 6 7 3 8 3 2 => false
1 2 3 4 5 6 7 8 9 => false
4 6 8 7 2 3 3 3 1 => true
4 6 8 7 2 0 0 3 3 => false
0 3 0 3 3 0 0 0 0 => false
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
