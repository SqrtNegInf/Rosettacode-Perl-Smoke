#!/usr/local/bin/perl
#u# https://www.rosettacode.org/wiki/Euclidean_rhythm
#c# 2024-02-06 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

sub E {
    my ($k, $n) = @_;
    my @s = map { $_ < $k ? [1] : [0] } (0..$n-1);

    my $d = $n - $k;
    $n = $k > $d ? $k : $d;
    $k = $k < $d ? $k : $d;
    my $z = $d;

    while ($z > 0 || $k > 1) {
        foreach my $i (0..$k-1) {
            push(@{$s[$i]}, @{$s[-1 - $i]});
        }
        splice(@s, -$k);
        $z -= $k;
        $d = $n - $k;
        $n = $k > $d ? $k : $d;
        $k = $k < $d ? $k : $d;
    }

    return map { @$_ } @s;
}

say my $result = join '', E(5, 13);

use Test::More;
is ($result, '1001010010100');
done_testing();
