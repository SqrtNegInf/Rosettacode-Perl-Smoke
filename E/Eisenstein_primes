#!/usr/local/bin/perl
#u# https://rosettacode.org/wiki/Eisenstein_primes
#c# 2023-06-20 >RC
#p# OK

my @res;

use v5.36;

use Math::AnyNum <pi mod max complex reals is_prime>;

my $omega = exp ( complex(0,2) * pi/3 );

sub     X ($a, $b) { my @p; for my $x ($a..$b) { for my $y ($a..$b) { push @p, [$x, $y] } } @p }
sub table ($c, @V) { my $t = $c * (my $w = 1 + max map { length } @V); ( sprintf( ('%'.$w.'s')x@V, @V) ) =~ s/.{1,$t}\K/\n/gr }

sub norm    (@p) { $p[0]**2 - $p[0]*$p[1] + $p[1]**2 } 
sub display (@p) { sprintf '%+8.4f%+8.4fi', reals($p[0] + $omega*$p[1]) }

my @E;
for (X -10, 10) {
    my($a,$b) = @$_;
    my $c = max abs($a), abs($b);
    push @E, [@$_] if ((0==$a or 0==$b or $a==$b) and is_prime $c and 2 == mod $c,3) or is_prime norm @$_
}
my $result = table 4, (map { display @$_ } sort { norm(@$a) <=> norm(@$b) } @E)[0..99];

my $ref = <<'END';
  -1.5000 -0.8660i  -0.0000 -1.7321i  -1.5000 +0.8660i  +1.5000 -0.8660i
  +0.0000 +1.7321i  +1.5000 +0.8660i  -1.0000 -1.7321i  -2.0000 +0.0000i
  +1.0000 -1.7321i  -1.0000 +1.7321i  +2.0000 +0.0000i  +1.0000 +1.7321i
  -2.0000 -1.7321i  -2.5000 -0.8660i  -0.5000 -2.5981i  -2.5000 +0.8660i
  +0.5000 -2.5981i  -2.0000 +1.7321i  +2.0000 -1.7321i  -0.5000 +2.5981i
  +2.5000 -0.8660i  +0.5000 +2.5981i  +2.5000 +0.8660i  +2.0000 +1.7321i
  -2.5000 -2.5981i  -3.5000 -0.8660i  -1.0000 -3.4641i  -3.5000 +0.8660i
  +1.0000 -3.4641i  -2.5000 +2.5981i  +2.5000 -2.5981i  -1.0000 +3.4641i
  +3.5000 -0.8660i  +1.0000 +3.4641i  +3.5000 +0.8660i  +2.5000 +2.5981i
  -3.5000 -2.5981i  -4.0000 -1.7321i  -0.5000 -4.3301i  -4.0000 +1.7321i
  +0.5000 -4.3301i  -3.5000 +2.5981i  +3.5000 -2.5981i  -0.5000 +4.3301i
  +4.0000 -1.7321i  +0.5000 +4.3301i  +4.0000 +1.7321i  +3.5000 +2.5981i
  -2.5000 -4.3301i  -5.0000 +0.0000i  +2.5000 -4.3301i  -2.5000 +4.3301i
  +5.0000 +0.0000i  +2.5000 +4.3301i  -3.5000 -4.3301i  -5.5000 -0.8660i
  -2.0000 -5.1962i  -5.5000 +0.8660i  +2.0000 -5.1962i  -3.5000 +4.3301i
  +3.5000 -4.3301i  -2.0000 +5.1962i  +5.5000 -0.8660i  +2.0000 +5.1962i
  +5.5000 +0.8660i  +3.5000 +4.3301i  -5.0000 -3.4641i  -5.5000 -2.5981i
  -0.5000 -6.0622i  -5.5000 +2.5981i  +0.5000 -6.0622i  -5.0000 +3.4641i
  +5.0000 -3.4641i  -0.5000 +6.0622i  +5.5000 -2.5981i  +0.5000 +6.0622i
  +5.5000 +2.5981i  +5.0000 +3.4641i  -4.0000 -5.1962i  -6.5000 -0.8660i
  -2.5000 -6.0622i  -6.5000 +0.8660i  +2.5000 -6.0622i  -4.0000 +5.1962i
  +4.0000 -5.1962i  -2.5000 +6.0622i  +6.5000 -0.8660i  +2.5000 +6.0622i
  +6.5000 +0.8660i  +4.0000 +5.1962i  -6.5000 -4.3301i  -7.0000 -3.4641i
  -0.5000 -7.7942i  -7.0000 +3.4641i  +0.5000 -7.7942i  -6.5000 +4.3301i
  +6.5000 -4.3301i  -0.5000 +7.7942i  +7.0000 -3.4641i  +0.5000 +7.7942i
END

use Test::More;
is($result, $ref);
done_testing();

__END__

No great way to unambiguously get the 'first 100 nearest to 0' because the norm value of 61 
straddles that cutoff (by two terms), so you end up selecting 10 of the 12 points.

     91   61 |   4   9 |  -0.5000 +7.7942i
     92   61 |   4  -5 |  +6.5000 -4.3301i
     93   61 |   5   9 |  +0.5000 +7.7942i
     94   61 |   5  -4 |  +7.0000 -3.4641i
     95   61 |   9   4 |  +7.0000 +3.4641i
     96   61 |   9   5 |  +6.5000 +4.3301i
     97   61 |  -4   5 |  -6.5000 +4.3301i
     98   61 |  -4  -9 |  +0.5000 -7.7942i
     99   61 |  -5   4 |  -7.0000 +3.4641i
    100   61 |  -5  -9 |  -0.5000 -7.7942i
*   101   61 |  -9  -4 |  -7.0000 -3.4641i
*   102   61 |  -9  -5 |  -6.5000 -4.3301i
    103   67 |   2   9 |  -2.5000 +7.7942i
