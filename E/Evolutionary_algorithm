#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Evolutionary_algorithm
#c# 2018-08-01 <RC
#p# OK

srand 123456;

use feature 'say';
my $result;


# This implementation usually converges in less than 70 iterations.

use List::Util 'reduce';
use List::MoreUtils 'false';
 
### Generally useful declarations
 
sub randElm
 {$_[int rand @_]}
 
sub minBy (&@)
 {my $f = shift;
  reduce {$f->($b) < $f->($a) ? $b : $a} @_;}
 
sub zip
 {@_ or return ();
  for (my ($n, @a) = 0 ;; ++$n)
    {my @row;
     foreach (@_)
        {$n < @$_ or return @a;
         push @row, $_->[$n];}
     push @a, \@row;}}
 
### Task-specific declarations
 
my $C = 100;
my $mutation_rate = .05;
my @target = split '', 'METHINKS IT IS LIKE A WEASEL';
my @valid_chars = (' ', 'A' .. 'Z');
 
sub fitness
 {false {$_->[0] eq $_->[1]} zip shift, \@target;}
 
sub mutate
 {my $rate = shift;
  return [map {rand() < $rate ? randElm @valid_chars : $_} @{shift()}];}
 
### Main loop
 
my $parent = [map {randElm @valid_chars} @target];
 
while (fitness $parent)
   {$parent =
       minBy \&fitness,
       map {mutate $mutation_rate, $parent}
       1 .. $C;
    $result .= join('', @$parent) . "\n";}

say $result; 

my $ref = <<'EOD';
YRQEAGEZNRGJJ AHQVQYZMYYAUZO
YHQEAGEZNRGJJ AKQDQYZMYLAUZL
YGUEAGKZNRGJJ AKQDAYZMYLAUZL
YGUEAGKZNRGJJ AKQDEYZMYQAUZL
YGUEAGKZNRGJJ AKQEEYZMYQAUZL
YGUEAGKZNEGIJ  KQEEYZTYQAUZL
YGGEANKZNEGIJ  KQEELZTYQAUZL
YGTEANKZNEGSJ  KQEELZTYQAUZL
YGTEANKZNEGSJ  KQKELZTYQAUZL
YGTEANKTNEGSJ  KQKELZTYQASZL
YGTEANKTNEGSJ  KQKELZTIQASZL
MGTEANKTNEGSJ  KQKELZTIQASZL
MGTEANKTNEGSJ  AQKELZTIEASZL
MGTEANKTNETSJ  AQKELZTJEASZL
MGTEINKLNETSJ  AQKELZTJEASZL
MGTEINKLNET JB AQKELZTJEASZL
MGTEINKLNET JB LVKELZTJEASZL
MPTEINKLNIT JB LVKELZTJEASZL
MPTOINKLNIT JB LVKELZTWEASZL
MPTOINKL IT JB LVKELZTWEASZL
MPTHINKL IT JB LVKELZTWEASZL
MPTHINKL IT JB LVKELZTWEASZL
MPTHINKL IT JB LVKELZTWEASZL
MPTHINKL IT II LVKELZTWEASZL
MPTHINKL IT II LVKELZTWEASZL
MPTHINKL IT II LVKELZTWEASZL
MPTHINKL IT II LVKELGTWEASZL
MPTHINKL IT IY LVKELX WEASZL
MPTHINKL IT ID LVKELX WEASZL
MPTHINKL IT ID LVKELX WEASZL
METHINKL IT ID LVKELX WEASZL
METHINKL IT ID LVKELX WEASZL
METHINKL IT ID LVKELX WEASZL
METHINKL IT ID LVKELX WEASZL
METHINKL IT ID LVKELJ WEASZL
METHINKL IT ID LVKELJ WEASZL
METHINKL IT ID LVKELA WEASZL
METHINKL IT ID LVKELA WEASZL
METHINKL IT ID LVKELA WEASZL
METHINKL IT ID LVKELA WEASZL
METHINKL IT IS LVKELA WEASZL
METHINKL IT IS LVKELA WEASZL
METHINKL IT IS LVKELA WEASZL
METHINKL IT IS LVKELA WEASZL
METHINKL IT IS LVKELA WEASZL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKELA WEASEL
METHINKL IT IS LVKE A WEASEL
METHINKL IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKD IT IS LDKE A WEASEL
METHINKS IT IS LDKE A WEASEL
METHINKS IT IS LDKE A WEASEL
METHINKS IT IS LDKE A WEASEL
METHINKS IT IS LDKE A WEASEL
METHINKS IT IS LIKE A WEASEL
EOD

use Test::More;
is ($result, $ref);
done_testing();
