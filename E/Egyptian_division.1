#!/usr/local/bin/perl
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Egyptian_division
#c# 2018-11-19 >RC
#p# OK

use strict;
use warnings;
use feature 'say';
my @res;

sub egyptian_divmod {
    my($dividend, $divisor) = @_;
    my(%multiples,%table);

    $multiples{2**$_} = 2**$_ * $divisor for 0..1+$divisor/2;

    for my $k (sort {$a <=> $b} keys %multiples) {
        last if $multiples{$k} > $dividend;
        $table{$k} = $multiples{$k};
    } 

    my $accumulator = 0;
    for my $k (sort {$b <=> $a} keys %table) {
        next unless $dividend >= $table{$k};
        $accumulator += $k;
        $dividend    -= $table{$k}; 
    }
    $accumulator, $dividend;
}

for ([580,34], [578,34], [7532795332300578,235117]) {
    my($n,$d) = @$_;
    push @res, sprintf "Egyption divmod %s %% %s = %s remainder %s", $n, $d, egyptian_divmod( $n, $d )
}

say my $result = join "\n", @res;

my $ref = <<'EOD';
Egyption divmod 580 % 34 = 17 remainder 2
Egyption divmod 578 % 34 = 17 remainder 0
Egyption divmod 7532795332300578 % 235117 = 32038497141 remainder 81
EOD

use Test::More;
chop $ref;
is($result, $ref);
done_testing;
