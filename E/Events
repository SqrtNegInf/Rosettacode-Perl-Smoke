#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Events
#c# 2018-08-01 <RC
#p# OK

my $result;

use strict;
use warnings;
use feature 'say';

# This is an example of using the AnyEvent module.
# The result is this: it prints "Hello world!" after one second, then after another second 
# prints "Hi!" four times every quarter of a second and then immediately prints "Bye!" and quits:

use AnyEvent;
 
# a new condition with a callback:
my $quit = AnyEvent->condvar(
    cb => sub {
        $result .= "Bye!\n";
    }
);
 
# a new timer, starts after 2s and repeats every 0.25s:
my $counter = 1;
my $hi = AnyEvent->timer(
    after => 2,
    interval => 0.25,
    cb => sub {
        $result .= "Hi!\n";
        # flag the condition as ready after 4 times:
        $quit->send if ++$counter > 4;
    }
);
 
# another timer, runs the callback once after 1s:
my $hello = AnyEvent->timer(
    after => 1,
    cb => sub {
        $result .= "Hello world!\n";
    }
);
 
# wait for the $quit condition to be ready:
$quit->recv();

# This is the same using AnyEvent simplified API:

use AnyEvent;
 
my $quit1 = AE::cv sub { $result .= "Bye!\n" };
 
my $counter1 = 1;
my $hi1 = AE::timer 2, 0.25, sub {
    $result .= "Hi!\n";
    $quit1->send if ++$counter1 > 4;
};
 
my $hello1 = AE::timer 1, 0, sub {
    $result .= "Hello world!\n";
};
 
$quit1->recv;

say $result; 

my $ref = <<'EOD';
Hello world!
Hi!
Hi!
Hi!
Hi!
Bye!
Hi!
Hi!
Hi!
Hi!
Hello world!
Hi!
Hi!
Hi!
Hi!
Hi!
Hi!
Hi!
Hi!
Hi!
Hi!
Hi!
Bye!
EOD

use Test::More;
is ($result, $ref);
done_testing();
