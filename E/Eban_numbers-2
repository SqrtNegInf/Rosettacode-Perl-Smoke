#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Eban_numbers
#c# 2019-03-27 <RC, 2019-03-30 <RC
#p# OK

use strict;
use warnings;
use bigint;
use feature 'say';
use Lingua::EN::Nums2Words 'num2word';
use List::AllUtils 'sum';

 my @res;

sub comma { reverse ((reverse shift) =~ s/(.{3})/$1,/gr) =~ s/^,//r }

sub nban {
    my ($n, @numbers) = @_;
    grep { lc(num2word($_)) !~ /[$n]/i } @numbers;
}

sub enumerate {
    my ($n, $upto) = @_;
    my @ban = nban($n, 1 .. 99);
    my @orders;
    for my $o (2 .. $upto) {
        push @orders, [nban($n, map { $_ * 10**$o } 1 .. 9)];
    }
    for my $oom (@orders) {
        next unless +@$oom;
        my @these;
        for my $num (@$oom) {
            push @these, $num, map { $_ + $num } @ban;
        }
       push @ban, @these;
    }
    unshift @ban, 0 if nban($n, 0);
    @ban
}

sub count {
    my ($n, $upto) = @_;
    my @orders;
    for my $o (2 .. $upto) {
        push @orders, [nban($n, map { $_ * 10**$o } 1 .. 9)];
    }
    my @count = scalar nban($n, 1 .. 99);
    for my $o ( 0 .. $#orders - 1 ) {
        push @count, sum(@count) * (scalar @{$orders[$o]}) + (scalar @{$orders[$o]});
    }
    ++$count[0] if nban($n, 0);
    for my $m ( 0 .. $#count - 1 ) {
        next unless scalar $orders[$m];
        if (nban($n, 10**($m+2))) { $count[$m]++; $count[$m + 1]-- }
    }
    map { sum( @count[0..$_] ) } 0..$#count;
}

for my $t ('e') {
    my @bans  = enumerate($t, 4);
    my @count = count($t, my $max = 21);

    my @j = grep { $_ <= 10 } @bans;
    unshift @count, @{[1+$#j]};

    push @res, "\n============= $t-ban: =============";
    my @a = grep { $_ <= 1000 } @bans;
    push @res, "$t-ban numbers up to 1000: @{[1+$#a]}";
    push @res, '['. join(' ',@a). ']';
    push @res, '';

    my @b = grep { $_ >= 1000 && $_ <= 4000 } @bans;
    push @res, "$t-ban numbers between 1,000 & 4,000 (inclusive): @{[1+$#b]}";
    push @res, '['. join(' ',@b). ']';
    push @res, '';

    push @res, "Counts of $t-ban numbers up to ". lc(num2word(10**$max));

    for my $exp (1..$max) {
        my $nu = $count[$exp-1];
        push @res, sprintf "Up to and including %23s: %s", lc(num2word(10**$exp)), comma($nu);
    }
}

say my $result = join "\n", @res;

my $ref = <<'EOD';

============= e-ban: =============
e-ban numbers up to 1000: 19
[2 4 6 30 32 34 36 40 42 44 46 50 52 54 56 60 62 64 66]

e-ban numbers between 1,000 & 4,000 (inclusive): 21
[2000 2002 2004 2006 2030 2032 2034 2036 2040 2042 2044 2046 2050 2052 2054 2056 2060 2062 2064 2066 4000]

Counts of e-ban numbers up to one sextillion
Up to and including                     ten: 3
Up to and including             one hundred: 19
Up to and including            one thousand: 19
Up to and including            ten thousand: 79
Up to and including    one hundred thousand: 399
Up to and including             one million: 399
Up to and including             ten million: 1,599
Up to and including     one hundred million: 7,999
Up to and including             one billion: 7,999
Up to and including             ten billion: 31,999
Up to and including     one hundred billion: 159,999
Up to and including            one trillion: 159,999
Up to and including            ten trillion: 639,999
Up to and including    one hundred trillion: 3,199,999
Up to and including         one quadrillion: 3,199,999
Up to and including         ten quadrillion: 12,799,999
Up to and including one hundred quadrillion: 63,999,999
Up to and including         one quintillion: 63,999,999
Up to and including         ten quintillion: 255,999,999
Up to and including one hundred quintillion: 1,279,999,999
Up to and including          one sextillion: 1,279,999,999
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
