#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Zeckendorf_number_representation
#c# 2018-07-11 <RC
#p# OK

use feature 'say';
my $result;

my @fib;
 
sub fib {
  my $n = shift;
  return 1 if $n < 2;
  return $fib[$n] //= fib($n-1)+fib($n-2);
}
 
sub zeckendorf {
  my $n = shift;
  return "0" unless $n;
  my $i = 1;
  $i++ while fib($i) <= $n;
  my $z = '';
  while( --$i ) {
    $z .= "0", next if fib( $i ) > $n;
    $z .= "1";
    $n -= fib( $i );
  }
  return $z;
}
 
$result .=  sprintf "%4d: %8s\n", $_, zeckendorf($_) for 0..20;
say $result;

my $ref = <<EOD;
   0:        0
   1:        1
   2:       10
   3:      100
   4:      101
   5:     1000
   6:     1001
   7:     1010
   8:    10000
   9:    10001
  10:    10010
  11:    10100
  12:    10101
  13:   100000
  14:   100001
  15:   100010
  16:   100100
  17:   100101
  18:   101000
  19:   101001
  20:   101010
EOD

use Test::More;
is ($result, $ref);
done_testing();
