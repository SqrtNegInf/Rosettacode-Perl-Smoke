#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Combinations_and_permutations
#c# 2018-07-23 <RC
#p# OK

use feature 'say';
my $result;


# Although perl can handle arbitrarily large numbers using Math::BigInt and Math::BigFloat, it's
# native integers and floats are limited to what the computer's native types can handle.
# As with the perl6 code, some special handling was done for those values which would have overflowed the native floating point type.

use strict;
use warnings;
 
showoff( "Permutations", \&P, "P", 1 .. 12 );
showoff( "Combinations", \&C, "C", map $_*10, 1..6 );
showoff( "Permutations", \&P_big, "P", 5, 50, 500, 1000, 5000, 15000 );
showoff( "Combinations", \&C_big, "C", map $_*100, 1..10 );
 
sub showoff {
	my ($text, $code, $fname, @n) = @_;
	$result .= "\nA sample of $text from $n[0] to $n[-1]\n";
	for my $n ( @n ) {
		my $k = int( $n / 3 );
		$result .= $n . " $fname $k = ". $code->($n, $k). "\n";
	}
}
 
sub P {
	my ($n, $k) = @_;
	my $x = 1;
	$x *= $_ for $n - $k + 1 .. $n ;
	$x;
}
 
sub P_big {
	my ($n, $k) = @_;
	my $x = 0;
	$x += log($_) for $n - $k + 1 .. $n ;
	$x;
	#eshow($x); # DH change
}
 
sub C {
	my ($n, $k) = @_;
	my $x = 1;
	$x *= ($n - $_ + 1) / $_ for 1 .. $k;
	$x;
}
 
sub C_big {
	my ($n, $k) = @_;
	my $x = 0;
	$x += log($n - $_ + 1) - log($_) for 1 .. $k;
	exp($x);
}
 
sub eshow {
	my ($x) = @_;
	my $e = int( $x / log(10) );
	$result .= sprintf "%.8Fe%+d\n", exp($x - $e * log(10)), $e;
}
 
# Since the output is almost the same as perl6's, and this is only a Draft RosettaCode task, I'm not going to bother including the output of the program.



say $result; 


my $ref = <<'EOD';

A sample of Permutations from 1 to 12
1 P 0 = 1
2 P 0 = 1
3 P 1 = 3
4 P 1 = 4
5 P 1 = 5
6 P 2 = 30
7 P 2 = 42
8 P 2 = 56
9 P 3 = 504
10 P 3 = 720
11 P 3 = 990
12 P 4 = 11880

A sample of Combinations from 10 to 60
10 C 3 = 120
20 C 6 = 38760
30 C 10 = 30045015
40 C 13 = 12033222880
50 C 16 = 4923689695575
60 C 20 = 4.1918445058055e+15

A sample of Permutations from 5 to 15000
5 P 1 = 1.6094379124341
50 P 16 = 59.8969394095753
500 P 166 = 1000.58460827532
1000 P 333 = 2237.59675936876
5000 P 1666 = 13875.0004182389
15000 P 5000 = 47133.8812112797

A sample of Combinations from 100 to 1000
100 C 33 = 2.94692427022544e+26
200 C 66 = 7.26975254516929e+53
300 C 100 = 4.15825146325788e+81
400 C 133 = 1.25794868418216e+109
500 C 166 = 3.92602838619369e+136
600 C 200 = 2.50601778322159e+164
700 C 233 = 8.10320356333741e+191
800 C 266 = 2.64562336268385e+219
900 C 300 = 1.74335637329697e+247
1000 C 333 = 5.77613455314442e+274
EOD

use Test::More;
is ($result, $ref);
done_testing();
