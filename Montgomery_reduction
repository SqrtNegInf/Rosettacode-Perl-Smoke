#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Montgomery_reduction
#c# 2018-10-08 >RC
#p# OK

use feature 'say';

use bigint;
use ntheory qw(powmod);

sub msb {
  my ($n, $base) = (shift, 0);
  $base++ while $n >>= 1;
  $base;
}

sub montgomery_reduce {
    my($m, $a) = @_;
    for (0 .. msb($m)) {
        $a += $m if $a & 1;
        $a >>= 1
    }
    $a % $m
}
 
my $m  = 750791094644726559640638407699;
my $t1 = 323165824550862327179367294465482435542970161392400401329100;
 
my $r1 = 440160025148131680164261562101;
my $r2 = 435362628198191204145287283255;
 
my $x1 = 540019781128412936473322405310;
my $x2 = 515692107665463680305819378593;

my @res;

push @res, "Original x1:       ". $x1;
push @res, "Recovered from r1: ". montgomery_reduce($m, $r1);
push @res, "Original x2:       ". $x2;
push @res, "Recovered from r2: ". montgomery_reduce($m, $r2);
 
push @res, "\nMontgomery  computation x1**x2 mod m: ";
my $prod = montgomery_reduce($m, $t1/$x1);
my $base = montgomery_reduce($m, $t1);
 
for (my $exponent = $x2; $exponent >= 0; $exponent >>= 1) {
    $prod = montgomery_reduce($m, $prod * $base) if $exponent & 1;
    $base = montgomery_reduce($m, $base * $base);
    last if $exponent == 0;
}
 
push @res, montgomery_reduce($m, $prod);
push @res, "Built-in op computation x1**x2 mod m: ". powmod($x1, $x2, $m);

say $result = join "\n", @res;

my $ref = <<'EOD';
Original x1:       540019781128412936473322405310
Recovered from r1: 540019781128412936473322405310
Original x2:       515692107665463680305819378593
Recovered from r2: 515692107665463680305819378593

Montgomery  computation x1**x2 mod m: 
151232511393500655853002423778
Built-in op computation x1**x2 mod m: 151232511393500655853002423778
EOD

use Test::More;
chop $ref;
is($result, $ref);
done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre>Original x1:       540019781128412936473322405310
Recovered from r1: 540019781128412936473322405310
Original x2:       515692107665463680305819378593
Recovered from r2: 515692107665463680305819378593

Montgomery  computation x1**x2 mod m: 
151232511393500655853002423778
Built-in op computation x1**x2 mod m: 151232511393500655853002423778</pre>
