#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Distributed_programming
#c# 2018-07-28 <RC
#p# OK
#i# RC cli: wait
#n# tweaked to self-test: call with an argument, but then run a copy (with slight delay) without no arg.

use strict;
use warnings;
use feature 'say';
my $result;

# Using Data::Dumper and Safe to transmit arbitrary data structures as serialized text between hosts. Same code works as both sender and receiver.

use Data::Dumper;
use IO::Socket::INET;
use Safe;
 
sub get_data {
	my $sock = new IO::Socket::INET
		LocalHost =>	"localhost",
		LocalPort =>	"10000",
		Proto =>	"tcp",
		Listen =>	1,
		Reuse =>	1;
	unless ($sock) { die "Socket creation failure" }
	my $cli = $sock->accept();
 
	# of course someone may be tempted to send you 'system("rm -rf /")',
	# to be safe(r), use Safe::
	my $safe = new Safe;
	my $x = $safe->reval(join("", <$cli>));
	close $cli;
	close $sock;
	return $x;
}
 
sub send_data {
	my $host = shift;
	my $data = shift;
	my $sock = new IO::Socket::INET
		PeerAddr =>	"$host:10000",
		Proto =>	"tcp",
		Reuse =>	1;
 
	unless ($sock) { die "Socket creation failure" }
 
	print $sock Data::Dumper->Dump([$data]);
	close $sock;
}
 
if (@ARGV) {
    system("$0 &"); # DH trick of self-test
	my $x = get_data();
	$result = "Got data\n" . Data::Dumper->Dump([$x]);
} else {
    sleep 1;
	send_data('localhost', { b=>[1 .. 10] });
	#send_data('localhost', { a=>100, b=>[1 .. 10] }); # hash elements might print as a/b or b/a
    exit;
}

say $result; 

my $ref = <<'EOD';
Got data
$VAR1 = {
          'b' => [
                   1,
                   2,
                   3,
                   4,
                   5,
                   6,
                   7,
                   8,
                   9,
                   10
                 ]
        };

EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
