#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Dominoes
#c# 2021-11-17 <RC, 2022-12-05 NOT ON RC
#p# OK
#n# works with v5.036, eliminate reliance on global, no 'eval', any size grid, added extra credit
#n# should update RC with this version?

my $result;

use v5.036;

my($rows,$cols) = (7, 8);

my $grid1 = <<END;
0 5 1 3 2 2 3 1
               
0 5 5 0 5 2 4 6
               
4 3 0 3 6 6 2 0
               
0 6 2 3 5 1 2 6
               
1 1 3 0 0 2 4 5
               
2 1 4 3 3 4 6 6
               
6 4 5 1 5 4 1 4
END

my $grid2 = <<END;
0 0 0 1 1 1 0 2
               
1 2 2 2 0 3 1 3
               
2 3 3 3 0 4 1 4
               
2 4 3 4 4 4 0 5
               
1 5 2 5 3 5 4 5
               
5 5 0 6 1 6 2 6
               
3 6 4 6 5 6 6 6
END

sub find ($x, $y, $try, $orig) {
    state $solution;
    my $sum = $rows + $cols;
    my $gap = qr/(.{$sum}) (.{$sum})/s;
   #my $gap = qr/(.{@{[$rows+$cols]}}) (.{@{[$rows+$cols]}})/s;  # heinous!

    if( $x > $y ) {
        $x = 0;
        $solution = $orig |. $try and return if ++$y == $rows;  # solved!
    }

    while ( $try =~ /(?=(?|$x $gap $y|$y $gap $x))/gx ) {       # vertical
        my $new = $try;
        substr $new, $-[0], 2*($rows+$cols)+3, " $1+$2 ";
        find( $x + 1, $y, $new, $orig );
    }

    while ( $try =~ /(?=$x $y|$y $x)/g ) {                      # horizontal
        my $new = $try;
        substr $new, $-[0], 3, ' + ';
        find( $x + 1, $y, $new, $orig );
    }

    $solution
}

$result  = find( 0, 0, $grid1, $grid1 );
$result .= "\n=======\n\n";
$result .= find( 0, 0, $grid2, $grid2 );
say $result;

sub comma { reverse ((reverse shift) =~ s/(.{3})/$1,/gr) =~ s/^,//r }

use constant PI  => 2*atan2(1,0);
use ntheory 'factorial';

my ($m,$n)  = (7,8);
my $arrangements = 1;
for my $j (1 .. $m/2) {
  for my $k (1 .. $n/2) {
    $arrangements *= 4*cos(PI*$j/($m+1))**2 + 4*cos(PI*$k/($n+1))**2
  }
}

$result .= "\n=======\n\n";
$result  .= sprintf "%32s:%60s\n", 'Arrangements ignoring values',     comma    $arrangements;
$result  .= sprintf "%32s:%60s\n", 'Permutations of 28 dominos',       comma my $permutations = factorial 28;
$result  .= sprintf "%32s:%60s\n", 'Flip configurations',              comma my $flips = 2**28;
$result  .= sprintf "%32s:%60s\n", 'Permuted arrangements with flips', comma    $flips * $permutations * $arrangements;

my $ref = <<'EOD';
0+5 1+3 2 2+3 1
        +     +
0 5+5 0 5 2+4 6
+     +        
4 3 0 3 6+6 2 0
  + +       + +
0 6 2 3+5 1 2 6
+         +    
1 1 3 0+0 2 4 5
  + +       + +
2 1 4 3+3 4 6 6
+         +    
6 4+5 1+5 4 1+4

=======

0 0+0 1 1+1 0+2
+     +        
1 2+2 2 0+3 1+3
               
2+3 3+3 0+4 1+4
               
2+4 3+4 4+4 0+5
               
1+5 2+5 3+5 4+5
               
5+5 0+6 1+6 2+6
               
3+6 4+6 5+6 6+6

=======

    Arrangements ignoring values:                                                   1,292,697
      Permutations of 28 dominos:                     304,888,344,611,713,860,501,504,000,000
             Flip configurations:                                                 268,435,456
Permuted arrangements with flips: 105,797,996,085,635,281,181,632,579,889,767,907,328,000,000
EOD

use Test::More;
is ($result, $ref);
done_testing();

__END__

my($rows,$cols) = (3, 4);
my $gap = qr/(.{7}) (.{7})/s;

my $grid1 = <<END;
0 0 1 1

0 2 2 2

1 2 0 1
END

#0+0 1+1
#0 2+2 2
#1 2+0 1
