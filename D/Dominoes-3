#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Dominoes
#c# 2021-11-17 <RC, 2023-03-23 NOT ON RC
#p# OK
#n# works with v5.36, eliminate use of globals, no 'eval', any size grid, added extra credit
#n# to work with 'giant' dominoes use hex notation
#n# cute idea, and nice not to pass rows/cols as args, but a substantial speed penalty for that

my $result;

use v5.36;

# NB: not 'blank' lines, need to be full-width white-space
my $grid1 = <<'END';
0 5 1 3 2 2 3 1
               
0 5 5 0 5 2 4 6
               
4 3 0 3 6 6 2 0
               
0 6 2 3 5 1 2 6
               
1 1 3 0 0 2 4 5
               
2 1 4 3 3 4 6 6
               
6 4 5 1 5 4 1 4
END

my $grid2 = <<'END';
0 0 0 1 1 1 0 2
               
1 2 2 2 0 3 1 3
               
2 3 3 3 0 4 1 4
               
2 4 3 4 4 4 0 5
               
1 5 2 5 3 5 4 5
               
5 5 0 6 1 6 2 6
               
3 6 4 6 5 6 6 6
END

my $grid3 = <<'END';
0 0 1 1
       
0 2 2 2
       
1 2 0 1
END

sub find ($x, $y, $try, $orig) {
    state($solution);# ,$rows,$cols,$gap); # not compatible with varying grid sizes

#   unless ($gap) {
        my $cols = (length $orig =~ s/\s//gr)/(my $rows = (1+$orig=~tr/\n//)/2); # depends on exact data format
        my $gap = qr/(.{@{[$rows+$cols]}}) (.{@{[$rows+$cols]}})/s;
#   }

    if( $x > $y ) {
        $x = 0;
        $solution = $orig |. $try and return if ++$y == $rows;  # solved!
    }

    while ( $try =~ /(?=(?|$x $gap $y|$y $gap $x))/gx ) {       # vertical
        my $new = $try;
        substr $new, $-[0], 2*($rows+$cols)+3, " $1+$2 ";
        __SUB__->($x + 1, $y, $new, $orig);
    }

    while ( $try =~ /(?=$x $y|$y $x)/g ) {                      # horizontal
        my $new = $try;
        substr $new, $-[0], 3, ' + ';
        __SUB__->($x + 1, $y, $new, $orig);
    }

    $solution
}

$result .= find(0, 0, $grid1, $grid1 ) . "\n=======\n\n";
$result .= find(0, 0, $grid2, $grid2 ) . "\n=======\n\n";
$result .= find(0, 0, $grid3, $grid3 ) . "\n=======\n\n"; # use of 'state' precludes varying the grid size

use constant PI => 2*atan2(1,0);
use ntheory 'factorial';

sub comma { reverse ((reverse shift) =~ s/(.{3})/$1,/gr) =~ s/^,//r }

my($m,$n, $arrangements)  = (7,8, 1);
for my $j (1 .. $m/2) {
  for my $k (1 .. $n/2) {
    $arrangements *= 4*cos(PI*$j/($m+1))**2 + 4*cos(PI*$k/($n+1))**2
  }
}

$result .= sprintf "%32s:%60s\n", 'Arrangements ignoring values',     comma    $arrangements;
$result .= sprintf "%32s:%60s\n", 'Permutations of 28 dominos',       comma my $permutations = factorial 28;
$result .= sprintf "%32s:%60s\n", 'Flip configurations',              comma my $flips = 2**28;
$result .= sprintf "%32s:%60s\n", 'Permuted arrangements with flips', comma    $flips * $permutations * $arrangements;

say $result;

my $ref = <<'EOD';
0+5 1+3 2 2+3 1
        +     +
0 5+5 0 5 2+4 6
+     +        
4 3 0 3 6+6 2 0
  + +       + +
0 6 2 3+5 1 2 6
+         +    
1 1 3 0+0 2 4 5
  + +       + +
2 1 4 3+3 4 6 6
+         +    
6 4+5 1+5 4 1+4

=======

0 0+0 1 1+1 0+2
+     +        
1 2+2 2 0+3 1+3
               
2+3 3+3 0+4 1+4
               
2+4 3+4 4+4 0+5
               
1+5 2+5 3+5 4+5
               
5+5 0+6 1+6 2+6
               
3+6 4+6 5+6 6+6

=======

0+0 1+1
       
0+2 2+2
       
1+2 0+1

=======

    Arrangements ignoring values:                                                   1,292,697
      Permutations of 28 dominos:                     304,888,344,611,713,860,501,504,000,000
             Flip configurations:                                                 268,435,456
Permuted arrangements with flips: 105,797,996,085,635,281,181,632,579,889,767,907,328,000,000
EOD

use Test::More;
is ($result, $ref);
done_testing;
