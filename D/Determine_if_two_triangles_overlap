#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Determine_if_two_triangles_overlap
#c# 2019-02-05 <RC
#p# OK
#n# NOT on RC
#n# replace the from-Lua version?  re-work with Point/Triangle objects?

use strict;
use warnings;
use feature 'say';
my $result;

sub det2D {
    my($p1,$p2,$p3) = @_;
    return $p1->[0] * ($p2->[1] - $p3->[1])
         + $p2->[0] * ($p3->[1] - $p1->[1])
         + $p3->[0] * ($p1->[1] - $p2->[1]);
}

# triangles must be expressed anti-clockwise
sub checkTriWinding {
    my($p1,$p2,$p3,$allowReversed) = @_;
    my $detTri = det2D($p1, $$p2, $$p3);
    if ($detTri < 0.0) {
        if ($allowReversed) { ($$p3,$$p2) = ($$p2,$$p3) }
        else                { die "triangle has wrong winding direction" }
    }
    return undef;
}

sub boundaryCollideChk {
    my($p1,$p2,$p3,$eps) = @_;
    return det2D($p1, $p2, $p3) < $eps;
}

sub boundaryDoesntCollideChk {
    my($p1,$p2,$p3,$eps) = @_;
    return det2D($p1, $p2, $p3) <= $eps;
}

sub check_edge {
    my($t1,$t2,$eps,$onBoundary) = @_;
    # points on the boundary may be considered as colliding, or not 
    my $chkEdge = $onBoundary ?  \&boundaryCollideChk : \&boundaryDoesntCollideChk;

    # for edge E of triangle 1
    foreach my $i (0, 1, 2) {
        my $j = ($i + 1) % 3;

        # check all points of triangle 2 lay on the external side of edge E
        # if they do, the triangles do not collide
        if ($chkEdge->($$t1->[$i], $$t1->[$j], $$t2->[0], $eps)
        and $chkEdge->($$t1->[$i], $$t1->[$j], $$t2->[1], $eps)
        and $chkEdge->($$t1->[$i], $$t1->[$j], $$t2->[2], $eps)) {
            return 0; # false
        }
    }
    return 1;
}

sub triTri2D {
    my($t1,$t2,$eps,$allowReversed,$onBoundary) = @_;
    checkTriWinding($$t1->[0], \$$t1->[1], \$$t1->[2], $allowReversed);
    checkTriWinding($$t2->[0], \$$t2->[1], \$$t2->[2], $allowReversed);
    return check_edge($t1,$t2,$eps,$onBoundary) && check_edge($t2,$t1,$eps,$onBoundary);
}

sub formatTri {
    my $t = shift;
    my @pairs;
    push @pairs, '(' . $$_[0] . ',' . $$_[1] . ')' for @$$t;
    join ', ', @pairs;
}

sub overlap {
    my $t1            = shift or die "Missing first triangle to calculate with\n";
    my $t2            = shift or die "Missing second triangle to calculate with\n";
    my $eps           = shift || 0;
    my $allowReversed = shift || 1;
    my $onBoundary    = shift || 1;

    my $triangles = formatTri($t1) . ' and ' . formatTri($t2) . "\n";

    if (triTri2D($t1, $t2, $eps, $allowReversed, $onBoundary)) {
        return "       overlap:" . $triangles;
    } else {
        return "do not overlap:" . $triangles;
    }
}

my @tests = (
   [ [[0,0],[5,0],  [0,5]],  [  [0,0],   [5,0], [0,6]] ],
   [ [[0,0],[0,5],  [5,0]],  [  [0,0],   [0,5], [5,0]] ],
   [ [[0,0],[5,0],  [0,5]],  [[-10,0],  [-5,0],[-1,6]] ],
   [ [[0,0],[5,0],[2.5,5]],  [  [0,4],[2.5,-1], [5,4]] ],
   [ [[0,0],[1,1],  [0,2]],  [  [2,1],   [3,0], [3,2]] ],
   [ [[0,0],[1,1],  [0,2]],  [  [2,1],  [3,-2], [3,4]] ],
   [ [[0,0],[1,0],  [0,1]],  [  [1,0],   [2,0], [1,1]], 0.0, 0, 0 ]
);

for my $t (@tests) {
   $result .= overlap(\$t->[0], \$t->[1], $t->[2], $t->[3], $t->[4])
}

print $result; 

my $ref = <<'EOD';
       overlap:(0,0), (5,0), (0,5) and (0,0), (5,0), (0,6)
       overlap:(0,0), (0,5), (5,0) and (0,0), (0,5), (5,0)
do not overlap:(0,0), (5,0), (0,5) and (-10,0), (-5,0), (-1,6)
       overlap:(0,0), (5,0), (2.5,5) and (0,4), (2.5,-1), (5,4)
do not overlap:(0,0), (1,1), (0,2) and (2,1), (3,0), (3,2)
do not overlap:(0,0), (1,1), (0,2) and (2,1), (3,-2), (3,4)
       overlap:(0,0), (1,0), (0,1) and (1,0), (2,0), (1,1)
EOD

use Test::More;
is ($result, $ref);
done_testing();
