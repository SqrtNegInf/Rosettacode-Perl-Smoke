#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Deconvolution/1D
#c# 2018-11-13 >RC
#p# OK

use v5.36;

my @res;

use Math::Cartesian::Product;

sub deconvolve($g,$f) {
    #our @f; local *f = shift;
    #my (@g, @f); (*g, *f) = (shift, shift);
    my @g = @{$g};
    my @f = @{$f};
    my(@m,@d);

    my $h = 1 + @g - @f;
    push @m, [(0) x $h, $g[$_]] for 0..$#g;
    for my $j (0..$h-1) { 
        for my $k (0..$#f) { 
            $m[$j + $k][$j] = $f[$k] 
        } 
    }
    #for my $x (cartesian {@_} [0..$h-1], [0..$#f]) { $m[@$x[0] + @$x[1]][@$x[0]] = $f[@$x[1]] }
    rref(\@m);
    push @d, @{ $m[$_] }[$h] for 0..$h-1;
    @d;
}

sub convolve($f,$h) { 
    #our @f; local *f = shift; our @h; local *h = shift;
    #our @f; *f = shift;       our @h; *h = shift;
    my @f = @{$f};
    my @h = @{$h};
    my @i;
    for my $x (cartesian {@_} [0..$#f], [0..$#h]) {
        push @i, @$x[0]+@$x[1];
    }
    my $cnt = 0;
    my @g = (0) x (@f + @h - 1);
    for my $x (cartesian {@_} [@f], [@h]) {
        $g[$i[$cnt++]] += @$x[0]*@$x[1];
    }
    @g;
}

sub rref($m) {
  #our @m; local *m = shift;
  my @m = @{$m};
  @m or return;
  my ($lead, $rows, $cols) = (0, scalar(@m), scalar(@{$m[0]}));

  for my $r (0 .. $rows - 1) {
     $lead < $cols or return;
      my $i = $r;

      until ($m[$i][$lead]) {
          ++$i == $rows or next;
          $i = $r;
          ++$lead == $cols and return;
      }

      @m[$i, $r] = @m[$r, $i];
      my $lv = $m[$r][$lead];
      $_ /= $lv for @{ $m[$r] };

      my @mr = @{ $m[$r] };
      for my $i (0 .. $rows - 1) {
          $i == $r and next;
          my($lv, $n) = ($m[$i][$lead], -1);
          $_ -= $lv * $mr[++$n] for @{ $m[$i] };
      }
      ++$lead;
    }
}

my @h = <-8 -9 -3 -1 -6 7>;
my @f = <-3 -6 -1 8 -6 3 -1 -9 -9 3 -2 5 2 -2 -7 -1>;

push @res, '  conv(f,h) = g = ' . join ' ', my @g = convolve(\@f, \@h);
push @res, 'deconv(g,f) = h = ' . join ' ',       deconvolve(\@g, \@f);
push @res, 'deconv(g,h) = f = ' . join ' ',       deconvolve(\@g, \@h);

say my $result = join "\n", @res;

my $ref = <<'END';
  conv(f,h) = g = 24 75 71 -34 3 22 -45 23 245 25 52 25 -67 -96 96 31 55 36 29 -43 -7
deconv(g,f) = h = -8 -9 -3 -1 -6 7
deconv(g,h) = f = -3 -6 -1 8 -6 3 -1 -9 -9 3 -2 5 2 -2 -7 -1
END

use Test::More;
chop $ref;
is ($result, $ref);
done_testing;
