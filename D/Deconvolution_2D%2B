#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Deconvolution/2D%2B
#c# 2019-01-21 >RC
#p# BROKEN

use warnings;
use strict;

use feature 'say';
use ntheory qw/forsetproduct/;

# Deconvolution of N dimensional matrices
sub deconvolve_N {
    our @g; local *g = shift;
    our @f; local *f = shift;
    my @df = shape(@f);
    my @dg = shape(@g);
    my @hsize;
    push @hsize, ($dg[$_] - $df[$_]) + 1 for 0..$#df;

    my @toSolve = map { [row(\@g, \@f, \[$_], \@hsize)] } coords(@g);
use Data::Dumper ; say Dumper @toSolve;
exit;
    my @solved = rref( @toSolve );

    my @h;
    #for (coords(@hsize) Z @solved[*;*-1]) {
    #    my($i,$v) = @$_;
    #    $h[...$i] = $v; 
    #}
    return @h;
}

# Construct a row for each value in @g to be sent to the simultaneous equation solver
sub row {
    our @g;      local *g      = shift;
    our @f;      local *f      = shift;
    our @gcoord; local *gcoord = shift;
    our @hsize;  local *hsize  = shift;
    my @row;
    my @fdim = shape(@f);
    @gcoord = @gcoord[0..$#fdim]; # clip extraneous values
    for my $hc (coords(@hsize)) {
        my @fcoord;
        for my $i (0..-1+@$hc) {
            my $window = $gcoord[$i] - $hc[$i];
            push @fcoord, $window and next if 0 <= $window < $fdim[$i];
#say 'f'; say @row.perl;
            last; 
        }
        push @row, @fcoord == @hc ? @f.AT-POS(|@fcoord) : 0;
    }
    push @row, @g.AT-POS(|@gcoord);
#say 'g';  say @row.perl;
    return @row;
}

# Constructs an AoA of coordinates to all elements of N dimensional array
sub coords { 
    my @dimensions = shape(@_);
    my(@ranges,@coords);
    push @ranges, [0..$_-1] for @dimensions;
    forsetproduct { push @coords, "@_" } @ranges;
    @coords;
}

# transforms matrix to reduced row echelon form (takes an array reference)
sub rref {
  our @m; local *m = shift;
  @m or return;
  my ($lead, $rows, $cols) = (0, scalar(@m), scalar(@{$m[0]}));

  foreach my $r (0 .. $rows - 1) {
     $lead < $cols or return;
      my $i = $r;

      until ($m[$i][$lead])
         {++$i == $rows or next;
          $i = $r;
          ++$lead == $cols and return;}

      @m[$i, $r] = @m[$r, $i];
      my $lv = $m[$r][$lead];
      $_ /= $lv foreach @{ $m[$r] };

      my @mr = @{ $m[$r] };
      foreach my $i (0 .. $rows - 1)
         {$i == $r and next;
          ($lv, my $n) = ($m[$i][$lead], -1);
          $_ -= $lv * $mr[++$n] foreach @{ $m[$i] };}

      ++$lead;}
}

sub shape {
    my(@dim);
    push @dim, scalar @_;
    push @dim, shape(@{$_[0]}) if 'ARRAY' eq ref $_[0];
    @dim;
}

# Pretty printer for N dimensional arrays
# Assumes if first element in level is an array, then all are
sub pretty_print {
    my($i, @a) = @_;
    if ('ARRAY' eq ref $a[0]) {
        say ' 'x$i, '[';
        pretty_print($i+2, @$_) for @a;
        say ' 'x$i, ']', $i ? ',' : '';
    } else {
        say ' 'x$i, '[', sprintf("@{['%5s'x@a]}",@a), ']', $i ? ',' : '';
    }
}

my @f = (
  [
    [ -9,  5, -8 ], 
    [  3,  5,  1 ],
  ],
  [
    [ -1, -7,  2 ], 
    [ -5, -6,  6 ],
  ],
  [
    [  8,  5,  8 ], 
    [ -2, -6, -4 ],
  ]
);

my @g = (
  [
    [  54,  42,  53, -42,  85, -72 ],
    [  45,-170,  94, -36,  48,  73 ],
    [ -39,  65,-112, -16, -78, -72 ],
    [   6, -11,  -6,  62,  49,   8 ],
  ],
  [
    [ -57,  49, -23,  52,-135,  66 ],
    [ -23, 127, -58,  -5,-118,  64 ],
    [  87, -16, 121,  23, -41, -12 ],
    [ -19,  29,  35,-148, -11,  45 ],
  ],
  [
    [ -55,-147,-146, -31,  55,  60 ],
    [ -88, -45, -28,  46, -26,-144 ],
    [ -12,-107, -34, 150, 249,  66 ],
    [  11, -15, -34,  27, -78, -50 ],
  ],
  [
    [  56,  67, 108,   4,   2, -48 ],
    [  58,  67,  89,  32,  32,  -8 ],
    [ -42, -31,-103, -30, -23,  -8 ],
    [   6,   4, -26, -10,  26,  12 ],
  ]
);

#say 'Dimensions: ' . join ', ', shape(@f); pretty_print(0, @f); exit;

my @c = coords(@f);
#use Data::Dumper; say Dumper @c;

my $d = scalar shape(@g);
say "${d}D array:";
say "h =";

my @res = deconvolve_N( \@g, \@f );
exit;
#pretty_print( my @res = deconvolve_N( \@g, \@f ) );  # remove '@res' for RC

say my $result = join "\n", @res;

my $ref = <<'END';
[[[-6 -8 -5 9] [-7 9 -6 -8] [2 -7 9 8]] [[7 4 4 -6] [9 9 4 -4] [-3 7 -2 -3]]]
END

use Test::More;
#chop $ref;
#is ($result, $ref);
#done_testing();
