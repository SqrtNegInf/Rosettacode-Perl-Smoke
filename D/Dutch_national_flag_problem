#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Dutch_national_flag_problem
#c# 2018-07-28 <RC
#p# OK

srand 123456;

my $result;

use strict;
use warnings;
use feature 'say';

#use 5.010;
 
use List::Util 'shuffle';
 
my @colours = <blue white red>;
 
sub are_ordered {
    my $balls = shift;
    my $last = 0;
    for my $ball (@$balls) {
        return if $ball < $last;
        $last = $ball;
    }
    return 1;
}
 
 
sub show {
    my $balls = shift;
    $result .= join(' ', map $colours[$_], @$balls). "\n";
}
 
 
sub debug {
    return unless $ENV{DEBUG};
 
    my ($pos, $top, $bottom, $balls) = @_;
    for my $i (0 .. $#$balls) {
        my ($prefix, $suffix) = (q()) x 2;
 
        ($prefix, $suffix) = <( )> if $i == $pos;
        $prefix           .= '>'     if $i == $top;
        $suffix           .= '<'     if $i == $bottom;
 
        print STDERR " $prefix$colours[$balls->[$i]]$suffix";
    }
    print STDERR "\n";
}
 
 
my $count = shift // 10;
die "$count: Not enough balls\n" if $count < 3;
 
my $balls = [<2 1 0>];
push @$balls, int rand 3 until @$balls == $count;
do { @$balls = shuffle @$balls } while are_ordered($balls);
 
show($balls);
 
my $top    = 0;
my $bottom = $#$balls;
 
my $i = 0;
while ($i <= $bottom) {
    debug($i, $top, $bottom, $balls);
    my $col = $colours[ $balls->[$i] ];
    if ('red' eq $col and $i < $bottom) {
        @{$balls}[$bottom, $i] = @{$balls}[$i, $bottom];
        $bottom--;
    } elsif ('blue' eq $col and $i > $top) {
        @{$balls}[$top, $i] = @{$balls}[$i, $top];
        $top++;
    } else {
        $i++;
    }
}
debug($i, $top, $bottom, $balls);
 
show($balls);
are_ordered($balls) or die "Incorrect\n";
# You can run it with no parameters, it sorts 10 balls in such a case. If you provide one parameter, it is used as the number of balls. The second parameter turns on debugging that shows how the balls are being swapped.



say $result; 
my $ref = <<'EOD';
blue blue red red white blue white blue red blue
blue blue blue blue blue white white red red red
EOD

use Test::More;
is ($result, $ref);
done_testing;
