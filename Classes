#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Classes
#t# nocode
#c# 2018-07-23 <RC
#p# OK

# Works with: Perl version 5.8.6
# The implementation (there are no declarations) of a class using the standard object system:

{
     # a class is a package (i.e. a namespace) with methods in it
    package MyClass;
 
     # a constructor is a function that returns a blessed reference
    sub new {
        my $class = shift;
        bless {variable => 0}, $class;
         # the instance object is a hashref in disguise.
         # (it can be a ref to anything.)
    }
 
     # an instance method is a function that takes an object as first argument.
     # the -> invocation syntax takes care of that nicely, see Usage paragraph below.
    sub some_method {
        my $self = shift;
        $self->{variable} = 1;
    }
}

# This is the same using the Moose object system:
# 
# {
#     package MyClass;
#     use Moose;
#  
#     has 'variable' => (is => 'rw', default => 0);
#     # constructor and accessor methods are added automatically
#  
#     sub some_method {
#         my $self = shift;
#         $self->variable(1);
#     }
# }
# # This is the same class using the MooseX::Declare extention:
# 
# use MooseX::Declare;
# class MyClass {
#     has 'variable' => (is => 'rw', default => 0);
#     method some_method {
#         $self->variable(1);
#     }
# }
# 
# # All of the above classes can be used the same way:
# 
# my $instance = MyClass->new;    # invoke constructor method
#  
# $instance->some_method;    # invoke method on object instance
#  # instance deallocates when the last reference falls out of scope
