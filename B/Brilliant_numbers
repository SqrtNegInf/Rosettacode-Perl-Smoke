#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Brilliant_numbers
#c# 2022-02-28 >RC
#p# OK
#n# full run:  859.47s user 102.31s system 74% cpu 21:32.74 total

my @res;

use strict;
use warnings;
use feature 'say';

use List::AllUtils <max head firstidx uniqint>;
use ntheory <primes is_semiprime forsetproduct>;

sub table { my $t = shift() * (my $c = 1 + length max @_); ( sprintf( ('%'.$c.'d')x@_, @_) ) =~ s/.{1,$t}\K/\n/gr }
sub comma { reverse ((reverse shift) =~ s/(.{3})/$1,/gr) =~ s/^,//r }

my(@B,@Br);
for my $c (1..4) {
    my @P = grep { $c == length } @{primes(10**$c)};
    forsetproduct { is_semiprime($_[0] * $_[1]) and push @B, $_[0] * $_[1] } \@P, \@P;
    @Br = uniqint sort { $a <=> $b } @Br, @B;
}

push @res, "First 100 brilliant numbers:\n" . table 10, head 100, @Br;

for my $oom (1..6) {
    my $key = firstidx { $_ > 10**$oom } @Br;
   #my ($key) = grep { $Br[$_] > 10**$oom } 0...$#Br; # no module call, but arguably less clear
    push @res, sprintf "First >= %13s is position %9s in the series: %13s", map { comma $_ } 10**$oom, $key, $Br[$key];
}

say my $result = join "\n", @res;

my $ref = <<'END';
First 100 brilliant numbers:
    4    6    9   10   14   15   21   25   35   49
  121  143  169  187  209  221  247  253  289  299
  319  323  341  361  377  391  403  407  437  451
  473  481  493  517  527  529  533  551  559  583
  589  611  629  649  667  671  689  697  703  713
  731  737  767  779  781  793  799  803  817  841
  851  869  871  893  899  901  913  923  943  949
  961  979  989 1003 1007 1027 1037 1067 1073 1079
 1081 1121 1139 1147 1157 1159 1189 1207 1219 1241
 1247 1261 1271 1273 1333 1343 1349 1357 1363 1369

First >=            10 is position         4 in the series:            14
First >=           100 is position        10 in the series:           121
First >=         1,000 is position        73 in the series:         1,003
First >=        10,000 is position       241 in the series:        10,201
First >=       100,000 is position     2,504 in the series:       100,013
First >=     1,000,000 is position    10,537 in the series:     1,018,081
END
#First >=    10,000,000 is  124364ᵗʰ in the series:    10,000,043
#First >=   100,000,000 is  573929ᵗʰ in the series:   100,140,049
#First >= 1,000,000,000 is 7407841ˢᵗ in the series: 1,000,000,081

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
