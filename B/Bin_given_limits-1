#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Bin_given_limits
#c# 2021-02-09 >RC
#p# OK

use strict;
use warnings;
no warnings 'uninitialized';
use feature 'say';
use experimental 'signatures';

use constant Inf => 1e10;

my @res;

my @tests = (
    {
        limits => [23, 37, 43, 53, 67, 83],
        data   => [
            95,21,94,12,99,4,70,75,83,93,52,80,57, 5,53,86,65,17,92,83,71,61,54,58,47,
            16, 8, 9,32,84,7,87,46,19,30,37,96, 6,98,40,79,97,45,64,60,29,49,36,43,55
        ]
    },
    {
        limits => [14, 18, 249, 312, 389, 392, 513, 591, 634, 720],
        data => [
            445,814,519,697,700,130,255,889,481,122,932, 77,323,525,570,219,367,523,442,933,
            416,589,930,373,202,253,775, 47,731,685,293,126,133,450,545,100,741,583,763,306,
            655,267,248,477,549,238, 62,678, 98,534,622,907,406,714,184,391,913, 42,560,247,
            346,860, 56,138,546, 38,985,948, 58,213,799,319,390,634,458,945,733,507,916,123,
            345,110,720,917,313,845,426,  9,457,628,410,723,354,895,881,953,677,137,397, 97,
            854,740, 83,216,421, 94,517,479,292,963,376,981,480, 39,257,272,157,  5,316,395,
            787,942,456,242,759,898,576, 67,298,425,894,435,831,241,989,614,987,770,384,692,
            698,765,331,487,251,600,879,342,982,527,736,795,585, 40, 54,901,408,359,577,237,
            605,847,353,968,832,205,838,427,876,959,686,646,835,127,621,892,443,198,988,791,
            466, 23,707,467, 33,670,921,180,991,396,160,436,717,918,  8,374,101,684,727,749
        ]

    }
);

sub bisect_right ($x, $low, $high, @array) {
    my ($middle);
    while ($low < $high) {
        $middle = ($low + $high) / 2;
        $x < $array[$middle] ? $high = $middle : ($low = $middle + 1)
    }
    $low-1
}

sub bin_it ($lim, $data) {
    my @bins;
    ++$bins[ bisect_right($_, 0, @$lim-1, @$lim) ] for @$data;
    @bins
}

sub bin_format ($lim, @bins) {
    my @lim = @$lim;
    my(@output);
    push @output, sprintf "[%3d, %3d) => %3d\n", $lim[$_], ($lim[$_+1] == Inf ? 'Inf' : $lim[$_+1]), $bins[$_] for 0..@lim-2;
    @output
}

# on RC
#for (0..$#tests) {
#    my @lim  = (0, @{$tests[$_]{limits}}, Inf);
#    say bin_format \@lim, bin_it(\@lim,\@{$tests[$_]{data}});
#}

# how to do it without the arbitrary task constraints
for (0..$#tests) {
    my @lim  = (0, @{$tests[$_]{limits}}, Inf);
    my @bins;
    ++$bins[ bisect_right($_, 0, $#lim, @lim) ] for $tests[$_]{data}->@*;
    push @res, sprintf "[%3d, %3d) => %3d\n", $lim[$_], ($lim[$_+1] == Inf ? 'Inf' : $lim[$_+1]), $bins[$_] for 0..@lim-2;
}

say my $result = join '', @res;

my $ref = <<'END';
[  0,  23) =>  11
[ 23,  37) =>   4
[ 37,  43) =>   2
[ 43,  53) =>   6
[ 53,  67) =>   9
[ 67,  83) =>   5
[ 83, Inf) =>  13
[  0,  14) =>   3
[ 14,  18) =>   0
[ 18, 249) =>  44
[249, 312) =>  10
[312, 389) =>  16
[389, 392) =>   2
[392, 513) =>  28
[513, 591) =>  16
[591, 634) =>   6
[634, 720) =>  16
[720, Inf) =>  59
END

use Test::More;
is($result, $ref);
done_testing;
