#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Brazilian_numbers
#t# skiptest
#c# 2019-08-xx >RC
#p# OK

use strict;
use warnings;
use feature 'say';

use ntheory qw<is_prime>;

my @res;

sub is_Brazilian {
    my($n) = @_;
    return 1 if $n > 6 && 0 == $n%2;
    LOOP: for (my $base = 2; $base < $n - 1; ++$base) {
        my $digit;
        my $nn = $n;
        while (1) {
            my $x = $nn % $base;
            $digit //= $x;
            next LOOP if $digit != $x;
            $nn = int $nn / $base;
            if ($nn < $base) {
                return 1 if $digit == $nn;
                next LOOP;
            }
        }
    }
}

my $upto = 20;

push @res, "First $upto Brazilian numbers:";
my $n = 1; my $s = '';
$s .= do { last if $n > $upto; is_Brazilian($_) ? $n++ && "$_ " : '' } for 1..1e10;
push @res, $s;

$n = 1; $s = '';
$s .= do { last if $n > $upto; is_Brazilian($_) ? $n++ && "$_ " : '' } for map { 1+2*$_ } 1..1e10;
push @res, $s;

#push @res, "\nFirst $upto odd Brazilian numbers:\n"~ (^Inf).map( * * 2 + 1 ).grep( *.&is_Brazilian )[^$upto];
#push @res, "\nFirst $upto prime Brazilian numbers:\n"~ (^Inf).rep( { .is_prime && .&is_Brazilian } )[^$upto];

say my $result = join "\n", @res;

my $ref = <<'EOD';
First 20 Brazilian numbers:
7 8 10 12 13 14 15 16 18 20 21 22 24 26 27 28 30 31 32 33 
EOD

#First 20 odd Brazilian numbers:
#7 13 15 21 27 31 33 35 39 43 45 51 55 57 63 65 69 73 75 77

#First 20 prime Brazilian numbers:
#7 13 31 43 73 127 157 211 241 307 421 463 601 757 1093 1123 1483 1723 2551 2801
#EOD

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre></pre>
