#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Bitwise_IO
#c# 2018-07-17 <RC
#p# OK
#f# RC file: bitwise.step2
#n# not directy testing 'step1' file, but if borked then 'step2' would be too

use strict;
use warnings;
#use warnings; # line 67: $buf2 < 0 # DH 2023-04-02
 
# $buffer = write_bits(*STDOUT, $buffer, $number, $bits)
sub write_bits :prototype( $$$$ ) {
    my ($out, $l, $num, $q) = @_;
    $l .= substr(unpack('B*', pack('N', $num)), -$q);
    if ( (length($l) > 8) ) {
        my $left = substr($l, 8);
        print $out pack('B8', $l);
        $l = $left;
    }
    $l
}
 
# flush_bits(*STDOUT, $buffer)
sub flush_bits :prototype( $$ ) {
    my ($out, $b) = @_;
    print $out pack('B*', $b);
}
 
# ($val, $buf) = read_bits(*STDIN, $buf, $n)
sub read_bits :prototype( $$$ ) {
    my ( $in, $b, $n ) = @_;
    # we put a limit in the number of bits we can read
    # with one shot; this should mirror the limit of the max
    # integer value perl can hold
    if ( $n > 32 ) { return 0 }
    while ( length($b) < $n ) {
    my $v;
    my $red = read($in, $v, 1);
    if ( $red < 1 ) { return ( 0, -1 ) }
    $b .= substr(unpack('B*', $v), -8);
    }
    my $bits = '0' x ( 32-$n ) . substr($b, 0, $n);
    my $val = unpack('N', pack('B32', $bits));
    $b = substr($b, $n);
    ($val, $b)
}

# Crunching bytes discarding most significant bit (lossless compression for ASCII and few more!)
my($buf1,$c);
open my $f_in,  '<', 'ref/passwd.txt';
open my $f_step1, '>', 'run/bitwise.step1';
while( read($f_in, $c, 1) > 0 ) {
    $buf1 = write_bits($f_step1, $buf1, unpack('C1', $c), 7);
}
flush_bits($f_step1, $buf1);
close $f_step1;
# Expanding each seven bits to fit a byte (padding the eight most significant bit with 0):

# ($val, $buf) = read_bits(*STDIN, $buf, $n)
open    $f_step1, '<', 'run/bitwise.step1';
open my $f_step2, '>', 'run/bitwise.step2';
my($buf2,$v) = ('');
while () {
    ( $v, $buf2 ) = read_bits($f_step1, $buf2, 7);
    last if $buf2 and $buf2 == -1;
   #last if ($buf2 < 0); # DH 2023-04-02
    print $f_step2 pack('C1', $v);
}
