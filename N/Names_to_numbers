#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Names_to_numbers
#c# 2018-08-19 <RC, 2019-11-25 >RC
#p# OK
#n# doesn't 'count' as high as P6 (goes to exp notation)

use strict;
use warnings;
use feature 'say';

my $result;

my %nums = (
    zero        => 0,   one       => 1,     two      => 2,    three    => 3,
    four        => 4,   five      => 5,     six      => 6,    seven    => 7,
    eight       => 8,   nine      => 9,     ten      => 10,   eleven   => 11,
    twelve      => 12,  thirteen  => 13,    fourteen => 14,   fifteen  => 15,
    sixteen     => 16,  seventeen => 17,    eighteen => 18,   nineteen => 19,
    twenty      => 20,  thirty    => 30,    forty    => 40,   fifty    => 50,
    sixty       => 60,  seventy   => 70,    eighty   => 80,   ninety   => 90,
    hundred     => 100, thousand  => 1_000, million  => 1_000_000,
    billion     => 1_000_000_000,           trillion => 1_000_000_000_000,
    quadrillion => 1_000_000_000_000_000
);

# Groupings for thousands, millions, ... quadrillions
my $groups = qr/\d{4}|\d{7}|\d{10}|\d{13}|\d{16}/;

sub sum {
    my($values) = @_;
    my $sum = 0;
    $sum += $_ for split ' ', $values;
    $sum;
}

while ($_ = <DATA>) {
    next if (/^\s*$/) or /^\s*#.*$/;
    chomp;

    # extract to 'squeeze'?
    my $orig = $_;
    s/-/ /g;
    s/\s\s+/ /g;
    s/ $//g;
    s/^ //g;
    $_ = lc($_);

    s/(.)([[:punct:]])/$1 $2/g; # tokenize punctuation
    #s/(.)([;:%',])/$1 $2/g; # DH kill

    foreach my $key (keys %nums) { s/\b$key\b/$nums{$key}/g; }

    s/(\d) (?:,|and) (\d)/$1 $2/g;

    s/\b (\d) \s+ 100 \s+ (\d\d) \s+ (\d) \s+    ($groups) \b / ($1 * 100 + $2 + $3) * $4 /egx;
    s/\b (\d) \s+ 100 \s+ (\d{1,2}) \s+          ($groups) \b / ($1 * 100 + $2) * $3      /egx;
    s/\b (\d) \s+ 100 \s+                        ($groups) \b / $1 * $2 * 100             /egx;
    s/\b      \s+ 100 \s+ (\d\d) \s+ (\d) \s+    ($groups) \b / (100 + $1 + $2) * $3      /egx;
    s/\b      \s+ 100 \s+ (\d{1,2}) \s+          ($groups) \b / (100 + $1) * $2           /egx;
    s/\b      \s+ 100 \s+                        ($groups) \b / $1 * 100                  /egx;
    s/\b                  (\d\d) \s+ (\d) \s+    ($groups) \b / ($1 + $2) * $3            /egx;
    s/\b                  (\d{1,2}) \s+          ($groups) \b / $1 * $2                   /egx;
    s/\b                  (\d\d) \s+ (\d) \s+ 100          \b / ($1 + $2) * 100           /egx;
    s/\b                  (\d{1,2}) \s+ 100                \b / $1 * 100                  /egx;
    s/\b                  (\d{2}) \s+ (\d{2})              \b / $1 * 100 + $2             /egx;

    s/((?:\d+ )*\d+)/sum $1/eg;

    s/(\d+) \s+ pairs.of        / $1 *  2 /egx;
    s/(\d+) \s+ dozen           / $1 * 12 /egx;
    s/(\d+) \s+ point \s+ (\d+) /  $1.$2  /gx;
    
# need to squeeze...

    $result .= $orig. " => ". $_. "\n";
}

#say $result; exit;

my $ref = <<'END';
two hundred pairs of socks => 400 socks
One hour, fifty-nine minutes, forty point two seconds => 1 hour , 59 minutes ,   40.2   seconds
twelve dozen is one hundred forty-four, aka 'one gross' => 144 is 144 , aka  '1 gross '
Seventy-two dollars => 72 dollars
Seventy two dollars => 72 dollars
One Hundred and One Dalmatians => 101 dalmatians
A Hundred and One Dalmatians => a 101 dalmatians
One Hundred One Dalmatians => 101 dalmatians
Hundred and One Dalmatians => 101 dalmatians
One Thousand and One Nights => 1001 nights
Two Thousand and One: A Space Odyssey => 2001 : a space odyssey
Twenty Thirteen => 2013
Nineteen Eighty-Four => 1984
Nine Hundred Ninety-Nine => 999
One Thousand One Hundred Eleven => 1111
Eleven Hundred Eleven => 1111
Eight Thousand Eight Hundred Eighty-Eight => 8888
Eighty-Eight Hundred Eighty-Eight => 8888
Seven Million Seven Hundred Seventy-Seven Thousand Seven Hundred Seventy-Seven => 7777777
Ninety-Nine Trillion Nine Hundred Ninety-Nine Billion Nine Hundred Ninety-Nine Million Nine Hundred Ninety-Nine Thousand Nine Hundred Ninety-Nine => 99999999999999
ninety-nine => 99
three hundred => 300
three hundred and ten => 310
one thousand, five hundred and one => 1501
twelve thousand, six hundred and nine => 12609
five hundred and twelve thousand, six hundred and nine => 512609
forty-three million, one hundred and twelve thousand, six hundred and nine => 43112609
two billion, one hundred => 2000000100
zero => 0
eight => 8
one hundred => 100
one hundred twenty three => 123
one thousand one => 1001
ninety nine thousand nine hundred ninety nine => 99999
one hundred thousand => 100000
one hundred eleven billion one hundred eleven => 111000000111
four billion, two hundred ninety-four million, nine hundred sixty-seven thousand, two hundred ninety five => 4294967295
Nine quadrillion, seven trillion, one hundred ninety-nine billion, two hundred fifty-four million, seven hundred forty thousand, nine hundred ninety two => 9007199254740992

END

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();

__END__
two hundred pairs of socks
One hour, fifty-nine minutes, forty point two seconds
twelve dozen is one hundred forty-four, aka 'one gross'

# For numbers between 21 and 99 inclusive, we're supposed to use a hyphen,
# but the bank still cashes our check without the hyphen:
Seventy-two dollars
Seventy two dollars

# For numbers bigger than 100, we're not supposed to use "and,"
# except we still use "and" anyway, e.g.,
One Hundred and One Dalmatians
A Hundred and One Dalmatians
One Hundred One Dalmatians
Hundred and One Dalmatians
One Thousand and One Nights
Two Thousand and One: A Space Odyssey

# Date anomolies
Twenty Thirteen
Nineteen Eighty-Four

Nine Hundred Ninety-Nine
One Thousand One Hundred Eleven
Eleven Hundred Eleven
Eight Thousand Eight Hundred Eighty-Eight
Eighty-Eight Hundred Eighty-Eight
Seven Million Seven Hundred Seventy-Seven Thousand Seven Hundred Seventy-Seven
Ninety-Nine Trillion Nine Hundred Ninety-Nine Billion Nine Hundred Ninety-Nine Million Nine Hundred Ninety-Nine Thousand Nine Hundred Ninety-Nine

ninety-nine
three hundred
three hundred and ten
one thousand, five hundred and one
twelve thousand, six hundred and nine
five hundred and twelve thousand, six hundred and nine
forty-three million, one hundred and twelve thousand, six hundred and nine
two billion, one hundred

zero
eight
one hundred
one hundred twenty three
one thousand one
ninety nine thousand nine hundred ninety nine
one hundred thousand
one hundred eleven billion one hundred eleven

# can handle bigger values, up to quadrillions
four billion, two hundred ninety-four million, nine hundred sixty-seven thousand, two hundred ninety five
Nine quadrillion, seven trillion, one hundred ninety-nine billion, two hundred fifty-four million, seven hundred forty thousand, nine hundred ninety two
