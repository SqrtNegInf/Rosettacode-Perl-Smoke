#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Negative_base_numbers
#c# 2019-02-09 >RC
#p# OK

my @res;

use strict;
use feature 'say';
use POSIX qw(floor);
use ntheory qw/fromdigits todigits/;

sub encode {
    my($n, $b) = @_;
    my @out;
    my $r = 0;

    while ($n) {
        $r = $n % $b;
        $n = floor $n/$b;
        $n += 1, $r -= $b if $r < 0;
        push @out, todigits($r, -$b) || 0;
    }
    join '', reverse @out; 
}

sub decode {
    my($s, $b) = @_;
    my $total = 0;
    my $i = 0;
    for my $c (reverse split '', $s) {
        $total += (fromdigits($c, -$b) * $b**$i);
        $i++;
    }
    $total
}

push @res, " 10 in base  -2: ". encode(10, -2);
push @res, " 15 in base -10: ". encode(15, -10);
push @res, "146 in base  -3: ". encode(146, -3);
 
push @res,  "11110 from base  -2: ". decode("11110", -2);
push @res,  "21102 from base  -3: ". decode("21102", -3);
push @res,  "  195 from base -10: ". decode("195",  -10);

say my $result = join "\n", @res;

my $ref = <<'EOD';
 10 in base  -2: 11110
 15 in base -10: 195
146 in base  -3: 21102
11110 from base  -2: 10
21102 from base  -3: 146
  195 from base -10: 15
EOD

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
