#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Non-decimal_radices/Convert
#c# 2018-08-20 <RC
#p# OK

my $result;

use strict;
use warnings;
use feature 'say';

# For base 2 and 16, we can do this entirely with language features:

sub    to2 { sprintf '%b', shift; }
sub   to16 { sprintf '%x', shift; }
sub  from2 { unpack('N', pack('B32', substr('0' x 32 . shift, -32))); }
sub from16 { hex(shift); }

# Small functions will handle arbitrary base conversions for bases 2-36:
sub base_to {
  my($n,$b) = @_;
  my $s = '';
  while ($n) {
    $s .= ('0'..'9','a'..'z')[$n % $b];
    $n = int($n/$b);
  }
  scalar(reverse($s));
}

sub base_from {
  my($n,$b) = @_;
  my $t = 0;
  for my $c (split(//, lc($n))) {
    $t = $b * $t + index('0123456789abcdefghijklmnopqrstuvwxyz', $c);
  }
  $t;
}

# There are a plethora of modules that perform base conversion.
# The core POSIX module includes strtol (and strtoul) which is simple and fast, but only does conversions from a base. On some platforms the function may be limited to 32-bit even with a 64-bit Perl.
 
use POSIX;
my ($num, $n_unparsed) = strtol('1a', 16);
$n_unparsed == 0 or die 'invalid characters found';
$result .= "$num\n";

# The ntheory module includes functions that will perform base conversion, and is fast. It supports bases up to 36 and bigints.
use ntheory qw/fromdigits todigitstring/;
my $n   = 65261;
my $n16 = todigitstring($n, 16) || 0;
my $n10 = fromdigits($n16, 16);
$result .= "$n $n16 $n10\n";

say $result;

my $ref = <<'EOD';
26
65261 feed 65261
EOD

use Test::More;
is ($result, $ref);
done_testing();
