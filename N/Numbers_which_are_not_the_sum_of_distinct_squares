#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Numbers_which_are_not_the_sum_of_distinct_squares
#t# inprogress
#c# 2022-11-23 >RC
#p# OK

my @res;

use v5.36;

use List::Util <sum uniq none>;
use Algorithm::Combinatorics 'combinations';

my @squares = map { $_**2 } 1..20;

my $sq;
while (++$sq)  {
    my @sums;
    for ( 1..$sq ) {
        for ( combinations([0..$sq+1], $_) ) {
            push @sums, sum @squares[@$_];
        }
    }

    my @run;
    for (@sums) {
        push(@run, $_) and next unless @run;
        if ($_ == $run[-1] + 1) { push @run, $_ } else { last if @run > $squares[$sq]; @run = () }
    }
    say 'len ' . +@run;
    next unless @run;
    @res = ();
    for my $i (1..$run[-1]) {
         push @res, $i if none { $i eq $_ } @sums
    }
    last if (0+scalar(@run)) >= $squares[$sq];
}

say my $result = join " ", @res;

my $ref = '2 3 6 7 8 11 12 15 18 19 22 23 24 27 28 31 32 33 43 44 47 48 60 67 72 76 92 96 108 112 128';

use Test::More;
is($result, $ref);
done_testing();

__END__

# Once the longest run of consecutive generated sums is longer the the next square, 
# every number after can be generated by adding the next square to every number in the run. 
# Find the new longest run, add the next square, etc.

=={{header|Perl}}==
{{trans|Raku}}
<syntaxhighlight lang="perl" line>
</syntaxhighlight>
{{out}}
<pre>2 3 6 7 8 11 12 15 18 19 22 23 24 27 28 31 32 33 43 44 47 48 60 67 72 76 92 96 108 112 128</pre>
