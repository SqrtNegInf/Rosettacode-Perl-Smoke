#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Y_combinator
#c# 2018-07-15 <RC
#p# OK
#n# testing both versions

use feature 'say';
my $result;

sub Y { my $f = shift;                                # 位f.
    sub { my $x = shift; $x->($x) }->(                #   (位x.x x)
	sub {my $y = shift; $f->(sub {$y->($y)(@_)})} #   位y.f 位z.y y z
    )
}
my $fac = sub {my $f = shift;
    sub {my $n = shift; $n < 2 ? 1 : $n * $f->($n-1)}
};
my $fib = sub {my $f = shift;
    sub {my $n = shift; $n == 0 ? 0 : $n == 1 ? 1 : $f->($n-1) + $f->($n-2)}
};
for my $f ($fac, $fib) {
    $result .= sprintf join(' ', map Y($f)->($_), 0..9). "\n";
}

# say $result; 
my $ref = <<EOD;
1 1 2 6 24 120 720 5040 40320 362880
0 1 1 2 3 5 8 13 21 34
1 1 2 6 24 120 720 5040 40320 362880
0 1 1 2 3 5 8 13 21 34
EOD

# The usual version using recursion, disallowed by the task:

sub Yalt { my $f = shift;
    sub {$f->(Yalt($f))->(@_)}
}
for my $f ($fac, $fib) {
    $result .= sprintf join(' ', map Yalt($f)->($_), 0..9). "\n";
}

use Test::More;
is ($result, $ref);
done_testing();
