#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/4-rings_or_4-squares_puzzle
#c# 2018-09-06 >RC
#p# OK

use feature 'say';
my $result;

use Set::CrossProduct;
use ntheory qw/forperm/;

sub four_sq_permute {
    my( $list ) = @_;
    my @solutions;
    forperm {
       @c = @$list[@_];
       push @solutions, [@c] if check(@c);
    } @$list;
    $result .= +@solutions . " unique solutions found using: " . join(', ', @$list) . "\n";
    return @solutions;
}

sub four_sq_cartesian {
    my( @list ) = @_;
    my @solutions;
    my $iterator = Set::CrossProduct->new( [(@list) x 7] );
    while( my $c = $iterator->get ) {
       push @solutions, [@$c] if check(@$c);
    }
    $result .= +@solutions . " non-unique solutions found using: " . join(', ', @{@list[0]}) . "\n";
    return @solutions;
}

sub check {
    my(@c) = @_;
    $a = $c[0] + $c[1];
    $b = $c[1] + $c[2] + $c[3];
    $c = $c[3] + $c[4] + $c[5];
    $d = $c[5] + $c[6];
    $a == $b and $a == $c and $a == $d;
}

sub display {
    my(@solutions) = @_;
    my $fmt = "%2s " x 7 . "\n";
    $result .= sprintf $fmt, ('a'..'g');
    $result .= sprintf $fmt, @$_ for @solutions;
    $result .= "\n";
}

display four_sq_permute( [1..7] );
display four_sq_permute( [3..9] );
display four_sq_permute( [8, 9, 11, 12, 17, 18, 20, 21] );
#four_sq_cartesian( [0..9] );

say $result;

my $ref = <<'EOD';
8 unique solutions found using: 1, 2, 3, 4, 5, 6, 7
 a  b  c  d  e  f  g 
 3  7  2  1  5  4  6 
 4  5  3  1  6  2  7 
 4  7  1  3  2  6  5 
 5  6  2  3  1  7  4 
 6  4  1  5  2  3  7 
 6  4  5  1  2  7  3 
 7  2  6  1  3  5  4 
 7  3  2  5  1  4  6 

4 unique solutions found using: 3, 4, 5, 6, 7, 8, 9
 a  b  c  d  e  f  g 
 7  8  3  4  5  6  9 
 8  7  3  5  4  6  9 
 9  6  4  5  3  7  8 
 9  6  5  4  3  8  7 

8 unique solutions found using: 8, 9, 11, 12, 17, 18, 20, 21
 a  b  c  d  e  f  g 
17 21  8  9 11 18 20 
17 21  9  8 12 18 20 
20 18  8 12  9 17 21 
20 18 11  9  8 21 17 
20 18 11  9 12 17 21 
20 18 12  8  9 21 17 
21 17  9 12  8 18 20 
21 17 12  9 11 18 20 

EOD
#2860 non-unique solutions found using: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9

use Test::More;
is ($result, $ref);
done_testing();
