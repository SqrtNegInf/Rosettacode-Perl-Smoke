#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/24_game/Solve
#c# 2018-07-04 <RC
#p# OK

use v5.36.0;

# Will generate all possible solutions of any given four numbers according to the rules of the 24 game.
# Note: the permute function was taken from here

# Fischer-Krause ordered permutation generator
# http://faq.perl.org/perlfaq4.html#How_do_I_permute_N_e
sub permute :prototype(&@) {
		my $code = shift;
		my @idx = 0..$#_;
		while ( $code->(@_[@idx]) ) {
			my $p = $#idx;
			--$p while $idx[$p-1] > $idx[$p];
			my $q = $p or return;
			push @idx, reverse splice @idx, $p;
			++$q while $idx[$p-1] > $idx[$q];
			@idx[$p-1,$q]=@idx[$q,$p-1];
		}
	}
 
my @formats = (
	'((%d %s %d) %s %d) %s %d',
	'(%d %s (%d %s %d)) %s %d',
	'(%d %s %d) %s (%d %s %d)',
	'%d %s ((%d %s %d) %s %d)',
	'%d %s (%d %s (%d %s %d))',
	);
 
# generate all possible combinations of operators
my @op = qw( + - * / );
my @operators = map{ $a=$_; map{ $b=$_; map{ "$a $b $_" }@op }@op }@op;
 
sub bf {
my($ent) = @_;
my(@res,@numbers);

#	print "Enter four integers or 'q' to exit: ";
#	chomp($ent = <>);
#	last if $ent eq 'q';
 
 
	if($ent !~ /^[1-9] [1-9] [1-9] [1-9]$/){ print "invalid input\n"; return }
 
	my @n = split / /, $ent;
	permute { push @numbers,join ' ',@_ }@n;
 
	for my $format (@formats)
	{
		for(@numbers)
		{
			my @n = split;
			for(@operators)
			{
				my @o = split;
				my $str = sprintf $format,$n[0],$o[0],$n[1],$o[1],$n[2],$o[2],$n[3];
				my $r = eval($str);
				push @res, "$str" if defined $r and $r == 24;
			}
		}
	}
    return @res;
}

my $ref = <<EOD;
((7 + 1) * 3) * 1
((7 + 1) * 3) / 1
((7 + 1) * 1) * 3
((7 + 1) / 1) * 3
((7 * 1) + 1) * 3
((7 / 1) + 1) * 3
((7 + 1) * 3) * 1
((7 + 1) * 3) / 1
((7 + 1) * 1) * 3
((7 + 1) / 1) * 3
((7 * 1) + 1) * 3
((7 / 1) + 1) * 3
((1 + 7) * 3) * 1
((1 + 7) * 3) / 1
((1 + 7) * 1) * 3
((1 + 7) / 1) * 3
((1 * 7) + 1) * 3
((1 * 1) + 7) * 3
((1 / 1) + 7) * 3
((1 + 7) * 3) * 1
((1 + 7) * 3) / 1
((1 + 7) * 1) * 3
((1 + 7) / 1) * 3
((1 * 7) + 1) * 3
((1 * 1) + 7) * 3
((1 / 1) + 7) * 3
(3 * (7 + 1)) * 1
(3 * (7 + 1)) / 1
(3 * (7 + 1)) * 1
(3 * (7 + 1)) / 1
(3 * (1 + 7)) * 1
(3 * (1 + 7)) / 1
(3 * (1 + 7)) * 1
(3 * (1 + 7)) / 1
(7 + (1 * 1)) * 3
(7 + (1 / 1)) * 3
(7 + (1 * 1)) * 3
(7 + (1 / 1)) * 3
(1 + (7 * 1)) * 3
(1 + (7 / 1)) * 3
(1 * (7 + 1)) * 3
(1 + (1 * 7)) * 3
(1 * (1 + 7)) * 3
(1 + (7 * 1)) * 3
(1 + (7 / 1)) * 3
(1 * (7 + 1)) * 3
(1 + (1 * 7)) * 3
(1 * (1 + 7)) * 3
(3 + 1) * (7 - 1)
(3 * 1) * (7 + 1)
(3 / 1) * (7 + 1)
(3 * 1) * (1 + 7)
(3 / 1) * (1 + 7)
(3 + 1) * (7 - 1)
(3 * 1) * (7 + 1)
(3 / 1) * (7 + 1)
(3 * 1) * (1 + 7)
(3 / 1) * (1 + 7)
(7 + 1) * (3 * 1)
(7 + 1) * (3 / 1)
(7 - 1) * (3 + 1)
(7 + 1) * (1 * 3)
(7 + 1) / (1 / 3)
(7 - 1) * (1 + 3)
(7 + 1) * (3 * 1)
(7 + 1) * (3 / 1)
(7 - 1) * (3 + 1)
(7 + 1) * (1 * 3)
(7 + 1) / (1 / 3)
(7 - 1) * (1 + 3)
(1 + 3) * (7 - 1)
(1 * 3) * (7 + 1)
(1 * 3) * (1 + 7)
(1 + 7) * (3 * 1)
(1 + 7) * (3 / 1)
(1 + 7) * (1 * 3)
(1 + 7) / (1 / 3)
(1 + 3) * (7 - 1)
(1 * 3) * (7 + 1)
(1 * 3) * (1 + 7)
(1 + 7) * (3 * 1)
(1 + 7) * (3 / 1)
(1 + 7) * (1 * 3)
(1 + 7) / (1 / 3)
3 * ((7 + 1) * 1)
3 * ((7 + 1) / 1)
3 * ((7 * 1) + 1)
3 * ((7 / 1) + 1)
3 * ((7 + 1) * 1)
3 * ((7 + 1) / 1)
3 * ((7 * 1) + 1)
3 * ((7 / 1) + 1)
3 * ((1 + 7) * 1)
3 * ((1 + 7) / 1)
3 * ((1 * 7) + 1)
3 * ((1 * 1) + 7)
3 * ((1 / 1) + 7)
3 * ((1 + 7) * 1)
3 * ((1 + 7) / 1)
3 * ((1 * 7) + 1)
3 * ((1 * 1) + 7)
3 * ((1 / 1) + 7)
1 * ((7 + 1) * 3)
1 * ((1 + 7) * 3)
1 * ((7 + 1) * 3)
1 * ((1 + 7) * 3)
3 * (7 + (1 * 1))
3 * (7 + (1 / 1))
3 * (7 + (1 * 1))
3 * (7 + (1 / 1))
3 * (1 + (7 * 1))
3 * (1 + (7 / 1))
3 * (1 * (7 + 1))
3 / (1 / (7 + 1))
3 * (1 + (1 * 7))
3 * (1 * (1 + 7))
3 / (1 / (1 + 7))
3 * (1 + (7 * 1))
3 * (1 + (7 / 1))
3 * (1 * (7 + 1))
3 / (1 / (7 + 1))
3 * (1 + (1 * 7))
3 * (1 * (1 + 7))
3 / (1 / (1 + 7))
1 * (3 * (7 + 1))
1 * (3 * (1 + 7))
1 * (3 * (7 + 1))
1 * (3 * (1 + 7))
EOD

my @res = bf('3 7 1 1');
say $_ for @res;

use Test::More;
my $result = join "\n", @res;
chop $ref;
is ($result, $ref);
done_testing();
