#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Polynomial_long_division
#c# 2018-08-20 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

# This solution keeps the highest power coefficient first, like OCaml solution and Octave solution.
# Translation of: Octave

use List::Util qw(min);

sub poly_long_div
{
    my ($rn, $rd) = @_;

    my @n = @$rn;
    my $gd = scalar(@$rd);
    if ( scalar(@n) >= $gd ) {
	my @q = ();
	while ( scalar(@n) >= $gd ) {
	    my $piv = $n[0]/$rd->[0];
	    push @q, $piv;
	    $n[$_] -= $rd->[$_] * $piv foreach ( 0 .. min(scalar(@n), $gd)-1 );
	    shift @n;
	}
	return ( \@q, \@n );
    } else {
	return ( [0], $rn );
    }
}
sub poly_print
{
    my @c = @_;
    my $l = scalar(@c);
    for(my $i=0; $i < $l; $i++) {
	$result .= $c[$i];
	$result .= "x^" . ($l-$i-1) . " + " if ($i < ($l-1)); 
    }
    $result .= "\n";
}
my ($q, $r);

($q, $r) = poly_long_div([1, -12, 0, -42], [1, -3]);
poly_print(@$q);
poly_print(@$r);
$result .= "\n";
($q, $r) = poly_long_div([1,-12,0,-42], [1,1,-3]);
poly_print(@$q);
poly_print(@$r);
$result .= "\n";
($q, $r) = poly_long_div([1,3,2], [1,1]);
poly_print(@$q);
poly_print(@$r);
$result .= "\n";
# the example from the OCaml solution 
($q, $r) = poly_long_div([1,-4,6,5,3], [1,2,1]);
poly_print(@$q);
poly_print(@$r);

say $result; 
my $ref = <<'EOD';
1x^2 + -9x^1 + -27
-123

1x^1 + -13
16x^1 + -81

1x^1 + 2
0

1x^2 + -6x^1 + 17
-23x^1 + -14
EOD

use Test::More;
is ($result, $ref);
done_testing;
