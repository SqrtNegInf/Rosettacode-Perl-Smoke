#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Percolation/Site_percolation
#t# skiptest
#c# 2019-01-RC >RC
#p# OK

srand 123456;

use feature 'say';

use warnings;
use strict 'vars';

my $block = '▒';
my $water = '+';
my $pore  = ' ';
my $grid  = 15;
my @site;

my(%D, $i);
$D{$_} = $i++ for qw<DeadEnd Up Right Down Left>;

my $prob = .65;
percolate($prob);

print "Sample percolation at $prob";
#my @drip.push: .join for @site;
#.say for @drip;

#say 'Sample percolation at .6';
#percolate(.6);
#.join.say for @site;
#print "\n";

my $tests = 100;
print "Doing $tests trials at each porosity:\n";
my @table;
for my $p (1 .. 10) {
    $p = $p/10;
    my $total = 0;
    $total += percolate($p) for 1..$tests;
    push @table, sprintf "p = %0.1f: %0.2f", $p, $total / $tests
}

print "$_\n" for @table;

sub deq { defined $_[0] && $_[0] eq $_[1] }

sub percolate {
   # generate(shift || 0.6);
    $site[0] = [($pore) x $grid];
    $site[$grid + 1] = [($pore) x $grid];
#    for ^$grid X 1..$grid -> ($x, $y) {
#        @site[$y;$x] = rand < $prob ?? $pore !! $block
#    }
    $site[0][0] = $water;

    my $x = 0;
    my $y = 0;
    my @stack;

    while () {
        if (my $dir = direction($x,$y)) {
            push @stack, [$x,$y];
            ($x,$y) = move($dir, $x, $y)
        } else {
            return 0 unless @stack;
            ($x,$y) = @{pop @stack}
        }
        return 1 if $y > $grid;
    }
}

sub direction {
    my($x, $y) = @_;
    return $D{Down}  if deq($site[$y+1][$x  ], $pore);
    return $D{Left}  if deq($site[$y  ][$x-1], $pore);
    return $D{Right} if deq($site[$y  ][$x+1], $pore);
    return $D{Up}    if deq($site[$y-1][$x  ], $pore);
    return $D{DeadEnd};
}

sub move {
    my($dir,$x,$y,$block) = @_;
    $site[--$y][   $x] = $block if $dir == $D{Up};
    $site[++$y][   $x] = $block if $dir == $D{Down};
    $site[  $y][ --$x] = $block if $dir == $D{Left};
    $site[  $y][ ++$x] = $block if $dir == $D{Right};
    $x, $y
}


##    sub direction( [$x, $y] ) {
#        (Down  if @site[$y + 1][$x] deq $pore) ||
#        (Left  if @site[$y][$x - 1] deq $pore) ||
#        (Right if @site[$y][$x + 1] deq $pore) ||
#        (Up    if @site[$y - 1][$x] deq $pore) ||
#        DeadEnd
#    }

#    sub move ( $dir, @cur ) {
#        my ( $x, $y ) = @cur;
#        given $dir {
#            when Up    { @site[--$y][$x] = $water }
#            when Down  { @site[++$y][$x] = $water }
#            when Left  { @site[$y][--$x] = $water }
#            when Right { @site[$y][++$x] = $water }
#        }
#        [$x, $y]
#    }


my $ref_graph = <<'END';
++++++++++     
▒+++++++▒+▒ ▒  
+++▒+▒▒+▒++++▒▒
+++▒▒▒▒++▒+▒+▒▒
++++▒ ▒++▒▒ +▒ 
+++++ ▒▒▒▒ ▒+▒ 
+++++▒    ▒ +▒ 
▒▒++▒   ▒  ▒+▒ 
+▒+▒ ▒▒▒    +▒▒
+++▒▒▒▒  ▒  +  
▒▒+▒▒   ▒ ▒++  
▒▒+▒  ▒ ▒ ++▒▒▒
  ▒      ▒+▒▒ ▒
 ▒  ▒▒ ▒▒ +   ▒
▒     ▒▒  +    
▒▒ ▒     ▒+    
          +    
END

my $ref_table = <<'END';
p = 0.1: 0.000
p = 0.2: 0.000
p = 0.3: 0.000
p = 0.4: 0.000
p = 0.5: 0.130
p = 0.6: 0.520
p = 0.7: 0.970
p = 0.8: 1.000
p = 0.9: 1.000
p = 1.0: 1.000
END

use Test::More;
#is($result, $ref);
done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre style="height:35ex"></pre>
[https://github.com/SqrtNegInf/Rosettacode-Perl5-Smoke/blob/master/ref/XXX XXX]
