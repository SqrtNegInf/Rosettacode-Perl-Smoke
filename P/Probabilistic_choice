#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Probabilistic_choice
#c# 2018-08-20 <RC
#p# OK
#n# 2022-11-05 testing OK, just a simple matter of hash key order

my $result;

srand 123456;

use strict;
use warnings;
use feature 'say';

use List::Util qw(first sum);
use constant TRIALS => 1e4;

sub prob_choice_picker {
  my %options = @_;
  our ($n, @a) = 0;
  #while (my ($k,$v) = each %options) {
  for my $k (sort keys %options) {          # for stability
      $n += $options{$k};
      push @a, [$n, $k];
  }
  return sub {
      my $r = rand;
      ( first {$r <= $_->[0]} @a )->[1];
  };
}

my %ps =
  (aleph  => 1/5,
   beth   => 1/6,
   gimel  => 1/7,
   daleth => 1/8,
   he     => 1/9,
   waw    => 1/10,
   zayin  => 1/11);
$ps{heth} = 1 - sum values %ps;

my $picker = prob_choice_picker %ps;
my %results;
for (my $n = 0 ; $n < TRIALS ; ++$n) {
    ++$results{$picker->()};
}

print "Event   Occurred  Expected  Difference\n";
foreach (sort {$results{$b} <=> $results{$a}} keys %results) {
    $result .= sprintf "%-6s  %f  %f  %f\n",
        $_, $results{$_}/TRIALS, $ps{$_},
        abs($results{$_}/TRIALS - $ps{$_});
}

say $result; 

my $ref = <<'EOD';
aleph   0.205600  0.200000  0.005600
beth    0.168100  0.166667  0.001433
gimel   0.145500  0.142857  0.002643
daleth  0.121100  0.125000  0.003900
he      0.111800  0.111111  0.000689
waw     0.094200  0.100000  0.005800
zayin   0.093100  0.090909  0.002191
heth    0.060600  0.063456  0.002856
EOD

use Test::More;
is ($result, $ref);
done_testing();
