#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Playing_cards
#c# 2018-08-21 <RC
#p# OK
#n# no straight-up replacement for typeglob here

srand 123456;

use strict;
use warnings;
use feature 'say';
my $result;

package Playing_Card_Deck;

# I choose to fully qualify these names rather than declare them
# with "our" to keep them from escaping into the scope of other
# packages in the same file. Another possible solution is to use
# "our" or "my", but to enclose this entire package in a bare block.
@Playing_Card_Deck::suits = qw [Diamonds Clubs Hearts Spades];
@Playing_Card_Deck::pips  = qw [Two Three Four Five Six Seven Eight Nine Ten Jack King Queen Ace];

# Creates a new deck-object. The cards are initially neatly ordered.
sub new {
    my $invocant = shift;
    my $class = ref($invocant) || $invocant;
    my @cards; # = ();
    for my $suit (@Playing_Card_Deck::suits) {
        for my $pip (@Playing_Card_Deck::pips) {
            push @cards, {suit => $suit, pip => $pip}
        } 
    }
  return bless([@cards], $class);
}

# Removes the top card of the given deck and returns it as a hash with the keys "suit" and "pip".
sub deal { %{ shift( @{shift(@_)} ) } }

# Randomly permutes the cards in the deck.
# algorithm described at: http://en.wikipedia.org/wiki/Fisher-Yates_shuffle#The_modern_algorithm
sub shuffle {
    our @deck; local *deck = shift; # @deck is now an alias of the invocant's referent.
    for (my $n = $#deck ; $n ; --$n) {
        my $k = int rand($n + 1);
        @deck[$k, $n] = @deck[$n, $k] if $k != $n;
    }
}

# Prints out a description of every card in the deck, in order.
sub print_cards {$result .= "$_->{pip} of $_->{suit}\n" for @{shift(@_)} }

# create a new deck, shuffle it, remove the top card, print out that card's name in all caps, and then prints the rest of the deck.
my $deck = new Playing_Card_Deck;
$deck->shuffle;
my %card = $deck->deal;
$result .= uc("$card{pip} OF $card{suit}\n");
$deck->print_cards;

say $result; 

my $ref = <<'EOD';
TWO OF HEARTS
Five of Hearts
Seven of Clubs
Ten of Diamonds
Eight of Spades
Eight of Diamonds
Queen of Spades
Six of Diamonds
Two of Spades
Five of Diamonds
Eight of Clubs
Six of Spades
Six of Hearts
Ace of Diamonds
Six of Clubs
Nine of Spades
Two of Diamonds
Nine of Clubs
Queen of Hearts
Jack of Diamonds
Jack of Hearts
Ace of Hearts
Nine of Hearts
King of Hearts
Three of Clubs
Ace of Clubs
Ten of Clubs
Nine of Diamonds
Three of Hearts
Four of Hearts
Three of Spades
Eight of Hearts
King of Spades
Jack of Clubs
Seven of Diamonds
King of Clubs
Five of Spades
Ten of Spades
Three of Diamonds
Five of Clubs
Four of Clubs
Queen of Diamonds
Four of Spades
Queen of Clubs
Seven of Spades
Ace of Spades
Two of Clubs
Four of Diamonds
King of Diamonds
Seven of Hearts
Ten of Hearts
Jack of Spades
EOD

use Test::More;
is ($result, $ref);
done_testing();
