#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Primality_by_trial_division
#c# 2018-08-20 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

#A simple idiomatic solution:

sub prime { my $n = shift || $_;
    $n % $_ or return for 2 .. sqrt $n;
    $n > 1
}

$result .= join(', ' => grep prime, 1..100). "\n";

#Excluding multiples of 2 and 3[edit]
#One of many ways of writing trial division using a mod-6 wheel. Almost 2x faster than the simple method shown earlier.

sub isprime1 {
  my $n = shift;
  return ($n >= 2) if $n < 4;
  return unless $n % 2  &&  $n % 3;
  my $sqrtn = int(sqrt($n));
  for (my $i = 5; $i <= $sqrtn; $i += 6) {
    return unless $n % $i && $n % ($i+2);
  }
  1;
}
my $s = 0;
$s += !!isprime1($_) for 1..10000;
$result .= "Pi(10,000) = $s\n";

# By Regular Expression[edit]
# JAPH by Abigail 1999 [1] in conference slides 2000 [2].
# While this is extremely clever and often used for Code golf, it should never be used for real work (it is extremely slow and uses lots of memory).

sub isprime2 {
  ('1' x shift) !~ /^1?$|^(11+?)\1+$/
}
$result .= join(', ', grep(isprime2($_), 0..39)). "\n";


say $result; 
my $ref = <<'EOD';
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97
Pi(10,000) = 1229
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37
EOD

use Test::More;
is ($result, $ref);
done_testing();
