#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Pascal%27s_triangle
#c# 2018-08-20 <RC
#p# OK

my($result1,$result2);

use strict;
use warnings;
use feature 'say';

# These functions perform as requested in the task: they print out the first n lines. 
# If n <= 0, they print nothing. The output is simple (no fancy formatting).

sub pascal {
  my $rows = shift;
  my @next = (1);
  for my $n (1 .. $rows) {
    $result1 .= "@next\n";
    @next = (1, (map $next[$_]+$next[$_+1], 0 .. $n-2), 1);
  }
}

# If you want more than 68 rows, then use either "use bigint" or "use Math::GMP qw/:constant/" 
# inside the function to enable bigints. We can also use a binomial function which will expand 
# to bigints if many rows are requested:

use ntheory qw/binomial/;
sub pascal2 {
  my $rows = shift;
  for my $n (0 .. $rows-1) {
    $result2 .= join(" ", map { binomial($n,$_) } 0 .. $n). "\n";
  }
}

pascal(12);
pascal2(12);

say $result1;

my $ref = <<'EOD';
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
1 6 15 20 15 6 1
1 7 21 35 35 21 7 1
1 8 28 56 70 56 28 8 1
1 9 36 84 126 126 84 36 9 1
1 10 45 120 210 252 210 120 45 10 1
1 11 55 165 330 462 462 330 165 55 11 1
EOD

use Test::More;
is ($result1, $ref);
is ($result2, $ref);
done_testing();
