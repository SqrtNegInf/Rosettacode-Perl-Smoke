#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Primorial_numbers
#c# 2018-08-20 <RC
#p# OK

use feature 'say';
my $result;

# Library: ntheory
use ntheory qw(pn_primorial);

$result .= "First ten primorials: ". join ", ", map { pn_primorial($_) } 0..9;
$result .= "\n";

$result .= "primorial(10^$_) has ".(length pn_primorial(10**$_))." digits\n" for 1..6;
#The pn_primorial function is smart enough to return a Math::BigInt object if the result won't fit into a native integer, so it all works out.


#Still using the library for the core activities, we can do the same in two steps. primes($n) returns a reference to a list of primes up to n, nth_prime($n) returns the nth prime, and vecprod does an efficient product tree. So for 10^6 we can do:

use ntheory ":all";
$result .= length( vecprod( @{primes( nth_prime(10**6) )} ) ) . "\n";
#returning the same result in only slightly more time. Both examples take under 4 seconds.

say $result; 

my $ref = <<'EOD';
First ten primorials: 1, 2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870
primorial(10^1) has 10 digits
primorial(10^2) has 220 digits
primorial(10^3) has 3393 digits
primorial(10^4) has 45337 digits
primorial(10^5) has 563921 digits
primorial(10^6) has 6722809 digits
6722809
EOD

use Test::More;
is ($result, $ref);
done_testing();
