#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Palindromic_primes_with_alternating_digits
#c# 2021-12-10 NOT ON RC
#p# OK
#n# essentially 'smoothly undulating palindromic primes': a(ba){1,}, (but allowing a == b)
#n# http://www.worldofnumbers.com/undulat.htm
#n# So related to huge number of OEIS entries: OEIS:A032758 OEIS:A059758 OEIS:A242541
#n# or in degenerate case of a=b, one digit, for lengths: 19, 23, 317, 1031 (the repunit primes, as per OEIS:A004023)
#n# b=0 only once, never a=7, b=6 (proved) but 3/4, 7/1?
#n# 3 .. 1501: 61.69s user 0.21s system 99% cpu 1:02.38 total

#$| = 1;
my @res;

use strict;
use warnings;
use feature 'say';
use ntheory  'gcd';

use Math::Prime::Util 'is_prime';
#use Math::AnyNum 'is_prime';       # a little faster with smallest primes

my @t;

if (0) {

while ($_ = <DATA>) { 
    my($m,$a,$b) = split ' ', $_;
    $t[$a][$b]++;
}

} else {
#my $m1 = 3; my $m2 = 15;
my $m1 = 3; my $m2 = 1501;

my @digits = 0..9; 
my $zero;

for my $d (($m1+1)/2..($m2+1)/2) {
    my @pr = ();
    for my $a (<1 3 7 9>) {
        for my $b (@digits) {
            #next if "$a$b" eq '34' or "$a$b" eq '71' or "$a$b" eq '76';
            my $p = $a . "$b$a" x ($d-1);
            next unless is_prime $p;
            $t[$a][$b]++;
#           push @pr, [$a, $b];
#           print "$p ";
        }
    }
#print "\n";
    $zero = shift @digits unless defined $zero;
#   printf "%d %s\n", 1+2*($d-1), join ' ', @{$pr[$_]} for 0..$#pr;
#   push @res, sprintf "%d %s", 1+2*($d-1), join ' ', @{$pr[$_]} for 0..$#pr;
}

}

say '';
print '   b  ' . join '  ', 0 .. 9;
print "\na +-------------------------------\n";
for my $a (<1 3 7 9>) {
    print "$a | ";
    for my $b (0..9) {
        my $v = $t[$a][$b];
        if (($a>1 and $a==$b || $b==0) or gcd($a,$b)==3) { print  '  -'          }
        else                                             { printf "%3d", $v // 0 }
    }
    print "\n";
}
print "\n";

#print "\n" and exit;

exit;

#exit unless $m1 == 3 and $m2 == 15;
my $result = join "\n", @res;

my $ref = <<'EOD';
   b  0  1  2  3  4  5  6  7  8  9
a +-------------------------------
1 |   1  4  6  2  4  6  6  2  5  3
3 |   -  5  3  -  0  3  -  6  6  -
7 |   -  0  7  3  2  8  0  -  5  3
9 |   -  5  5  -  5  4  -  4  3  -
EOD

my $ref_big = <<'EOD';
   b  0  1  2  3  4  5  6  7  8  9
a +-------------------------------
1 |   1  4 10  2  6  9  6  3  8  5
3 |   -  6  8  -  0  6  - 10  9  -
7 |   -  0  9  4  4 10  0  -  9  6
9 |   -  5  6  -  5  4  -  4  4  -
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();

#  101 131 151 181 191 313 353 373 383 727 757 787 797 919 929
#  18181 32323 35353 72727 74747 78787 94949 95959
#  1212121 1616161
#  323232323 383838383 727272727 919191919 929292929 979797979 989898989
#  12121212121 14141414141 32323232323 91919191919
#  151515151515151 383838383838383 737373737373737

__END__
3 1 0
3 1 3
3 1 5
3 1 8
3 1 9
3 3 1
3 3 5
3 3 7
3 3 8
3 7 2
3 7 5
3 7 8
3 7 9
3 9 1
3 9 2
5 1 8
5 3 2
5 3 5
5 7 2
5 7 4
5 7 8
5 9 4
5 9 5
7 1 2
7 1 6
9 3 2
9 3 8
9 7 2
9 9 1
9 9 2
9 9 7
9 9 8
11 1 2
11 1 4
11 3 2
11 9 1
15 1 5
15 3 8
15 7 3
17 3 8
17 7 2
17 7 4
17 7 5
17 9 1
17 9 4
17 9 5
19 1 1
21 3 7
21 3 8
21 7 8
23 1 1
23 3 5
23 9 1
25 1 3
27 3 7
27 7 8
27 9 7
31 1 7
33 1 9
37 1 7
39 7 3
43 1 2
45 9 7
51 3 1
55 1 6
57 3 8
63 1 5
65 9 4
71 7 2
77 1 8
77 7 5
81 3 7
83 3 1
89 1 5
95 7 8
99 7 2
109 1 6
133 1 9
139 1 2
143 7 5
143 9 4
145 1 6
149 7 5
161 9 8
163 1 8
195 9 2
209 9 5
219 9 8
225 3 1
229 1 6
237 9 7
243 7 2
245 1 5
277 1 4
315 3 7
317 1 1
357 7 9
479 1 4
513 7 5
515 9 2
537 7 9
551 9 4
561 3 1
567 7 3
583 1 4
583 1 5
627 1 2
849 3 7
857 9 2
961 1 6
1031 1 1
1079 7 5
1295 9 5
1399 1 2
1415 7 5
1479 1 8
1597 1 2
1631 1 4
1677 7 9
1791 1 5
1893 3 7
1969 1 9
1979 1 2
2069 7 4
2075 7 8
2123 1 5
2165 7 8
2177 3 5
2335 1 9
2529 7 3
2883 3 7
3015 3 2
3047 7 8
3057 7 9
3147 3 5
3407 3 2
3503 7 8
3657 1 8
4157 3 5
4233 3 8
4335 3 8
4573 1 8
4859 9 8
4885 1 7
6249 7 5
6343 1 4
6815 7 4
6959 3 2
7233 1 5
7595 7 2
7755 7 9
7809 1 2
8315 1 8
9273 7 2
9591 3 7
9599 3 2
10419 3 1
11393 9 2
11399 3 2
12849 3 7
13221 3 8
13265 7 5
14059 1 2
