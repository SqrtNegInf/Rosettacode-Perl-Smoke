#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Pseudo-random_numbers/Xorshift_star
#c# 2021-01-12 >RC, 2021-01-18 <RC
#p# OK
#n# trizen++

my @res;

use strict;
use warnings;
no warnings 'portable';
use feature 'say';
use Math::AnyNum qw(:overload);

package Xorshift_star {

    sub new {
        my ($class, %opt) = @_;
        bless {state => $opt{seed}}, $class;
    }

    sub next_int {
        my ($self) = @_;
        my $state = $self->{state};
        $state ^= $state >> 12;
        $state ^= $state << 25 & (2**64 - 1);
        $state ^= $state >> 27;
        $self->{state} = $state;
        ($state * 0x2545F4914F6CDD1D) >> 32 & (2**32 - 1);
    }

    sub next_float {
        my ($self) = @_;
        $self->next_int / 2**32;
    }
}

push @res, 'Seed: 1234567, first 5 values:';
my $rng = Xorshift_star->new(seed => 1234567);
push @res, $rng->next_int for 1 .. 5;

my %h;
push @res, "\nSeed: 987654321, values histogram:";
$rng = Xorshift_star->new(seed => 987654321);
$h{int 5 * $rng->next_float}++ for 1 .. 100_000;
push @res, "$_ $h{$_}" for sort keys %h;

say my $result = join "\n", @res;

my $ref = <<'EOD';
Seed: 1234567, first 5 values:
3540625527
2750739987
4037983143
1993361440
3809424708

Seed: 987654321, values histogram:
0 20103
1 19922
2 19937
3 20031
4 20007
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing;
