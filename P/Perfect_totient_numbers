#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Perfect_totient_numbers
#c# 2018-12-06 >RC
#p# OK

use feature 'say';

use utf8;
use ntheory qw(euler_phi);

push @洧램, 0;
push @洧램, euler_phi($_) for 1..10e3;

sub phi_iter { my($p) = @_; return $洧램[$p] + ($p == 2 ? 0 : phi_iter($洧램[$p])) }

for $p (3..10e3) {
    push @perfect, $p if $p == phi_iter($p);
    last if 20 == @perfect;
} 

printf "The first twenty perfect totient numbers:\n%s\n", my $result = join ' ', @perfect;

my $ref = '3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571';

use Test::More;
is($result, $ref);
done_testing();

__END__

=={{header|Perl}}==
{{libheader|ntheory}}
<lang perl>use utf8;
use ntheory qw(euler_phi);

push @洧램, 0;
push @洧램, euler_phi($_) for 1..10e3;

sub phi_iter { my($p) = @_; return $洧램[$p] + ($p == 2 ? 0 : phi_iter($洧램[$p])) }

for $p (3..10e3) {
    push @perfect, $p if $p == phi_iter($p);
    last if 20 == @perfect;
} 

printf "The first twenty perfect totient numbers:\n%s\n", my $result = join ' ', @perfect;</lang>
{{out}}
<pre>The first twenty Perfect totient numbers:
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571</pre>
