#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Perfect_totient_numbers
#c# 2018-12-07 >RC
#p# OK
#n# RC version tweaked by Trizen, but essentially the same

use strict;
use warnings;
use feature 'say';
my $result;

use ntheory qw(euler_phi);

sub phi_iter { my($p) = @_; return euler_phi($p) + ($p == 2 ? 0 : phi_iter(euler_phi($p))) }

my @perfect;
my $p = 1;
do {
    $p++;
    push @perfect, $p if $p == phi_iter($p);
} until 20 == @perfect;

#my @perfect;
#for (my $p = 2; @perfect < 20 ; ++$p) {
#    push @perfect, $p if $p == phi_iter($p);
#}

printf "The first twenty perfect totient numbers:\n%s\n", $result = join ' ', @perfect;

my $ref = '3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571';

use Test::More;
is($result, $ref);
done_testing;
