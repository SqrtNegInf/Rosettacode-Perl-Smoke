#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Pentomino_tiling
#c# 2020-12-06 <RC
#p# OK

srand 123456;

use strict;
use warnings;
use feature 'say';

my $ref = <<'EOD';
FIIIIILV
FFFLLLLV
NFXUUVVV
NXXXUYPP
NNXUUYPP
WNZZYYTP
WW Z YT 
 WWZZTTT
EOD

my $size = shift // 8;

sub rotate {
  local $_ = shift;
  my $ans = '';
  $ans .= "\n" while s/.$/$ans .= $&; ''/gem;
  $ans;
}

sub topattern {
  local $_ = shift;
  s/.+/ $& . ' ' x ($size - length $&)/ge;
  s/^\s+|\s+\z//g;      # on RC
  #s/^\s+|\s+$//g;      # also works
  #s/\A\s+|\s+$//g;     #     "
  #s/\A\s+|\s+\z//g;    #     " 
  #s/\A\s+|\s+\Z//g;    #     " 
  [ tr/ \nA-Z/.. /r, lc tr/ \n/\0/r, substr $_, 0, 1 ]; # pattern, xor-update
}

my %all;
@all{ 
 " FF\nFF \n F \n",
 "IIIII\n",
 "LLLL\nL   \n",
 "NNN \n  NN\n",
 "PPP\nPP \n",
 "TTT\n T \n T \n",
 "UUU\nU U\n",
 "VVV\nV  \nV  \n",
 "WW \n WW\n  W\n",
 " X \nXXX\n X \n",
 "YYYY\n Y  \n",
 "ZZ \n Z \n ZZ\n",
} = ();
@all{map rotate($_), keys %all} = () for 1 .. 3;  # all four rotations
@all{map s/.+/reverse $&/ger, sort keys %all} = ();    # mirror
my @all = map topattern($_), sort keys %all;
my $grid = ( ' ' x $size . "\n" ) x $size;
my %used;

my $result = find( $grid );

sub find {
  my $grid = shift;
  #%used >= 12 and exit not print $grid;
  if (%used >= 12) {
    print $grid; 
    use Test::More;
    is ($grid, $ref);
    done_testing();
    exit
  }
  for ( grep ! $used{ $_->[2] }, @all ) {
    my ($pattern, $pentomino, $letter) = @$_;
    local $used{$letter} = 1;
    $grid =~ /^[^ ]*\K$pattern/s and find( $grid ^ "\0" x $-[0] . $pentomino );
  }
}
