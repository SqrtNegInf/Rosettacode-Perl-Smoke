#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Prime_triangle
#t# inprogress
#c# 2022-04-xx >RC
#p# OK

use Data::Printer;          # debug only
use Time::HiRes qw(sleep);  # debug only

my @res;

use strict;
use warnings;
use feature 'say';

use ntheory 'is_prime';
use Algorithm::Combinatorics qw(permutations);

say '1 2';

my @count = (0, 0, 1);

for my $n (3..6) { # ..17
    my @even = grep { 0 == $_ % 2 } 2..$n-1;
    my @odd  = grep { 1 == $_ % 2 } 3..$n-1;
    for my $e (@even) {
        my $e = permutations 1..$e;
        use DDP; p @{$e};
    }
}

__END__

my @count = (0, 0, 1);

say '1 2';
 
for my $n (3..6) { # ..17
    my @even = grep { 0 == $_ % 2 } 2..$n-1;
    my @odd  = grep { 1 == $_ % 2 } 3..$n-1;
    for my $e (@even) {
        my @e = permutations $e;
        next if $e[0] == 8 or $e[0] == 14;
        my $nope = 0;
        for my $o (@odd) {
            my @o = permutations $o;
            next unless is_prime ($e[0] + $o[0]);
            my @list;
            #for (@list = (flat (roundrobin(@e, @o)), $n)).rotor(2 => -1) { # ???
                $nope++ and last unless is_prime(sum @$_);
            }
            unless $nope {
                say '1 ' . join ' ', @list unless $count[$n];
                #$lock.protect({ @count[$n]++ }); # ???
            }
            $nope = 0;
        }
    }
}


shift @count;
shift @count;
say "\n" . my $result = join ' ',  @count; # [2..*].join: ' ';

#say my $result = join "\n", @res;

my $ref = <<'END';
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();

__END__

=={{header|Perl}}==
{{trans|Raku}}
{{libheader|ntheory}}
<lang perl>
</lang>
{{out}}
<pre>1 2
1 2 3
1 2 3 4
1 4 3 2 5
1 4 3 2 5 6
1 4 3 2 5 6 7
1 2 3 4 7 6 5 8
1 2 3 4 7 6 5 8 9
1 2 3 4 7 6 5 8 9 10
1 6 5 8 3 10 7 4 9 2 11
1 6 5 8 3 10 7 4 9 2 11 12
1 4 3 2 5 8 9 10 7 12 11 6 13
1 4 3 2 11 8 9 10 13 6 7 12 5 14
1 2 3 8 5 12 11 6 7 10 13 4 9 14 15
1 2 3 8 5 12 11 6 7 10 13 4 9 14 15 16
1 2 9 4 7 10 13 6 5 14 3 16 15 8 11 12 17

1 1 1 1 1 2 4 7 24 80 216 648 1304 3392 13808 59448</pre>
