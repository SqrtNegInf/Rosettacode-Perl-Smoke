#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Prime_triangle
#c# 2022-05-18 >RC
#p# OK
#n# limit testing for speed

my @res;

use strict;
use warnings;
use feature 'say';

use ntheory 'is_prime';
use List::MoreUtils qw(slideatatime);
use List::AllUtils qw(zip sum);
use Algorithm::Combinatorics qw(permutations);

#say '1 2';

my @count = (0, 0, 1);

for my $n (3..14) { # ..17
    my @even_nums = grep { 0 == $_ % 2 } 2..$n-1;
    my @odd_nums  = grep { 1 == $_ % 2 } 3..$n-1;
    for my $e (permutations [@even_nums]) {
        next if $$e[0] == 8 or $$e[0] == 14;
        my $nope = 0;
        for my $o (permutations [@odd_nums]) {
            next if defined $$o[0] and ! is_prime($$e[0] + $$o[0]);
            my @list = zip @$e, @$o;
            pop @list if ! defined $list[-1];
            push @list, $n;
            my $it = slideatatime(1, 2, @list);
            while ( my @rr = $it->() ) {
                last unless defined $rr[1];
                $nope++ and last unless is_prime($rr[0]+$rr[1]);
            }
            unless ($nope) {
                #say '1 ' . join ' ', @list unless $count[$n];
                $count[$n]++;
            }
            $nope = 0;
        }
    }
}

say my $result = join ' ', @count[2..$#count];
my $ref = '1 1 1 1 1 2 4 7 24 80 216 648 1304';

use Test::More;
is($result, $ref);
done_testing();
