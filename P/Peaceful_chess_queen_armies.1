#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Peaceful_chess_queen_armies
#c# 2019-04-02 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

my $soln;

my $m = shift // 4;
my $n = shift // 5;
my %seen;
my $gaps = join '|', qr/-*/, map qr/.{$_}(?:-.{$_})*/s, $n-1, $n, $n+1;
my $attack = qr/(\w)(?:$gaps)(?!\1)\w/;

place( scalar ('-' x $n . "\n") x $n );
say my $result = $soln ? "Solution to $m $n\n\n$soln" : "No solution to $m $n";

sub place
  {
  local $_ = shift;
  $seen{$_}++ || /$attack/ and return; # previously or attack
  (my $have = tr/WB//) < $m * 2 or $soln = $_ and return;
  #(my $have = tr/WB//) < $m * 2 or exit !print "Solution to $m $n\n\n$_";
  place( s/-\G/ qw(W B)[$have % 2] /er ) while /-/g; # place next queen
  }

my $ref = <<'EOD';
Solution to 4 5

-B-B-
B----
--W-W
B----
--W-W
EOD

use Test::More;
is ($result, $ref);
done_testing();
