#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Pancake_numbers
#c# 2021-01-13 >RC
#p# OK

use strict;
use warnings;
use feature 'say';

sub pancake {
    my($n) = @_;
    my ($gap, $sum, $adj) = (2, 2, -1);
    while ($sum < $n) { $sum += $gap = $gap * 2 - 1 and $adj++ }
    $n + $adj;
}

my $out;
$out .= sprintf "p(%2d) = %2d ", $_, pancake $_ for 1..20;
say my $result = $out =~ s/.{1,55}\K /\n/gr;

my $ref = <<'END';
p( 1) =  0 p( 2) =  1 p( 3) =  3 p( 4) =  4 p( 5) =  5
p( 6) =  7 p( 7) =  8 p( 8) =  9 p( 9) = 10 p(10) = 11
p(11) = 13 p(12) = 14 p(13) = 15 p(14) = 16 p(15) = 17
p(16) = 18 p(17) = 19 p(18) = 20 p(19) = 21 p(20) = 23
END

use Test::More;
is($result, $ref);
done_testing();

__END__

sub pancake {
    my ($n) = @_;
    my @goalStack = (my $numStacks = 1)..n ;  # '$ =' ?
    my %newStacks = my %stacks = @goalStack, 0 ;
    for my $k (1..1000) {
        my %nextStacks = {}; 
        for %newStacks.keysÂ».split(' ') X 2..n -> (@arr, \pos) {
            given flat @arr[0..^pos].reverse, @arr[pos..*-1] {
                %nextStacks{$_.Str} = k unless %stacks{$_.Str}:exists
            }
        }
        %stacks ,= (%newStacks = %nextStacks);
        my $perms    = %stacks.elems;
        my %inverted = %stacks.antipairs;      # this causes loss on examples 
        my $max_key  = %inverted.keys.max;     # but not critical for our purpose
        $perms == numStacks ? return $inverted{$max_key}, $k-1 : $numStacks=$perms
   }
   '', 0
}
 
say "The maximum number of flips to sort a given number of elements is:";
for my $j (1..9) { { say "pancake($j) = $_[1] example: $_[0]", pancake($j) }
