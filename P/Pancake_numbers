#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Pancake_numbers
#c# 2021-01-13 >RC, 2021-02-05 >RC
#p# OK

my @res;

use strict;
use warnings;
use feature 'say';

sub pancake {
    my($n) = @_;
    my ($gap, $sum, $adj) = (2, 2, -1);
    while ($sum < $n) { $sum += $gap = $gap * 2 - 1 and $adj++ }
    $n + $adj;
}

my $out;
$out .= sprintf "p(%2d) = %2d ", $_, pancake $_ for 1..20;
say my $result1 = $out =~ s/.{1,55}\K /\n/gr;

# Maximum number of flips plus examples using exhaustive search
sub pancake2 {
    my ($n) = @_;
    my $numStacks = 1;
    my @goalStack = 1 .. $n;
    my %newStacks = my %stacks = (join(' ',@goalStack), 0);
    for my $k (1..15) { # why 1000 if this suffices?
        my %nextStacks;
        for my $pos (2..$n) {
            for my $key (keys %newStacks) {
                my @arr = split ' ', $key;
                my $cakes = join ' ', (reverse @arr[0..$pos-1]), @arr[$pos..$#arr];
                $nextStacks{$cakes} = $k unless $stacks{$cakes};
            }
        }
        %stacks = (%stacks, (%newStacks = %nextStacks));
        my $perms    = scalar %stacks;
        my %inverted = reverse %stacks;
        return $k-1, $inverted{(sort keys %inverted)[-1]} if $perms == $numStacks;
        $numStacks = $perms;
   }
   die 'Should never get here';
}
 
#say "\nThe maximum number of flips to sort a given number of elements is:";
for my $n (1..9) { 
    my ($a,$b) = pancake2($n); 
#    say "pancake($n) = $a example: $b";
    push @res, "pancake($n) = $a example: " . join ' ', sort split ' ', $b;
}

say my $result2 = join "\n", @res;

my $ref1 = <<'END';
p( 1) =  0 p( 2) =  1 p( 3) =  3 p( 4) =  4 p( 5) =  5
p( 6) =  7 p( 7) =  8 p( 8) =  9 p( 9) = 10 p(10) = 11
p(11) = 13 p(12) = 14 p(13) = 15 p(14) = 16 p(15) = 17
p(16) = 18 p(17) = 19 p(18) = 20 p(19) = 21 p(20) = 23
END

my $ref2 = <<'END';
pancake(1) = 0 example: 1
pancake(2) = 1 example: 1 2
pancake(3) = 3 example: 1 2 3
pancake(4) = 4 example: 1 2 3 4
pancake(5) = 5 example: 1 2 3 4 5
pancake(6) = 7 example: 1 2 3 4 5 6
pancake(7) = 8 example: 1 2 3 4 5 6 7
pancake(8) = 9 example: 1 2 3 4 5 6 7 8
pancake(9) = 10 example: 1 2 3 4 5 6 7 8 9
END

use Test::More;
is($result1, $ref1);
chomp $ref2;
is($result2, $ref2);
done_testing;
