#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Pig_the_dice_game/Player
#c# 2019-01-28 >RC
#p# OK

srand 123456;

use feature 'say';
use warnings;
use strict 'vars';

my $result;

#my $out = open("run/pig_dice_player.$ext", :w);

my $games = $ARGV[0] || 100;
 
use constant DIE  => 1 .. 6;
use constant GOAL => 100;

say $games; 

{
package Player;

    my $score = 0;
    my $ante;
    my $rolls;
    my $strategy  = sub { False }; # default, always roll again
 
    sub turn {
        my $done_turn = 0;
        $rolls = 0;
        $ante  = 0;
        repeat {
            my $v = rand DIE;
            $rolls++;
            if ($v == 1) {
                $ante = 0;
                $done_turn = 1;
            } else {
                $ante += $_;
            }
            $done_turn = 1 if $score + $ante >= GOAL or &$strategy();
        } until $done_turn;
        $score += $ante;
    }
}
 
package Main;

my @players;
 
# default, go-for-broke, always roll again
$players[0] = Player->new;

__END__
 
# try to roll 5 times but no more per turn
@players[1] = player.new( strategy => sub { @players[1].rolls >= 5 } );
 
# try to accumulate at least 20 points per turn
@players[2] = player.new( strategy => sub { @players[2].ante > 20 } );
 
# random but 90% chance of rolling again
@players[3] = player.new( strategy => sub { 1.rand < .1 } );
 
# random but more conservative as approaches goal
@players[4] = player.new( strategy => sub { 1.rand < ( GOAL - @players[4].score ) * .6 / GOAL } );
 
my @wins = 0 xx @players;
 
for ^ $games {
    my $player = -1;
    repeat {
        $player++;
        @players[$player % @players].turn;
    } until @players[$player % @players].score >= GOAL;
 
    @wins[$player % @players]++;
 
    $out.say: join "\t", @players>>.score;
    @players[$_].score = 0 for ^@players; # reset scores for next game
}
 
$out.say: "\nSCORES: for $games games";
$out.say: join "\t", @wins;
$out.close;

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre style="height:35ex"></pre>
