#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Polynomial_synthetic_division
#c# 2018-10-10 >RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

sub synthetic_division {
    my($numerator,$denominator) = @_;
    my @result = @$numerator;
    my $end    = @$denominator-1;

    for my $i (0 .. @$numerator-($end+1)) {
        next unless $result[$i];
        $result[$i]    /= @$denominator[0];
        $result[$i+$_] -= @$denominator[$_] * $result[$i] for 1 .. $end;
    }
 
    return join(' ', @result[0 .. @result-($end+1)]), join(' ', @result[-$end .. -1]);
}

sub poly_divide {
    our(@n,@d);
    *n = shift; *d = shift;
    my($quotient,$remainder)= synthetic_division( \@n, \@d );
    "[@n] / [@d] = [$quotient], remainder [$remainder]\n";
}
 
$result .= poly_divide( [1, -12, 0, -42], [1, -3] );
$result .= poly_divide( [1, 0, 0, 0, -2], [1, 1, 1, 1] );

say $result;

my $ref = <<'EOD';
[1 -12 0 -42] / [1 -3] = [1 -9 -27], remainder [-123]
[1 0 0 0 -2] / [1 1 1 1] = [1 -1], remainder [0 0 -1]
EOD

use Test::More;
is($result, $ref);
done_testing();
