#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Proper_divisors
#c# 2018-08-20 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

# Using a module for divisors[edit]
# Library: ntheory
use ntheory qw/divisors/;
sub proper_divisors {
  my $n = shift;
  # Like Pari/GP, divisors(0) = (0,1) and divisors(1) = ()
  return 1 if $n == 0;
  my @d = divisors($n);
  pop @d;  # divisors are in sorted order, so last entry is the input
  @d;
}
$result .= "$_: ". join(" ", proper_divisors($_)) . "\n" for 1..10;
# 1. For the max, we can do a traditional loop.
my($max,$ind) = (0,0);
for (1..20000) {
  my $nd = scalar proper_divisors($_);
 ($max,$ind) = ($nd,$_) if $nd > $max;
}
$result .=  "$max $ind\n";
# 2. Or we can use List::Util's max with decoration (this exploits its implementation)
{
  use List::Util qw/max/;
  no warnings 'numeric';
  $result .= max(map { scalar(proper_divisors($_)) . " $_" } 1..20000) . "\n";
}

say $result;
my $ref = <<'EOD';
1: 
2: 1
3: 1
4: 1 2
5: 1
6: 1 2 3
7: 1
8: 1 2 4
9: 1 3
10: 1 2 5
79 15120
79 18480
EOD
# Note that the first code will choose the first max, while the second chooses the last.

use Test::More;
is ($result, $ref);
done_testing();
