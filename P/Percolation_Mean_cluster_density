#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/P/Percolation/Mean_cluster_density
#c# 2019-03-16 >RC
#p# OK

use strict;
use warnings;
use feature 'say';
my @res;

srand 123456;

my(%D,@perc,$i);
my $fill = 'x';
$D{$_} = $i++ for <DeadEnd Up Right Down Left>;

sub deq { defined $_[0] && $_[0] eq $_[1] }

sub perctest { 
    my($grid) = @_;
    generate($grid);
    my $block = 1;
    for my $y (0..$grid-1) {
        for my $x (0..$grid-1) {
            fill($x, $y, $block++) if $perc[$y][$x] eq $fill
        }
    }
    ($block - 1) / $grid**2;
}
 
sub generate {
    my($grid) = @_;
    for my $y (0..$grid-1) {
        for my $x (0..$grid-1) {
            $perc[$y][$x] = rand() < .5 ? '.' : $fill;
        }
    }
}

sub fill {
    my($x, $y, $block) = @_;
    $perc[$y][$x] = $block;
    my @stack;
    while (1) {
        if (my $dir = direction( $x, $y )) {
            push @stack, [$x, $y];
            ($x,$y) = move($dir, $x, $y, $block)
        } else {
            return unless @stack;
            ($x,$y) = @{pop @stack};
        }
    }
}

sub direction {
    my($x, $y) = @_;
    return $D{Down}  if deq($perc[$y+1][$x  ], $fill);
    return $D{Left}  if deq($perc[$y  ][$x-1], $fill);
    return $D{Right} if deq($perc[$y  ][$x+1], $fill);
    return $D{Up}    if deq($perc[$y-1][$x  ], $fill);
    return $D{DeadEnd};
}
 
sub move {
    my($dir,$x,$y,$block) = @_;
    $perc[--$y][   $x] = $block if $dir == $D{Up};    
    $perc[++$y][   $x] = $block if $dir == $D{Down};  
    $perc[  $y][ --$x] = $block if $dir == $D{Left};  
    $perc[  $y][ ++$x] = $block if $dir == $D{Right}; 
    $x, $y
}
 
my $K = perctest(15);
for my $row (@perc) {
    printf "%3s", $_ for @$row;
    print "\n";
} 

push @res, sprintf  "𝘱 = 0.5, 𝘕 = 15, 𝘒 = %.4f", $K;
 
my $trials = 5;
for my $N (10, 30, 100, 300, 1000) {
    my $total = 0;
    $total += perctest($N) for 1..$trials;
    push @res, sprintf "𝘱 = 0.5, trials = $trials, 𝘕 = %4d, 𝘒 = %.4f", $N, $total / $trials;
}

say for @res;

my $result = join "\n", @res;

my $ref = <<'END';
𝘱 = 0.5, 𝘕 = 15, 𝘒 = 0.0889
𝘱 = 0.5, trials = 5, 𝘕 =   10, 𝘒 = 0.0980
𝘱 = 0.5, trials = 5, 𝘕 =   30, 𝘒 = 0.0738
𝘱 = 0.5, trials = 5, 𝘕 =  100, 𝘒 = 0.0670
𝘱 = 0.5, trials = 5, 𝘕 =  300, 𝘒 = 0.0660
𝘱 = 0.5, trials = 5, 𝘕 = 1000, 𝘒 = 0.0661
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
