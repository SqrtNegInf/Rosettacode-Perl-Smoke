#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/P/Percolation/Mean_cluster_density
#c# 2019-01-RC >RC
#p# OK

use feature 'say';

srand 123456;

$fill = 'x';
 
$D{DeadEnd} = 0;
$D{Up}      = 1;
$D{Right}   = 2;
$D{Down}    = 3;
$D{Left}    = 4;

sub deq { defined $_[0] && $_[0] eq $_[1] }

sub perctest { 
    my($grid) = @_;
    generate($grid);
    my $block = 1;
    for my $y (0..$grid-1) {
        for my $x (0..$grid-1) {
            fill($x, $y, $block++) if $perc[$y][$x] eq $fill
        }
    }
    ($block - 1) / $grid**2;
}
 
sub generate {
    my($grid) = @_;
    for my $y (0..$grid-1) {
        for my $x (0..$grid-1) {
            $perc[$y][$x] = rand() < .5 ? '.' : $fill;
        }
    }
}

sub fill {
    my($x, $y, $block) = @_;
    $perc[$y][$x] = $block;
    my @stack;
    while (1) {
        if (my $dir = direction( $x, $y )) {
            push @stack, [$x, $y];
            ($x,$y) = move($dir, $x, $y, $block)
        } else {
            return unless @stack;
            ($x,$y) = @{pop @stack};
        }
    }
}

    sub direction {
        my($xx, $yy) = @_;
        return $D{Down}  if deq($perc[$yy+1][$xx  ], $fill);
        return $D{Left}  if deq($perc[$yy  ][$xx-1], $fill);
        return $D{Right} if deq($perc[$yy  ][$xx+1], $fill);
        return $D{Up}    if deq($perc[$yy-1][$xx  ], $fill);
        return $D{DeadEnd};
    }
 
    sub move {
        my($dir,$x,$y,$block) = @_;
        if ($dir == $D{Up}   ) { $perc[--$y][   $x] = $block }
        if ($dir == $D{Down} ) { $perc[++$y][   $x] = $block }
        if ($dir == $D{Left} ) { $perc[$y  ][ --$x] = $block }
        if ($dir == $D{Right}) { $perc[$y  ][ ++$x] = $block }
        ($x, $y)
    }
 
my $K = perctest(15);
for my $row (@perc) {
    printf "%3s", $_ for @$row;
    print "\n";
} 

push @res, sprintf  "𝘱 = 0.5, 𝘕 = 15, 𝘒 = %.4f", $K;
 
$trials = 20;
for $N (10, 30, 100, 300, 1000) {
    my $total = 0;
    $total += perctest($N) for 1..$trials;
    push @res, sprintf "𝘱 = 0.5, trials = $trials, 𝘕 = %4d, 𝘒 = %.4f", $N, $total / $trials;
}

say for @res;

my $result = join "\n", @res;
exit;

my $ref = <<'END';
𝘱 = 0.5, 𝘕 = 15, 𝘒 = 0.0889
𝘱 = 0.5, trials = 5, 𝘕 =   10, 𝘒 = 0.0980
𝘱 = 0.5, trials = 5, 𝘕 =   30, 𝘒 = 0.0738
𝘱 = 0.5, trials = 5, 𝘕 =  100, 𝘒 = 0.0670
𝘱 = 0.5, trials = 5, 𝘕 =  300, 𝘒 = 0.0660
𝘱 = 0.5, trials = 5, 𝘕 = 1000, 𝘒 = 0.0661
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre>  1  1  1  .  .  .  .  2  2  2  .  .  .  .  .
  .  1  .  1  1  1  .  2  2  .  2  2  2  .  3
  .  1  .  .  1  .  2  2  2  2  2  2  .  .  3
  1  1  1  .  1  .  2  2  .  .  .  .  4  4  .
  1  1  1  .  1  .  .  2  .  .  .  .  .  .  1
  1  1  1  1  1  .  .  2  .  .  5  .  6  .  .
  1  1  .  .  1  1  .  2  .  7  .  .  .  1  1
  1  .  .  .  1  1  .  2  2  .  .  8  8  .  1
  .  9  9  9  .  1  .  .  2  2  .  .  .  1  1
  .  .  9  9  .  . 10  .  .  . 11  . 12  .  .
  .  9  9  . 13 13  . 13  . 14  .  . 12  .  .
 15  .  . 13 13 13 13 13  .  .  . 16  . 17  .
 15  .  . 13  . 13  . 13 13  .  . 16 16  .  .
  . 18  .  . 13 13 13 13  .  .  .  .  . 19 19
  1  .  1  .  . 13  .  .  .  . 20  . 19 19  .
𝘱 = 0.5, 𝘕 = 15, 𝘒 = 0.0889

𝘱 = 0.5, trials = 5, 𝘕 =   10, 𝘒 = 0.0980
𝘱 = 0.5, trials = 5, 𝘕 =   30, 𝘒 = 0.0738
𝘱 = 0.5, trials = 5, 𝘕 =  100, 𝘒 = 0.0670
𝘱 = 0.5, trials = 5, 𝘕 =  300, 𝘒 = 0.0660
𝘱 = 0.5, trials = 5, 𝘕 = 1000, 𝘒 = 0.0661</pre>
[https://github.com/SqrtNegInf/Rosettacode-Perl5-Smoke/blob/master/ref/XXX XXX]
