#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Permutations/Rank_of_a_permutation
#c# 2018-08-21 <RC
#p# OK
#n# 2022-07-18 use 'srand' from 'ntheory' module for testing

my @res;

use strict;
use warnings;
use feature 'say';

use ntheory <numtoperm permtonum factorial randperm urandomm :rand>;

srand 123456;

my $n = 3;
push @res, "Iterate Lexicographic rank/unrank of $n objects";
for my $k (0 .. factorial($n)-1) {
    my @perm = numtoperm($n, $k);
    my $rank = permtonum(\@perm);
    die unless $rank == $k;
    push @res, sprintf "%2d --> [@perm] --> %2d", $k, $rank;
}
push @res, 'Four 12-object random permutations using ranks';
push @res, join(' ', numtoperm(12,urandomm(factorial(12)))) for 1..4;
push @res, 'Four 12-object random permutations using randperm';
push @res, join(' ', randperm(12)) for 1..4;
push @res, 'Four 4-object random permutations of 100k objects using randperm';
push @res, join(' ', randperm(100000,4)) for 1..4;

say my $result = join "\n", @res;

my $ref = <<'END';
Iterate Lexicographic rank/unrank of 3 objects
 0 --> [0 1 2] -->  0
 1 --> [0 2 1] -->  1
 2 --> [1 0 2] -->  2
 3 --> [1 2 0] -->  3
 4 --> [2 0 1] -->  4
 5 --> [2 1 0] -->  5
Four 12-object random permutations using ranks
6 7 9 8 1 3 10 11 2 5 0 4
1 6 10 3 2 5 4 11 0 7 9 8
7 11 4 8 1 6 10 2 0 5 9 3
5 6 10 2 8 0 11 9 4 1 7 3
Four 12-object random permutations using randperm
8 10 1 5 2 0 11 9 4 6 7 3
1 2 10 9 3 5 6 4 8 7 11 0
11 2 4 10 7 8 0 3 6 5 9 1
8 4 2 0 11 7 6 9 3 5 1 10
Four 4-object random permutations of 100k objects using randperm
29291 10002 67551 5346
87338 59858 20565 64085
66450 22014 99883 47205
68961 14988 98363 14877
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
