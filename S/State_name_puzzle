#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/State_name_puzzle
#c# 2018-08-13 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my @res;
my $result;
 
sub uniq {
    my %uniq;
    undef @uniq{ @_ };
    return keys %uniq
}

 
sub puzzle {
    my @states = uniq(@_);

    my %pairs;
    for my $state1 (@states) {
        for my $state2 (@states) {
            next if $state1 le $state2;
            my $both = join q(),
                       grep ' ' ne $_,
                       sort split //,
                       lc "$state1$state2";
            push @{ $pairs{$both} }, [ $state1, $state2 ];
        }
    }

    for my $pair (keys %pairs) {
        next if 2 > @{ $pairs{$pair} };

        for my $pair1 (@{ $pairs{$pair} }) {
            for my $pair2 (@{ $pairs{$pair} }) {
                next if 4 > uniq(@$pair1, @$pair2)
                     or $pair1->[0] lt $pair2->[0];

                push @res, join ' = ', map { join ' + ', @$_ } $pair1, $pair2;
            }
        }
    }
}

my @states = ( 'Alabama', 'Alaska', 'Arizona', 'Arkansas',
               'California', 'Colorado', 'Connecticut', 'Delaware',
               'Florida', 'Georgia', 'Hawaii',
               'Idaho', 'Illinois', 'Indiana', 'Iowa',
               'Kansas', 'Kentucky', 'Louisiana',
               'Maine', 'Maryland', 'Massachusetts', 'Michigan',
               'Minnesota', 'Mississippi', 'Missouri', 'Montana',
               'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey',
               'New Mexico', 'New York', 'North Carolina', 'North Dakota',
               'Ohio', 'Oklahoma', 'Oregon',
               'Pennsylvania', 'Rhode Island',
               'South Carolina', 'South Dakota', 'Tennessee', 'Texas',
               'Utah', 'Vermont', 'Virginia',
               'Washington', 'West Virginia', 'Wisconsin', 'Wyoming',
             );

my @fictious = ( 'New Kory', 'Wen Kory', 'York New', 'Kory New', 'New Kory' );

push @res, (scalar @states). ' states:';
puzzle(@states);
$result = join "\n", sort @res;
$result .= "\n";

@res = @states + @fictious. ' states:';
puzzle(@states, @fictious);

say $result .= join "\n", sort @res;

my $ref = <<'EOD';
50 states:
South Dakota + North Carolina = South Carolina + North Dakota
55 states:
South Dakota + North Carolina = South Carolina + North Dakota
Wen Kory + Kory New = New York + New Kory
Wen Kory + New Kory = New York + Kory New
Wen Kory + New York = New Kory + Kory New
York New + Kory New = New York + New Kory
York New + Kory New = Wen Kory + New Kory
York New + Kory New = Wen Kory + New York
York New + New Kory = New York + Kory New
York New + New Kory = Wen Kory + Kory New
York New + New Kory = Wen Kory + New York
York New + New York = New Kory + Kory New
York New + New York = Wen Kory + Kory New
York New + New York = Wen Kory + New Kory
York New + Wen Kory = New Kory + Kory New
York New + Wen Kory = New York + Kory New
York New + Wen Kory = New York + New Kory
EOD

use Test::More;
chop $ref;
is ($result, $ref);
done_testing;
