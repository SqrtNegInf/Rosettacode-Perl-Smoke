#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sorting_Algorithms/Circle_Sort
#c# 2018-09-22 >RC
#p# OK
#n# bi-valent comparisons easily fooled (e.g. <-1 -1a -3>), this version just does numerics
#n# could get fancy and pass in a coderef? maybe someday...

use feature 'say';

# The given algorithm can be simplified in several ways. There's no need to compute the midpoint, 
# since the hi/lo will end up there. The extra swap conditional can be eliminated by incrementing 
# hi at the correct moment inside the loop. There's no need to
# pass accumulated swaps down the call stack.
# This does generic comparisons, so it works on any ordered type, including numbers or strings.

sub circlesort { 
    our @x; local *x = shift;
    my($beg,$end) = @_;

    my $swaps = 0;
    if ($beg < $end) {
        my $lo = $beg; 
        my $hi = $end;
        while ($lo < $hi) {
            #if (($x[$lo] =~ /[^.\-\d]/ or $x[$hi] =~ /[^.\-\d]/) ? $x[$lo] gt $x[$hi] : $x[$lo] > $x[$hi]) { # num vs str ?
            if ($x[$lo] > $x[$hi]) {
                @x[$lo,$hi] = @x[$hi,$lo];
                ++$swaps;
            }
            ++$hi if --$hi == ++$lo
        }
        $swaps += circlesort(\@x, $beg, $hi);
        $swaps += circlesort(\@x, $lo, $end);
    }
    $swaps;
}
 
my @res1 = <16 35 -64 -29 46 36 -1 -99 20 100 59 26 76 -78 39 85 -7 -81 25 88>;
while (circlesort(\@res1, 0, $#res1)) { say join ' ', @res1 }

#my @res2 = qw<The quick brown fox jumps over the lazy dog.>;
#while (circlesort(\@res2, 0, $#res2)) { say join ' ', @res2 }

say $result1 = join ' ', @res1;
#say $result2 = join ' ', @res2;

use Test::More;
is ($result1,'-99 -81 -78 -64 -29 -7 -1 16 20 25 26 35 36 39 46 59 76 85 88 100');
#is ($result2,'The brown dog. fox jumps lazy over quick the');
done_testing();
