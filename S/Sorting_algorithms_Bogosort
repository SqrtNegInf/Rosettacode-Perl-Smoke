#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sorting_algorithms/Bogosort
#c# 2018-08-15 <RC
#p# OK
#n# super slow as list size increases

use strict;
use warnings;
use feature 'say';

use List::Util qw(shuffle);

sub bogosort
 {my @l = @_;
  @l = shuffle(@l) until in_order(@l);
  return @l;}

sub in_order
 {my $last = shift;
  foreach (@_)
     {$_ >= $last or return 0;
      $last = $_;}
  return 1;}

use Test::More;
say 'input: ' . join ' ', my @a = map (int rand 100), 0 .. 5;
is_deeply([bogosort(@a)], [sort { $a <=> $b } @a]);
done_testing();
