#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sort_using_a_custom_comparator
#c# 2018-08-15 <RC, 2021-02-28 >RC
#p# OK
#n# the Schwartzian was different, but don't think that was intentional (changed so all the results same)

my $result;

use strict;
use warnings;
use feature 'say';

my @strings = qw/Here are some sample strings to be sorted/;

# with a subroutine:
sub mycmp { length $b <=> length $a || lc $a cmp lc $b }
my @sorted = sort mycmp @strings;
$result .= "@sorted\n";

# inline:
@sorted = sort {length $b <=> length $a || lc $a cmp lc $b} @strings;
$result .= "@sorted\n";

# for large inputs, can be faster with a 'Schwartzian' transform:
@sorted = map  { $_->[0] }
             sort { $b->[1] <=> $a->[1] || $a->[2] cmp $b->[2] }
             map  { [ $_, length, lc ] }
             @strings;
$result .= "@sorted\n";

say $result; 

my $ref = <<'EOD';
strings sample sorted Here some are be to
strings sample sorted Here some are be to
strings sample sorted Here some are be to
EOD

use Test::More;
is ($result, $ref);
done_testing();
