#!/usr/local/bin/perl
#u# https://www.rosettacode.org/wiki/Sub-unit_squares
#c# 2023-12-17 <RC
#p# OK
#n# trizen++, much faster

my @res;

use v5.36;

use bigint try => 'GMP';
use ntheory qw(:all);

sub difference_of_two_squares_solutions ($n) {

    my @solutions;
    my $limit = sqrtint($n);

    foreach my $divisor (divisors($n)) {

        last if $divisor > $limit;

        my $p = $divisor;
        my $q = $n / $divisor;

        ($p + $q) % 2 == 0 or next;

        my $x = ($q + $p) >> 1;
        my $y = ($q - $p) >> 1;

        unshift @solutions, [$x, $y];
    }

    return @solutions;
}

my $N    = 20;         # how many terms to compute
my %seen = (1 => 1);

my $index = 1;
push @res, $index . ': ' . 1;

OUTER: for (my $n = 1 ; ; ++$n) {

    my $r = (10**$n - 1) / 9;

    foreach my $xy (difference_of_two_squares_solutions($r)) {

        my $xsqr = $xy->[0]**2;
        my @d    = todigits($xsqr);

        next if $d[0] == 1;
        next if !vecall { $_ } @d;
        next if !is_square(fromdigits([map { $_ - 1 } @d]));

        if (!$seen{$xsqr}++) {
            push @res, ++$index . ': ' . $xsqr;
            last OUTER if ($index >= $N);
        }
    }
}

say my $result = join "\n", @res;

my $ref = <<'EOD';
1: 1
2: 36
3: 3136
4: 24336
5: 5973136
6: 71526293136
7: 318723477136
8: 264779654424693136
9: 24987377153764853136
10: 31872399155963477136
11: 58396845218255516736
12: 517177921565478376336
13: 252815272791521979771662766736
14: 518364744896318875336864648336
15: 554692513628187865132829886736
16: 658424734191428581711475835136
17: 672475429414871757619952152336
18: 694688876763154697414122245136
19: 711197579293752874333735845136
20: 975321699545235187287523246336
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
