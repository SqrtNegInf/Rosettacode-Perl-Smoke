#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/System_time
#c# 2018-08-11 <RC
#p# OK
#n# better attribution for output; never really figured out testing for this...

use strict;
use warnings;
use feature 'say';

# simple localtime use in scalar context
say 'A: ' . scalar localtime;

# localtime use in array context
my($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime;
printf("B: %04d-%02d-%02d %02d:%02d:%02d\n", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);

# localtime use in array context with POSIX strftime
use POSIX qw(strftime);
say 'C: ' . strftime "%a %b %e %H:%M:%S %Y", localtime;

# using DateTime
use DateTime;
my $dt = DateTime->now;
my $d = $dt->ymd;
my $t = $dt->hms;
say "D: $d $t";
say 'E: ' . $dt->iso8601();
say 'F: ' . $dt->year_with_christian_era();
say 'G: ' . $dt->year_with_secular_era();

# Unix epoch
say 'H: ' . time;

use Test::More;
ok (strftime('%a %b %e %H:%M:%S %Y', localtime) =~ /202\d/);
ok ($dt->iso8601() =~ /202\d/);
ok (time > 1653300000);
done_testing;
