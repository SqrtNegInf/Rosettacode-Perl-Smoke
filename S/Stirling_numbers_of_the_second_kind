#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Stirling_numbers_of_the_second_kind
#c# 2019-09-04 >RC
#p# OK

use strict;
use warnings;
use feature <say state>;

use List::Util qw(max);
use Math::AnyNum ':overload';

my @res;

sub Stirling2 {
    no warnings 'recursion';
    my($n, $k) = @_;
    my $n1 = $n - 1;
    return 1 if     $n1 == $k;
    return 0 unless $n1 && $k;
    state %seen;
    return ($seen{"{$n1}|{$k}"  } //= Stirling2($n1,$k  ) * $k) +
           ($seen{"{$n1}|{$k-1}"} //= Stirling2($n1,$k-1))
}

my $upto  = 12;
my $width = 1 + length max map { Stirling2($upto+1,$_) } 0..$upto+1;

push @res, 'Unsigned Stirling2 numbers of the second kind: S2(n, k):';
push @res, 'n\k' . sprintf "%${width}s"x(1+$upto), 0..$upto;

for my $row (1..$upto+1) {
    push @res, sprintf '%-3d', $row-1;
    map { $res[$row+1] .= sprintf "%${width}d", Stirling2($row, $_) } 0..$row-1;
}

push @res, "\nMaximum value from the S2(100, *) row:";
push @res, max map { Stirling2(101,$_) } 0..100;

say my $result = join "\n", @res;

my $ref = <<'EOD';
Unsigned Stirling2 numbers of the second kind: S2(n, k):
n\k       0       1       2       3       4       5       6       7       8       9      10      11      12
0         1
1         0       1
2         0       1       1
3         0       1       3       1
4         0       1       7       6       1
5         0       1      15      25      10       1
6         0       1      31      90      65      15       1
7         0       1      63     301     350     140      21       1
8         0       1     127     966    1701    1050     266      28       1
9         0       1     255    3025    7770    6951    2646     462      36       1
10        0       1     511    9330   34105   42525   22827    5880     750      45       1
11        0       1    1023   28501  145750  246730  179487   63987   11880    1155      55       1
12        0       1    2047   86526  611501 1379400 1323652  627396  159027   22275    1705      66       1

Maximum value from the S2(100, *) row:
7769730053598745155212806612787584787397878128370115840974992570102386086289805848025074822404843545178960761551674
EOD

use Test::More;
chop $ref;
is ($result, $ref);
done_testing;
