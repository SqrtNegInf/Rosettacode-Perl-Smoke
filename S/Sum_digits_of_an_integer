#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sum_digits_of_an_integer
#c# 2018-08-12 <RC
#p# OK

use feature 'say';
my $result;

use strict;
use warnings;

my %letval = map { $_ => $_ } 0 .. 9;
$letval{$_} = ord($_) - ord('a') + 10 for 'a' .. 'z';
$letval{$_} = ord($_) - ord('A') + 10 for 'A' .. 'Z';

sub sumdigits {
  my $number = shift;
  my $sum = 0;
  $sum += $letval{$_} for (split //, $number);
  $sum;
}

$result .= "$_ sums to " . sumdigits($_) . "\n"
  for (qw/1 1234 1020304 fe f0e DEADBEEF/);


say $result; 
my $ref = <<'EOD';
1 sums to 1
1234 sums to 10
1020304 sums to 10
fe sums to 29
f0e sums to 29
DEADBEEF sums to 104
EOD

use Test::More;
is ($result, $ref);
done_testing;

#The ntheory module also does this, for a solution similar to Perl 6, with identical output.
#use ntheory "sumdigits";
#say sumdigits($_,36) for (qw/1 1234 1020304 fe f0e DEADBEEF/);

