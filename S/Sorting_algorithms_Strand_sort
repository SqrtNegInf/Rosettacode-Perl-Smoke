#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sorting_algorithms/Strand_sort
#c# 2018-08-15 <RC, 2021-01-30 >RC
#p# OK
#n# removed deprecated given/when construction, tidied

use strict;
use warnings;
use feature 'say';

sub merge {
    my ($x, $y) = @_;
    my @out;
    while (@$x and @$y) {
        my $t = $x->[-1] <=> $y->[-1];
        if    ($t == 1)  { unshift @out, pop @$x }
        elsif ($t == -1) { unshift @out, pop @$y }
        else             { splice @out, 0, 0, pop(@$x), pop(@$y) }
    }
    @$x, @$y, @out
}

sub strand {
    my $x = shift;
    my @out = shift @$x // return;
    for (-@$x .. -1) {
        push @out, splice @$x, $_, 1 if $x->[$_] >= $out[-1];
    }
    @out
}

sub strand_sort {
    my @x = @_;
    my(@out, @strand);
    @out = merge \@out, \@strand while @strand = strand(\@x);
    @out
}

use Test::More;
say 'input: ' . join ' ', my @a = map (int rand 100), 0 .. 50;
is_deeply([strand_sort(@a)], [sort { $a <=> $b } @a]);
done_testing();
