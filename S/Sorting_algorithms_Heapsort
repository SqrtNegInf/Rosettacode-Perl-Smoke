#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sorting_algorithms/Heapsort
#c# 2018-08-15 <RC
#p# OK

srand 1; # fragile!

use strict;
use warnings;
use feature 'say';

sub heap_sort {
    my ($a) = @_;
    my $n = @$a;
    for (my $i = ($n - 2) / 2; $i >= 0; $i--) {
        down_heap($a, $n, $i);
    }
    for (my $i = 0; $i < $n; $i++) {
        my $t = $a->[$n - $i - 1];
        $a->[$n - $i - 1] = $a->[0];
        $a->[0] = $t;
        down_heap($a, $n - $i - 1, 0);
    }
}

sub down_heap {
    my ($a, $n, $i) = @_;
    while (1) {
        my $j = max($a, $n, $i, 2 * $i + 1, 2 * $i + 2);
        last if $j == $i;
        my $t = $a->[$i];
        $a->[$i] = $a->[$j];
        $a->[$j] = $t;
        $i = $j;
    }
}

sub max {
    my ($a, $n, $i, $j, $k) = @_;
    my $m = $i;
    $m = $j if $j < $n && $a->[$j] > $a->[$m];
    $m = $k if $k < $n && $a->[$k] > $a->[$m];
    return $m;
}


use Test::More;
say 'input: ' . join ' ', my @a = my @b = map (int rand 100), 0 .. 4;
heap_sort(\@b);
is_deeply(\@b, [sort { $a <=> $b } @b]);
done_testing;
