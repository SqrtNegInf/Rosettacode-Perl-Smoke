#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Special_factorials
#c# 2021-04-09 >RC
#p# OK
#n# 'rf' has warts, but: (1) hard-coded value leaves lots of head-room, (2) quick enough, (3) I'm too lazy for lazy list
#n# ef(5) not working

my @res;

use v5.36.0;

use bigint try => 'GMP';
use ntheory qw<vecprod vecsum vecreduce vecfirstidx>;

sub  f ($n) { vecreduce     { $a * $b } 1,              1..$n }
sub sf ($n) { vecprod   map { f($_) }                   1..$n }
sub  H ($n) { vecprod   map { $_ ** $_ }                1..$n }
sub af ($n) { vecsum    map { (-1) ** ($n-$_) * f($_) } 1..$n }
sub ef ($n) { vecreduce     { $b ** $a }                1..$n }
sub rf ($n) {
    my $v =  vecfirstidx { f($_) >= $n  } 0..1E6;
    $n == f($v) ? $v : 'Nope'
}

push @res, 'sf : ' . join ' ', map { sf $_ } 0..9;
push @res, 'H  : ' . join ' ', map {  H $_ } 0..9;
push @res, 'af : ' . join ' ', map { af $_ } 0..9;
push @res, 'ef : ' . join ' ', map { ef $_ } 1..4;

#push @res, '5$ has ' . length( ef(5) ) . ' digits';       # 'ef' just returns 'Inf'
push @res, '5$ has ' . length(5**4**3**2) . ' digits';     # gets it right: '183231 digits'

push @res, 'rf : ' . join ' ', map { rf $_ } <1 2 6 24 120 720 5040 40320 362880 3628800>;
push @res, 'rf(119) = ' . rf(119); 

say my $result = join "\n", @res;

my $ref = <<'END';
sf : 1 1 2 12 288 34560 24883200 125411328000 5056584744960000 1834933472251084800000
H  : 1 1 4 108 27648 86400000 4031078400000 3319766398771200000 55696437941726556979200000 21577941222941856209168026828800000
af : 0 1 1 5 19 101 619 4421 35899 326981
ef : 1 2 9 262144
5$ has 183231 digits
rf : 0 2 3 4 5 6 7 8 9 10
rf(119) = Nope
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
