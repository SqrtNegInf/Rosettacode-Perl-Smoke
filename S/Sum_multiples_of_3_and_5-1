#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sum_multiples_of_3_and_5
#c# 2018-08-12 <RC
#p# OK

use feature 'say';
my $result;

use strict ;
use warnings ;
use List::Util qw( sum ) ;

sub sum_3_5 {
   my $limit = shift ;
   return sum grep { $_ % 3 == 0 || $_ % 5 == 0 } ( 1..$limit - 1 ) ;
}

$result = "The sum is " . sum_3_5( 1000 ) . " !\n" ;


say $result; 
my $ref = <<'EOD';
The sum is 233168 !
EOD

use Test::More;
is ($result, $ref);
done_testing();

__END__
# Translation of: Tcl
# An alternative approach, using the analytical solution from the Tcl example.

sub tri
{
    my $n = shift;
    return $n*($n+1) / 2;
}

sub sum1
{
    my $n = (shift) - 1;
    return (3 * tri($n / 3) + 5 * tri($n / 5) - 15 * tri($n / 15));
}

say sum1(1e3); # 233366.4 ??

use bigint; # Machine precision was sufficient for the first calculation
say sum(1e20);

Output:
233168
2333333333333333333316666666666666666668
Interestingly, the prime factorization of the second result produces a 35 digit prime number.


