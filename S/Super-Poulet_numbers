#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Super-Poulet_numbers
#c# 2022-09-09 >RC
#p# OK

my @res;

use v5.36;
use experimental <builtin for_list>;

use List::AllUtils <firstidx all>;
use ntheory <is_prime divisors powmod>;

sub comma { reverse ((reverse shift) =~ s/(.{3})/$1,/gr) =~ s/^,//r }

# not on RC!
my @super_poulet = grep {all {2 == powmod 2, $_, $_} grep {$_>1} divisors $_} grep {!is_prime($_) && (1 == powmod 2, $_ - 1, $_) } 2..1.1e7;

#my @poulet = grep { !is_prime($_) && (1 == powmod 2, $_ - 1, $_) } 2 .. 1.1e7;
#my @super_poulet = grep { all { 2 == powmod 2, $_, $_ } grep { $_ > 1 } divisors $_ } @poulet;

push @res, "First 20 super-Poulet numbers:\n" . join ' ', @super_poulet[0..19];

for my($i,$j) (1, 1e6, 10, 1e7) {
    my $index = firstidx { $_ > $j } @super_poulet;
    push @res, "\nIndex and value of first super-Poulet greater than $i million:";
    push @res, "#@{[1+$index]} is " . comma $super_poulet[$index];
}

say my $result = join "\n", @res;

my $ref = <<'END';
First 20 super-Poulet numbers:
341 1387 2047 2701 3277 4033 4369 4681 5461 7957 8321 10261 13747 14491 15709 18721 19951 23377 31417 31609

Index and value of first super-Poulet greater than 1 million:
#109 is 1,016,801

Index and value of first super-Poulet greater than 10 million:
#317 is 10,031,653
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
