#!/usr/local/bin/perl
#u# https://rosettacode.org/wiki/Sorensen–Dice_coefficient
#t# inprogress
#c# 2022-xx-xx >RC
#p# OK
#n# core of code from 'T/Text_Completion'

my @res;

use v5.36;

use Path::Tiny;
use List::Util <uniq head>;

sub bi_gram {
    my $line = lc shift;
    uniq map { substr $line,$_,2 } 0..length($line)-2;
}

sub score {
    my($phrase, $word) = @_;
    my %count;
#say $phrase; exit;

    my @match = bi_gram $phrase;
    $count{$_}++ for @match, @$word;
    2 * (grep { $count{$_} > 1 } keys %count) / (@match + @$word);
}

#   [2 * +($match ∩ $this) / ($match ⊎ $this), $_]

sub sorensen {
    my($dict,$word,$cutoff) = @_; $cutoff //= 0.55;
    my(%matches,$s);

    ($s = score($word, $$dict{$_})) > $cutoff and $matches{$_} = $s for keys %$dict;
    %matches;
}

my %dict = map { $_ => [ bi_gram($_) ] } path('ref/Sorensen-Dice-Tasks.txt')->slurp; # =~ /.{3,}/gm;

#  'Primordial primes',
#  'Sunkist-Giuliani formula',
#  'Sieve of Euripides',
#  'Chowder numbers';
#for my $word (<complition inconsqual>) {
for my $word ('Chowder numbers') {
#for my $word ('Primordial primes') {
    my(%scored,@ranked);

    %scored = sorensen(\%dict,$word);
    push @ranked, sprintf "%.3f $_", $scored{$_} for sort { $scored{$b} <=> $scored{$a} || $a cmp $b } keys %scored;
    push @res, "\n$word:\n" . join("\n", head 10, @ranked);
}

#use Text::Sorensen :sdi;
#my %tasks = 'ref/Sorensen-Dice-Tasks.txt'.IO.slurp.lines.race.map: { $_ => .&bi-gram };
#sub fuzzy-search (Str $string) { sdi($string, %tasks, :ge(.2) ).head(5).join: "\n" }

#@res.push: "\n$_ >\n" ~ .&fuzzy-search for

say my $result = join "\n", @res;
exit;

my $ref = <<'END';
Primordial primes >
0.685714 Sequence of primorial primes
0.666667 Factorial primes
0.571429 Primorial numbers
0.545455 Prime words
0.521739 Almost prime

Sunkist-Giuliani formula >
0.565217 Almkvist-Giullera formula for pi
0.378378 Faulhaber's formula
0.342857 Haversine formula
0.333333 Check Machin-like formulas
0.307692 Resistance calculator

Sieve of Euripides >
0.461538 Four sides of square
0.461538 Sieve of Pritchard
0.413793 Sieve of Eratosthenes
0.4 Piprimes
0.384615 Sierpinski curve

Chowder numbers >
0.782609 Chowla numbers
0.64 Powerful numbers
0.608696 Fermat numbers
0.608696 Rhonda numbers
0.6 Lah numbers
END

use Test::More;
chomp $ref;
is($result, $ref);
#is(($result =~ s/\s//gr), ($ref =~ s/\s//gr));
done_testing();

__END__

=={{header|Perl}}==
<syntaxhighlight lang="perl" line>
</syntaxhighlight>
{{out}}
<pre>
</pre>
