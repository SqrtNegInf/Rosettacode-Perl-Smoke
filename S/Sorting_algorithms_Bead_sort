#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sorting_algorithms/Bead_sort
#c# 2018-08-15 <RC
#p# OK

srand 123456;

use strict;
use warnings;
use feature 'say';

# Instead of storing the bead matrix explicitly, I choose to store just the number of beads in each row and column, compacting on the fly. At all times, the sum of the row widths is equal to the sum column heights.

sub beadsort {
    my @data = @_;

    my @columns;
    my @rows;

    for my $datum (@data) {
        for my $column ( 0 .. $datum-1 ) {
            ++ $rows[ $columns[$column]++ ];
        }
    }

    return reverse @rows;
}

use Test::More;
say 'input: ' . join ' ', my @a = map (int rand 100), 0 .. 50;
is_deeply([beadsort(@a)], [sort { $a <=> $b } @a]);
done_testing();
