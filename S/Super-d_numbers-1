#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Super-d_numbers
#c# 2019-10-10 NOT ON RC
#p# OK
#n# due to the 'bigint' requirement, slower than Raku version
#n# timings for 2..6:
#n# 202.732u 0.344s 3:23.32 99.8%
#n# 167.730u 0.366s 2:48.57 99.7% GMP
#n#  31.250u 0.990s  :32.46 99.0% Math::AnyNum (and still slower than Raku)

use strict;
use warnings;
use feature 'say';
#use bigint try=>"GMP";
use Math::AnyNum qw(:overload);

my @res;

sub super {
    my($d,$max) = @_;
    my $digits = $d x $d;
    my @list;
    my $n = 0;
    do { push @list, $n if index($d * ++$n**$d, $digits) >= 0 } until $max == @list;
    @list;
}

push @res, "$_: " . join ' ', super($_,10) for 2..6;

say my $result = join "\n", @res;

my $ref = <<'END';
2: 19 31 69 81 105 106 107 119 127 131
3: 261 462 471 481 558 753 1036 1046 1471 1645
4: 1168 4972 7423 7752 8431 10267 11317 11487 11549 11680
5: 4602 5517 7539 12955 14555 20137 20379 26629 32767 35689
6: 27257 272570 302693 323576 364509 502785 513675 537771 676657 678146
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
