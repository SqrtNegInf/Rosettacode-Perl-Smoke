#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Square_but_not_cube
#c# 2018-08-14 >RC
#p# OK
#n# part 2 on RC

use strict;
use warnings;
use feature 'say';
my $result;

# return an anonymous subroutine that generates stream of specified powers 
sub gen_pow {
    my $m = shift;
    my $e = 1;
    return sub { return $e++ ** $m; };
}

# return an anonymous subroutine generator that filters output from supplied routines g1 and g2
sub gen_filter {
    my($g1, $g2) = @_;
    my $v1;
    my $v2 = $g2->();
    return sub {
        while (1) {
            $v1 = $g1->();
            $v2 = $g2->() while $v1 > $v2;
            return $v1 unless $v1 == $v2;
        }
    };
}

my $pow2 = gen_pow(2);
my $pow3 = gen_pow(3);
my $squares_without_cubes = gen_filter($pow2, $pow3);
$result .= "First 30 positive integers that are a square but not a cube:\n";
$result .= $squares_without_cubes->() . ' ' for 1..30;

my $pow6 = gen_pow(6);
$result .= "\n\nFirst 3 positive integers that are both a square and a cube:\n";
$result .= $pow6->() . ' 'for 1..3;

say $result;

my $ref = <<'END';
First 30 positive integers that are a square but not a cube:
4 9 16 25 36 49 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529 576 625 676 784 841 900 961 1024 1089 

First 3 positive integers that are both a square and a cube:
1 64 729 
END

use Test::More;
chop $ref;
is($result, $ref);
done_testing;
