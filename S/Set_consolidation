#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Set_consolidation
#c# 2018-08-17 <RC
#p# OK

my $result;

use strict;
use warnings;
use feature 'say';

use English;
use Data::Dumper;

my @ex1 = consolidate( (['A', 'B'], ['C', 'D']) );
my @ex2 = consolidate( (['A', 'B'], ['B', 'D']) );
my @ex3 = consolidate( (['A', 'B'], ['C', 'D'], ['D', 'B']) );
my @ex4 = consolidate( (['H', 'I', 'K'], ['A', 'B'], ['C', 'D'], ['D', 'B'], ['F', 'G', 'H']) );

$Data::Dumper::Sortkeys = 1;
$result .= "Example 1:\n"; $result .= Dumper @ex1;
$result .= "Example 2:\n"; $result .= Dumper @ex2;
$result .= "Example 3:\n"; $result .= Dumper @ex3;
$result .= "Example 4:\n"; $result .= Dumper @ex4;

sub consolidate {
    scalar(@ARG) >= 2 or return @ARG;
    my @result = shift(@ARG);
    my @recursion = consolidate(@ARG);
    for my $r (@recursion) {
        if (set_intersection($result[0], $r)) {
            $result[0] = [ set_union($result[0], $r) ];
        } else {
            push @result, $r;
        }
    }
    return @result;
}

sub set_union {
    my ($a, $b) = @ARG;
    my %union;
    for my $a_elt (@{$a}) { $union{$a_elt}++; }
    for my $b_elt (@{$b}) { $union{$b_elt}++; }
    return sort keys(%union); # DH added 'sort', stable for testing
}

sub set_intersection {
    my ($a, $b) = @ARG;
    my(%a_hash,@result);
    for my $a_elt (@{$a}) { $a_hash{$a_elt}++; }
    for my $b_elt (@{$b}) {
        push(@result, $b_elt) if exists($a_hash{$b_elt});
    }
    return @result;
}

say $result;
my $ref = <<'EOD';
Example 1:
$VAR1 = [
          'A',
          'B'
        ];
$VAR2 = [
          'C',
          'D'
        ];
Example 2:
$VAR1 = [
          'A',
          'B',
          'D'
        ];
Example 3:
$VAR1 = [
          'A',
          'B',
          'C',
          'D'
        ];
Example 4:
$VAR1 = [
          'F',
          'G',
          'H',
          'I',
          'K'
        ];
$VAR2 = [
          'A',
          'B',
          'C',
          'D'
        ];
EOD

use Test::More;
is ($result, $ref);
done_testing();
