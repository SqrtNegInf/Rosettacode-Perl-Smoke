#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Sexy_primes
#c# 2018-09-30 >RC
#p# BROKEN

use feature 'say';

my $result;
my @res;

use Math::Prime::Util qw(next_prime is_prime);
 
$max = 1_000_035;
$cmax = comma($max);

my $p = 2;
push @{$primes{'unsexy'}}, $p;
my $count = 1;
while () {
    $p = next_prime($p);
    last if $p > $max;
    $count++;
    $s = sexy($p);
    push @{$primes{$s}}, $p;
    next unless $s eq 'sexy';

    next unless is_prime($p+ 6);
    push @{$primes{'pair'}},       $p;
    next unless is_prime($p+12);
    push @{$primes{'triplet'}},    $p;
    next unless is_prime($p+18);
    push @{$primes{'quadruplet'}}, $p;
    next unless is_prime($p+24);
    push @{$primes{'quintuplet'}}, $p;

}


sub sexy {
    my($i) = @_;
    (($i >= $max - 6) && is_prime($i + 6)) ||
        is_prime($i+6) || is_prime($i-6) ? 'sexy' : 'unsexy'
}
 
sub comma {
    (my $s = reverse shift) =~ s/(.{3})/$1,/g;
    $s =~ s/,(-?)$/$1/;
    $s = reverse $s;
}

# Hash[Any,Any] $primes = $(my Any %{Any} = :pair($[5, 7, 11, 13, 17, 23, 31, 37, 41, 47, 53, 61, 67, 73, 83, 97, 101, 103, 107, 131, 151, 157, 167, 173, 191, 193, 223, 227, 233, 251, 257, 263, 271, 277, 307, 311, 331, 347, 353, 367, 373, 383, 433, 443, 457, 461, 503, 541, 557, 563, 571, 587, 593, 601, 607, 613, 641, 647, 653, 677, 727, 733, 751, 821, 823, 853, 857, 877, 881, 941, 947, 971, 977, 991]), :quadruplet($[5, 11, 41, 61, 251, 601, 641]), :quintuplet($[5]), :sexy($[5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 131, 137, 151, 157, 163, 167, 173, 179, 191, 193, 197, 199, 223, 227, 229, 233, 239, 251, 257, 263, 269, 271, 277, 283, 307, 311, 313, 317, 331, 337, 347, 353, 359, 367, 373, 379, 383, 389, 433, 439, 443, 449, 457, 461, 463, 467, 503, 509, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 619, 641, 647, 653, 659, 677, 683, 727, 733, 739, 751, 757, 821, 823, 827, 829, 853, 857, 859, 863, 877, 881, 883, 887, 941, 947, 953, 971, 977, 983, 991, 997]), :triplet($[5, 7, 11, 17, 31, 41, 47, 61, 67, 97, 101, 151, 167, 227, 251, 257, 271, 347, 367, 557, 587, 601, 607, 641, 647, 727, 941, 971]), :unsexy($[2, 3, 71, 127, 139, 149, 181, 211, 241, 281, 293, 349, 397, 401, 409, 419, 421, 431, 479, 487, 491, 499, 521, 523, 617, 631, 643, 661, 673, 691, 701, 709, 719, 743, 761, 769, 773, 787, 797, 809, 811, 839, 907, 911, 919, 929, 937, 967]))

push @res, "Total primes less than $cmax: ". comma $count;


for $tuples (qw<pair 2>, qw<triplet 3>, qw<quadruplet 4>, qw<quintuplet 5>) {
    $sexy = @$tuples[0];
    $cnt  = @$tuples[1];
$DB::single = 1;
    push @res, "Number of sexy prime ${sexy}s less than $cmax: ". comma scalar @{$primes{$sexy}};
#    push @res, "   Last 5 sexy prime {$sexy}s less than $cmax: ".
#      join ' ', $primes{$sexy}.sort(+*).tail(5).grep(*.defined).map:
#      { "({ $_ «+« (0,6 … 24)[^$cnt] })" }
#    push @res, '';
}

push @res, "Number of unsexy primes less than $cmax: ". comma scalar @{$primes{unsexy}};
push @res, "  Last 10 unsexy primes less than $cmax: ". join ' ', @{$primes{unsexy}}[-11..-2];

say $result = join "\n", @res; 
exit;

my $ref = <<'EOD';
Total primes less than 1,000,035: 78,500
Number of sexy prime pairs less than 1,000,035: 16,386
   Last 5 sexy prime pairs less than 1,000,035: (999371 999377) (999431 999437) (999721 999727) (999763 999769) (999953 999959)

Number of sexy prime triplets less than 1,000,035: 2,900
   Last 5 sexy prime triplets less than 1,000,035: (997427 997433 997439) (997541 997547 997553) (998071 998077 998083) (998617 998623 998629) (998737 998743 998749)

Number of sexy prime quadruplets less than 1,000,035: 325
   Last 5 sexy prime quadruplets less than 1,000,035: (977351 977357 977363 977369) (983771 983777 983783 983789) (986131 986137 986143 986149) (990371 990377 990383 990389) (997091 997097 997103 997109)

Number of sexy prime quintuplets less than 1,000,035: 1
   Last 5 sexy prime quintuplets less than 1,000,035: (5 11 17 23 29)

Number of unsexy primes less than 1,000,035: 48,627
  Last 10 unsexy primes less than 1,000,035: 999853 999863 999883 999907 999917 999931 999961 999979 999983 1000003
EOD

use Test::More;
#is($result, $ref);
#done_testing();
 

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre></pre>
