#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Achilles_numbers
#c# 2022-02-02 >RC, 2023-12-07 <RC
#p# OK
#n# incoporated the more substantial of Trizen's changes

my @res;

use v5.36.0;

use List::AllUtils <max head>;
use ntheory <is_square_free euler_phi>;
use Math::AnyNum <:overload idiv iroot ipow is_power is_coprime>;

sub table { my $t = shift() * (my $c = 1 + length max @_); ( sprintf( ('%'.$c.'d')x@_, @_) ) =~ s/.{1,$t}\K/\n/gr }

#sub ispowerful { 0 + vecall { $_->[1] > 1 } factor_exp(shift); } # too slow

sub powerful_numbers ($n, $k = 2) {
    my @powerful;
    sub ($m, $r) {
        $r < $k and push @powerful, $m and return;
        for my $v (1 .. iroot(idiv($n, $m), $r)) {
            if ($r > $k) { next unless is_square_free($v) and is_coprime($m, $v) }
            __SUB__->($m * ipow($v, $r), $r - 1);
        }
    }->(1, 2*$k - 1);
    sort { $a <=> $b } @powerful;
}

my(@Ac,%Ac,@S);

my @P = powerful_numbers(10**9, 2);
!is_power($_) and push @Ac, $_ and $Ac{$_}++ for @P;
$Ac{euler_phi $_} and push @S, $_ for @Ac;

push @res, "First 50 Achilles numbers:\n" .        table 10, head 50, @Ac;
push @res, "First 30 strong Achilles numbers:\n" . table 10, head 30, @S; 
push @res, 'Number of Achilles numbers with:';
for my $l (2..9) {
    my $c;
    $l == length and ++$c for @Ac;
    push @res, "$l digits: $c";
}

say my $result = join "\n", @res;

my $ref = <<'END';
First 50 Achilles numbers:
   72  108  200  288  392  432  500  648  675  800
  864  968  972 1125 1152 1323 1352 1372 1568 1800
 1944 2000 2312 2592 2700 2888 3087 3200 3267 3456
 3528 3872 3888 4000 4232 4500 4563 4608 5000 5292
 5324 5400 5408 5488 6075 6125 6272 6728 6912 7200

First 30 strong Achilles numbers:
   500   864  1944  2000  2592  3456  5000 10125 10368 12348
 12500 16875 19652 19773 30375 31104 32000 33275 37044 40500
 49392 50000 52488 55296 61731 64827 67500 69984 78608 80000

Number of Achilles numbers with:
2 digits: 1
3 digits: 12
4 digits: 47
5 digits: 192
6 digits: 664
7 digits: 2242
8 digits: 7395
9 digits: 24008
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
