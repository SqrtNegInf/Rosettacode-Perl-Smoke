#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Array_length
#c# 2018-07-14 <RC
#p# OK
#n# removed a few 'scalar' that weren't required
#n# the whole 'order of magnitude' demo. is a crufty crock, but just letting it be for now

my $result;

use strict;
no warnings;   # the point of the RC code is to show the problems, but don't want that for testing
#use warnings; # on lines 42, 44, 47, 50
use feature 'say';

# The way to get the number of elements of an array in Perl is to put the array in scalar context.

my @array = qw<"apple orange banana" 4 42>;
 
say scalar @array;      #  5
say 0 +  @array;        #  5
say '' . @array;        # "5"
my $elems = @array; # $elems = 5
 
say scalar @{  [1,2,3]  }; # [1,2,3] is a reference which is already a scalar
 
my $array_ref = \@array; # a reference
scalar @$array_ref;
 
 
# using subroutine prototypes, not generally recommended
# and not usually what you think they are
sub takes_a_scalar ($) { my ($a) = @_; return $a }
 
takes_a_scalar(@array);
 
# the built-ins can also act like they have prototypes
# A common mistake is to use length which works on strings not arrays.
# So using it on an array, as a side-effect, actually gives you a number which represents the order of magnitude.

say length '' . @array; # 1
say length      @array; # 1
 
$result .= '0.'. @array . 'e' . length(@array) . "\n"; # 0.5e1
 
@array = 1..123;
$result .= '0.'. @array . 'e' . length(@array) . "\n"; # 0.123e3
 
$result .= 'the length of @array is on the order of ';
$result .= 10 ** (length( @array )-1); # 100
$result .= " elements long\n";

say $result; 

my $ref = <<'EOD';
0.5e1
0.123e3
the length of @array is on the order of 100 elements long
EOD

use Test::More;
is ($result, $ref);
done_testing();
