#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Abelian_sandpile_model
#c# 2019-09-17 <RC,  2023-04-02 >RC
#p# OK

use strict;
use warnings;
use feature 'bitwise';

srand 123456;

my ($high, $wide) = (20,20); #split ' ', qx(stty size);

my $mask = "\0" x $wide . ("\0" . "\177" x ($wide - 2) . "\0") x ($high - 5) .
  "\0" x $wide;
my $pile = $mask =~ s/\177/ rand() < 0.02 ? chr 64 + rand 20 : "\0" /ger;

my $result;

for ( 1 .. 1e6 ) {
  #print "\e[H", $pile =~ tr/\0-\177/ 1-~/r, "\n$_";
  $result = $pile =~ tr/\0-\177/ 1-~/r;
  my $add = $pile =~ tr/\1-\177/\0\0\0\200/r; # set high bit for >=4
  $add =~ /\200/ or last;
  $pile =~ tr/\4-\177/\0-\173/; # subtract 4 if >=4
  for ("\0$add", "\0" x $wide . $add, substr($add, 1), substr $add, $wide) {
    $pile |.= $_;
    $pile =~ tr/\200-\377/\1-\176/; # add one to each neighbor of >=4
    $pile &.= $mask;
  }
}

print "$result\n";

my $ref = <<'END';
                     21    21212212       23113331313322     13222113232211 1    23 32321 2112221    3231221332332321     311133321313221    321223311222 331    1113322232133113    132133 223 333112   2232 3333321233333  123231232331222213   3312332231 3232 1  332322131333313323   23123 33112313233  23221123221 23333                      
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
