#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/RC_REMOTE
#t# nocode
#c# 2019-03-21 >RC
#p# OK

__END__

=={{header|Perl}}==
The CPAN module <code>Aspect</code> brings features of AOP to Perl. From the documention:

The Perl Aspect module tries to closely follow the terminology of the basic Java AspectJ project wherever possible and reasonable.

However due to the dynamic nature of the Perl language, several AspectJ features are useless for us: exception softening, mixin support, out-of-class method declarations, annotations, and others.

Currently the Perl Aspect module is focused exclusively on subroutine matching and wrapping.

It allows you to select collections of subroutines and conditions using a flexible pointcut language, and modify their behavior in any way you want.

In addition, where the Java implementation of Aspect-Oriented Programming is limited to concepts expressable at compile time, the more fluid nature of Perl means that the Aspect module can weave in aspect code at run-time. Pointcuts in Perl can also take advantage of run-time information and Perl-specific features like closures to implement more sophisticated pointcuts than are possible in Java.

This allows the Perl implementation of Aspect-Oriented Programming to be stateful and adaptive in a way that Java cannot (although the added power can come with a significant speed cost if not used carefully).
