#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Atomic_updates
#c# 2018-07-15 <RC
#p# OK

#srand 123456; # beside the point

use strict;
use warnings;
no warnings 'uninitialized';
use feature 'say';
use threads 'yield';
use threads::shared;

my $n = 10;
 
my @res :shared;
my @a :shared = (10*$n) x $n;
my $stop :shared = 0;
my $sum_total :shared = 0;
 
sub pick2 {
	my $i = int(rand($n));
	my $j;
	$j = int(rand($n)) until $j != $i;
	($i, $j)
}
 
sub even {
	lock @a;
	my ($i, $j) = pick2;
	my $sum = $a[$i] + $a[$j];
	$a[$i] = int($sum / 2);
	$a[$j] = $sum - $a[$i];
}
 
sub rand_move {
	lock @a;
	my ($i, $j) = pick2;
 
	my $x = int(rand $a[$i]);
	$a[$i] -= $x;
	$a[$j] += $x;
}
 
sub show {
	lock @a;
	my $sum = 0;
    my $line;
	$sum += $_ for (@a);
	$line .= sprintf "%4d", $_ for @a;
	push @res, "$line total $sum";
    $sum_total += $sum;
}
 
my $t1 = async { even		until $stop }
my $t2 = async { rand_move	until $stop }
my $t3 = async {
	for (1 .. $n) {
		show;
		sleep(1);
	}
	$stop = 1;

};
 
$t1->join; $t2->join; $t3->join;

say join "\n", @res;

use Test::More;
is ($sum_total, 1000*$n);
done_testing();
