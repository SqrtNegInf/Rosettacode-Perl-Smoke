#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Anti-primes_Plus
#c# 2019-04-09 >RC
#p# OK

use strict;
use warnings;
use feature 'say';

use ntheory 'divisors';

say 'First 15 terms of OEIS: A005179';
my @res1;
for my $n (1..15) { 
    my $l = 0;
    while (++$l) {
        push @res1, $l and last if $n == divisors($l);
    }
}
say my $result1 = join ' ', @res1; 
 
say "\nFirst 15 terms of OEIS: A69654";
my @res2;
my $m = 0;
for my $n (1..15) {
    my $l = $m;
    while (++$l) {
        push(@res2, $l), $m = $l, last if $n == divisors($l);
        #push @res2, $l and $m = $l and last if $n == divisors($l);
    }
}
say my $result2 = join ' ', @res2; 

my $ref1 = '1 2 4 6 16 12 64 24 36 48 1024 60 4096 192 144';
my $ref2 = '1 2 4 6 16 18 64 66 100 112 1024 1035 4096 4288 4624';

use Test::More;
is($result1, $ref1);
is($result2, $ref2);
done_testing();

__END__

Sidef
func n_divisors(n) {
    1..Inf -> first_by { .sigma0 == n }
}
 
say 15.of { n_divisors(_+1) }

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre></pre>
