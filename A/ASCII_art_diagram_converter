#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/ASCII_art_diagram_converter
#c# 2020-07-21 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;

my @res;

$_ = <<END;

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      ID                       |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    QDCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ANCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    NSCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ARCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

END

my $template;
my @names;
while( /\| *(\w+) */g )
  {
  push @res, sprintf "%10s is %2d bits", $1, my $length = length($&) / 3;
  push @names, $1;
  $template .= "A$length ";
  }

my $input = '78477bbf5496e12e1bf169a4'; # as hex

my %datastructure;
@datastructure{ @names } = unpack $template, unpack 'B*', pack 'H*', $input;

push @res, "\ntemplate = $template\n";

push @res, Data::Dumper->Dump([\%datastructure]);

my $ref = <<'EOD';
        ID is 16 bits
        QR is  1 bits
    Opcode is  4 bits
        AA is  1 bits
        TC is  1 bits
        RD is  1 bits
        RA is  1 bits
         Z is  3 bits
     RCODE is  4 bits
   QDCOUNT is 16 bits
   ANCOUNT is 16 bits
   NSCOUNT is 16 bits
   ARCOUNT is 16 bits

template = A16 A1 A4 A1 A1 A1 A1 A3 A4 A16 A16 A16 A16 

$VAR1 = {
          'AA' => '0',
          'ANCOUNT' => '1110000100101110',
          'ARCOUNT' => '0110100110100100',
          'ID' => '0111100001000111',
          'NSCOUNT' => '0001101111110001',
          'Opcode' => '1111',
          'QDCOUNT' => '0101010010010110',
          'QR' => '0',
          'RA' => '1',
          'RCODE' => '1111',
          'RD' => '1',
          'TC' => '1',
          'Z' => '011'
        };
EOD

say my $result = join "\n", @res;

use Test::More;
is ($result, $ref);
done_testing();
