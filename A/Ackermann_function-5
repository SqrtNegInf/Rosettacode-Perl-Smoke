#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Ackermann_function
#c# 2018-07-10 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

use Math::BigInt;

use constant two => Math::BigInt->new(2);

sub ack {
	my $n = pop;
	while (@_) {
		my $m = pop;
		if( $m > 3 ) {
			push @_, (--$m) x $n;
			push @_, reverse 3 .. --$m;
			$n = 13;
		} elsif( $m == 3 ) {
			$n = $n < 29 ? (1 << ($n + 3)) - 3 : two ** ($n + 3) - 3;
		} elsif( $m == 2 ) {
			$n = 2 * $n + 3;
		} elsif( $m >= 0 ) {
			$n = $n + $m + 1;
		} else {
			die "negative m!";
		}
	}
	$n
}
 
say my $result  = 'ack(3,4) is '  . ack(3,4). "\n"   .
                  'ack(4,1) is '  . ack(4,1). "\n"   .
                  'ack(4,2) has ' . length(ack(4,2)) . " digits\n";

my $ref = <<'END';
ack(3,4) is 125
ack(4,1) is 65533
ack(4,2) has 19729 digits
END

use Test::More;
is ($result, $ref);
done_testing;
