#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Assertions_in_design_by_contract
#c# 2020-12-01 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

my @res;

package MessageMultiplier;

use Class::Contract;
use Test::More tests => 3;
use Test::Exception;

contract {

   attr 'multiplier' => 'SCALAR';
   attr 'message'    => 'SCALAR';

   ctor 'new';
      impl { push @res, ( ${self->multiplier}, ${self->message} ) = @_ };

   method 'execute';
      pre  { ${self->multiplier} > 1 and length ${self->message} > 0 };
      impl { push @res, ${self->message} x ${self->multiplier} . "\n" };
};

MessageMultiplier->new(2,'A')->execute;
push @res, 'dies ok' if dies_ok { MessageMultiplier->new(1,'B')->execute };
push @res, 'dies ok' if dies_ok { MessageMultiplier->new(3, '')->execute };

my $result = join "\n", @res; 

my $ref = <<'EOD';
2
A
AA

1
B
dies ok
3

dies ok
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing;
