#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/One-dimensional_cellular_automata
#c# 2018-08-20 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my($result1,$result2);

# Use regexp to extract and substitute cells while the string changes
# Convert cells to zeros and ones to set complement state

my $x = '';
$_="_###_##_#_#_#_#__#__\n";
do {
  y/01/_#/;
  $result1 .= $_;
  y/_#/01/;
  s/(?<=(.))(.)(?=(.))/$1 == $3 ? $1 ? 1-$2 : 0 : $2/eg;
} while ($x ne $_ and $x=$_);

# Use hash for complement state

$_="_###_##_#_#_#_#__#__\n";

#%h=qw(# _ _ #);
my %h= ('#' => '_', '_' => '#');

do {
  $result2 .= $_;
  s/(?<=(.))(.)(?=(.))/$1 eq $3 ? $1 eq "_" ? "_" : $h{$2} : $2/eg;
} while ($x ne $_ and $x=$_);

my $ref = <<'EOD';
_###_##_#_#_#_#__#__
_#_#####_#_#_#______
__##___##_#_#_______
__##___###_#________
__##___#_##_________
__##____###_________
__##____#_#_________
__##_____#__________
__##________________
EOD

use Test::More;
is ($result1, $ref);
is ($result2, $ref);
done_testing;
