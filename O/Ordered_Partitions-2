#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Ordered_Partitions
#c# 2018-08-20 <RC
#p# OK
#n# translation of Raku solution, recursive

# The set of ordered partitions is not returned in lexicographical order
# itself; but it's supposed to be a set so that's hopefully okay. (One could
# sort the output before printing, but (unlike in Raku) Perl's built-in sort
# routine cannot meaningfully compare arrays without being passed a custom
# comparator to do that, which is a little messy and thus omitted here.)

my($result1,$result2);

use strict;
use warnings;
use feature 'say';

use List::Util <sum pairmap>;

sub partition {
    my @mask = @_;
    my $last = sum @mask or return [map {[]} 0..$#mask];

    pairmap {
        $b ? do {
            local $mask[$a] = $b - 1;
            map { push @{$_->[$a]}, $last; $_ }
                partition(@mask);
        } : ()
    } %mask[0..$#mask];     # 2022-07-21 TIL a quirk of 'pairmap'
   #} %{mask[0..$#mask]};   # OK (weird, no sigil on 'mask')
   #} %{@mask[0..$#mask]};  # NO
}

$result1 .= "(" . join(', ', map { "{".join(', ', @$_)."}" } @$_) . ")\n"
    for partition( (2, 0, 2) );

$result2 .= "(" . join(', ', map { "{".join(', ', @$_)."}" } @$_) . ")\n"
    for partition( (1, 1, 1) );

say $result1; 
say $result2; 

my $ref1 = <<'EOD';
({3, 4}, {}, {1, 2})
({2, 4}, {}, {1, 3})
({1, 4}, {}, {2, 3})
({2, 3}, {}, {1, 4})
({1, 3}, {}, {2, 4})
({1, 2}, {}, {3, 4})
EOD

my $ref2 = <<'EOD';
({3}, {2}, {1})
({3}, {1}, {2})
({2}, {3}, {1})
({1}, {3}, {2})
({2}, {1}, {3})
({1}, {2}, {3})
EOD

use Test::More;
is ($result1, $ref1);
is ($result2, $ref2);
done_testing;

