#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Own_digits_power_sum
#c# 2021-10-25 >RC
#p# OK
#n# brute-force approach, only concurrency saves us from certain doom...
#n# pretty-near pointlesss (cf. combinatorcs version) but TIL how to return values from child processes using P::F
#n# 3-7:  196.37s user  1.23s system 514% cpu    38.43 total
#n# 3-8: 2677.35s user 25.43s system 455% cpu  9:52.73 total
#n# 3-9: 4869.08s user 30.04s system 428% cpu 19:02.17 total

use strict;
use warnings;
use feature 'say';

use List::Util 'sum';
use Parallel::ForkManager;

my %own_dps;
my($lo,$hi) = (3,7);
my $cores   = 8;      # configure to match CPU

my $start   = 10**($lo-1);
my $stop    = 10**$hi - 1;
my $step    = int(1 + ($stop - $start)/ ($cores+1));

my $pm = Parallel::ForkManager->new($cores);

RUN:
for my $i ( 0 .. $cores ) {

    $pm->run_on_finish (
        sub {
            my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_ref) = @_;
            $own_dps{$ident} = $data_ref;
        }
    );

    $pm->start($i) and next RUN;
    my @values;
    for my $n ( ($start + $i*$step) .. ($start + ($i+1)*$step) ) {  
        push @values, $n if $n == sum map { $_**length($n) } split '', $n;
    }
    $pm->finish(0, \@values)
}

$pm->wait_all_children;

say my $result = join "\n", sort { $a <=> $b } map { @$_ } values %own_dps;

my $ref = <<'END';
153
370
371
407
1634
8208
9474
54748
92727
93084
548834
1741725
4210818
9800817
9926315
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();

__END__

# simplest version, very, very, very, very slow
for my $d (3..9) {
    for my $n ( 10**($d-1) .. 10**$d - 1) {    
        say $n unless $n != sum map { $_**$d } split '', $n;
     }
}
