#!/usr/local/bin/perl
#u# https://rosettacode.org/wiki/O%27Halloran_numbers
#c# 2022-09-29 >RC
#p# OK
#n# short-circuits keep it from being slow no matter how high the threshold

use v5.36;

my @A;
my $threshold = 10000; # redonkulous overkill
#my $threshold = 925;  # just enough

# strong short-circuiting
for my $x (1..$threshold) {
    X: for my $y (1..$x) {
        last X if $x*$y > $threshold;
        Y: for my $z (1..$y) {
           last Y if (my $area = 2 * ($x*$y + $y*$z + $z*$x)) > $threshold;
           $A[$area] = "$x,$y,$z";
        }
    }
}

# weak short-circuiting
if (0) {
for my $x (1..$threshold) {
    for my $y (1..$x) {
        next if $x*$y > $threshold;
        for my $z (1..$y) {
           $A[my $area = 2 * ($x*$y + $y*$z + $z*$x)] = "$x,$y,$z";
           next if $area > $threshold;
        }
    }
}
}

my $result = "Even integer surface areas NOT achievable by any regular, integer dimensioned cuboid:\n";
$_ < $threshold and $_ > 6 and 0 == $_%2 and not $A[$_] and $result .= "$_ " for 0..$#A;

say $result;

my $ref = <<'END';
Even integer surface areas NOT achievable by any regular, integer dimensioned cuboid:
8 12 20 36 44 60 84 116 140 156 204 260 380 420 660 924 
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
