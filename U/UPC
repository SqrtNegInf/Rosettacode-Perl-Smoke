#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/UPC
#c# 2019-12-08 >RC
#p# OK

use strict;
use warnings;
use feature 'say';

my @res;

sub decode_UPC {
    my($line) = @_;
    my(%pattern_to_digit_1,%pattern_to_digit_2,@digits,$sum);

    my @patterns1 = ('   ## #', '  ##  #', '  #  ##', ' #### #', ' #   ##',
                     ' ##   #', ' # ####', ' ### ##', ' ## ###', '   # ##');
    my @patterns2 = @patterns1;
    $patterns2[$_] =~ tr/# / #/ for 0..$#patterns2;

    $pattern_to_digit_1{$patterns1[$_]} = $_ for 0..$#patterns1;
    $pattern_to_digit_2{$patterns2[$_]} = $_ for 0..$#patterns2;

     #my $re = '\s*# #\s*((?:' . join('|',@patterns1) . '){6})\s*# #\s*((?:' . join('|',@patterns2) . '){6})\s*# #\s*';

     my $re = '\s*# #\s*' .
              "(?<match1>(?:@{[join '|', @patterns1]}){6})" .    # match1
              '\s*# #\s*' .
              "(?<match2>(?:@{[join '|', @patterns2]}){6})" .    # match2
              '\s*# #\s*';
     $line =~ /^$re$/g || return;

    # not working, why?  ultimate goal is to put named caputure in here...
#   $line =~ /^ \s*#\s#\s*
#               ( (?: @{[join '|', @patterns1]} ) {6} )  # match1
#               \s*#\s#\s*
#               ( (?: @{[join '|', @patterns2]} ) {6} )  # match2
#               \s*#\s#\s*
#             $/gx || return;

    #say $+{match1}; say $+{match2}; say '';
    #push @digits, $pattern_to_digit_1{$_} for $+{match1} =~ /(.......)/g;
    #push @digits, $pattern_to_digit_2{$_} for $+{match2} =~ /(.......)/g;

    my($match1,$match2) = ($+{match1}, $+{match2});
    push @digits, $pattern_to_digit_1{$_} for $+{match1} =~ /(.......)/g;
    push @digits, $pattern_to_digit_2{$_} for $match2 =~ /(.......)/g;

    $sum += (3,1)[$_%2] * $digits[$_] for 0..11;
    $sum % 10 ? '' : join '', @digits;
}

my @lines = (
    '         # #   # ##  #  ## #   ## ### ## ### ## #### # # # ## ##  #   #  ##  ## ###  # ##  ## ### #  # #       ',
     '        # # #   ##   ## # #### #   # ## #   ## #   ## # # # ###  # ###  ##  ## ###  # #  ### ###  # # #      ',
    '         # #    # # #  ###  #   #    # #  #   #    # # # # ## #   ## #   ## #   ##   # # #### ### ## # #       ',
      '       # # ##  ## ##  ##   #  #   #  # ###  # ##  ## # # #   ## ##  #  ### ## ## #   # #### ## #   # #        ',
    '         # # ### ## #   ## ## ###  ##  # ##   #   # ## # # ### #  ## ##  #    # ### #  ## ##  #      # #       ',
   '          # #  #   # ##  ##  #   #   #  # ##  ##  #   # # # # #### #  ##  # #### #### # #  ##  # #### # #    ',
    '         # #  #  ##  ##  # #   ## ##   # ### ## ##   # # # #  #   #   #  #  ### # #    ###  # #  #   # #     ',
     '        # # #    # ##  ##   #  # ##  ##  ### #   #  # # # ### ## ## ### ## ### ### ## #  ##  ### ## # #      ',
    '         # # ### ##   ## # # #### #   ## # #### # #### # # #   #  # ###  #    # ###  # #    # ###  # # #       ',
     '        # # # #### ##   # #### # #   ## ## ### #### # # # #  ### # ###  ###  # # ###  #    # #  ### # #      ',
);

for my $line (@lines) {
    push @res, decode_UPC($line)
     // decode_UPC(join '', reverse split '', $line)
     // 'Invalid';
}

say my $result = join "\n", @res;

my $ref = <<'END';
924773271019
403944441050
834999676706
939825158811
Invalid
316313718717
214575875608
818778841813
706466743030
653483540435
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
