#!/usr/local/bin/perl
#u# https://rosettacode.org/wiki/Upside-down_numbers
#c# 2023-03-18 >RC
#p# OK
#n# Raku's generative approach better, this is pretty poky

use v5.36;

use Lingua::EN::Numbers qw(num2en_ordinal);

sub comma { reverse ((reverse shift) =~ s/(.{3})/$1,/gr) =~ s/^,//r }
sub table ($c, @V) { my $t = $c * (my $w = 5); ( sprintf( ('%'.$w.'d')x@V, @V) ) =~ s/.{1,$t}\K/\n/gr }

sub updown ($n) {
    my($i,@ud);
    while (++$i) {
        next if substr($i, '0', 0) or 0 != ($i+reverse $i) % 10;
        my @i = split '', $i;
        next if grep { 10 != $i[$_] + $i[$#i-$_] } 0..$#i;
        push @ud, $i and $n == @ud and last
    }
    @ud
}

my @ud = updown( 500 ); # 5000

my $result = "First fifty upside-downs:\n" . table 10, @ud[0..49];
$result .= "\n" . ucfirst num2en_ordinal($_) . ': ' . comma $ud[$_-1] for 500; #, 5000;

say $result;

my $ref = <<'END';
First fifty upside-downs:
    5   19   28   37   46   55   64   73   82   91
  159  258  357  456  555  654  753  852  951 1199
 1289 1379 1469 1559 1649 1739 1829 1919 2198 2288
 2378 2468 2558 2648 2738 2828 2918 3197 3287 3377
 3467 3557 3647 3737 3827 3917 4196 4286 4376 4466

Five hundredth: 494,616
END

#Five thousandth: 56,546,545
#Fifty thousandth: 6,441,469,664
#Five hundred thousandth: 729,664,644,183
#Five millionth: 82,485,246,852,682

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
