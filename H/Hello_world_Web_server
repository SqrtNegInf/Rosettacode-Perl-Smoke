#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Hello_world/Web_server
#t# interactive
#c# 2018-08-12 <RC
#p# OK
#n# commented out whole Plack solution, can't get module to install
#n# 5.36 requires \xd -> \x0d

my $result;

use strict;
use warnings;
use feature 'say';

use Socket;

my $port = 8080;
my $protocol = getprotobyname( "tcp" );

socket( SOCK, PF_INET, SOCK_STREAM, $protocol ) or die "couldn't open a socket: $!";
  # PF_INET to indicate that this socket will connect to the internet domain
  # SOCK_STREAM indicates a TCP stream, SOCK_DGRAM would indicate UDP communication

setsockopt( SOCK, SOL_SOCKET, SO_REUSEADDR, 1 ) or die "couldn't set socket options: $!";
  # SOL_SOCKET to indicate that we are setting an option on the socket instead of the protocol
  # mark the socket reusable

bind( SOCK, sockaddr_in($port, INADDR_ANY) ) or die "couldn't bind socket to port $port: $!";
  # bind our socket to $port, allowing any IP to connect

listen( SOCK, SOMAXCONN ) or die "couldn't listen to port $port: $!";
  # start listening for incoming connections

while( accept(CLIENT, SOCK) ){
  print CLIENT "HTTP/1.1 200 OK\r\n" .
               "Content-Type: text/html; charset=UTF-8\r\n\r\n" .
               "<html><head><title>Goodbye, world!</title></head><body>Goodbye, world!</body></html>\r\n";
  close CLIENT;
}

# Various modules exist for using sockets, including the popular IO::Socket
# which provides a simpler and more friendly OO interface for the socket layer.
# Here is the solution using this module:

use IO::Socket::INET;

my $sock = IO::Socket::INET->new( LocalAddr => "127.0.0.1:8080",
                                  Listen    => 1,
                                  Reuse     => 1, ) or die "Could not create socket: $!";

while( my $client = $sock->accept() ){
  print $client "HTTP/1.1 200 OK\r\n" .
                "Content-Type: text/html; charset=UTF-8\r\n\r\n" .
                "<html><head><title>Goodbye, world!</title></head><body>Goodbye, world!</body></html>\r\n";
  close $client;
}

# Using Perl's glue power, provide a note with visitor counter via netcat:
while (++(our $vn)) {
  open my $NC, "|-", qw(nc -l -p 8080 -q 1);
  print $NC "HTTP/1.0 200 OK\x0d\x0a",
      "Content-type: text/plain; charset=utf-8\x0d\x0a\x0d\x0a",
      "Goodbye, World! (hello, visitor No. $vn!)\x0d\x0a";
}

__END__
# Here's another solution using Plack (may be found on CPAN):
use Plack::Runner;
my $app = sub {
    return [ 200,
       [ 'Content-Type' => 'text/html; charset=UTF-8' ],
       [ '<html><head><title>Goodbye, world!</title></head><body>Goodbye, world!</body></html>' ]
     ]
};
my $runner = Plack::Runner->new;
$runner->parse_options('--host' => 'localhost', '--port' => 8080);
$runner->run($app);

# When using plackup, then this may be compressed to one line:
my $app = sub { return [ 200, [ 'Content-Type' => 'text/html; charset=UTF-8' ], [ '<html><head><title>Goodbye, world!</title></head><body>Goodbye, world!</body></html>' ] ] };
# Use plackup --host localhost --port 8080 script.psgi to start the webserver.
