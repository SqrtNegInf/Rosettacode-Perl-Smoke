#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Handle_a_signal
#t# interactive
#c# 2018-08-12 <RC
#p# OK
#n# as written, works with really old Perl
#n# 5.36 notes 'useless use' (same as earlier Perls)

#use strict; # b/c of time-waster loop
#use warnings; #         "

# Before version 5.8 sleep requires an integer argument, so we'll spin (There exist more obtuse methods)

my $start = time;   # seconds since epoch
my $arlm=5;         # every 5 seconds show how we're doing
my $i;

$SIG{QUIT} = sub
   {print " Ran for ", time - $start, " seconds.\n"; die; };
$SIG{INT} = sub
   {print " Running for ", time - $start, " seconds.\n"; };
$SIG{ALRM} = sub
   {print " After $arlm  seconds i= $i. Executing for ",  time - $start, " seconds.\n";  alarm $arlm };

 
alarm $arlm;  # trigger ALaRM after we've run  for a while

print " ^C to interrupt, ^\\ to quit, takes a break at $arlm seconds \n";

my $w = 0;
while ( 1 ) {
   for ( $w=11935000; $w--; $w>0 ){}; # spinning is bad, but hey it's only a demo
   print (  ++$i," \n");
}

__END__

use AnyEvent;
my $start = AE::time;
my $exit = AE::cv;
my $int = AE::signal 'INT', $exit;
my $n;
my $num = AE::timer 0, 0.5, sub { say $n++ };
$exit->recv;
say " interrupted after ", AE::time - $start, " seconds";
