#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Jaro_distance
#c# 2018-08-14 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

my @res;

use List::Util qw(min max);

sub jaro {
    my ($s, $t) = @_;
    my(@s_matches, @t_matches, $matches);

    return 1 if $s eq $t;

    my $s_len = length $s; my @s = split //, $s;
    my $t_len = length $t; my @t = split //, $t;

    my $match_distance = int(max($s_len, $t_len) / 2) - 1;
    foreach my $i (0 .. $#s) {
        my $start = max(0, $i - $match_distance);
        my $end   = min($i + $match_distance + 1, $t_len);

        foreach my $j ($start .. $end - 1) {
            next if $t_matches[$j] or $s[$i] ne $t[$j];
            ($s_matches[$i], $t_matches[$j]) = (1, 1);
            $matches++ and last;
        }
    }
    return 0 unless $matches;

    my($k, $transpositions) = (0, 0);
    for my $i (0 .. $#s) {
        next unless $s_matches[$i];
        until ($t_matches[$k]) { $k++ }
        $transpositions++ if $s[$i] ne $t[$k];
        $k++;
    }

    ( $matches/$s_len + $matches/$t_len + (($matches - $transpositions/2) / $matches) ) / 3;
}

for (['MARTHA', 'MARHTA'], ['DIXON', 'DICKSONX'], ['JELLYFISH', 'SMELLYFISH'],
     ['I repeat myself', 'I repeat myself'], ['', '']
    ) {
        push @res, sprintf '%.3f', jaro(@$_[0], @$_[1])
}

say my $result = join("\n", @res); 

my $ref = <<'EOD';
0.944
0.767
0.896
1.000
1.000
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
