#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/RC_REMOTE
#t# skiptest
#c# 2019-05-xx >RC
#p# OK

use Data::Printer;

use strict;
use warnings;
use feature 'say';
#my $result;
#my @res;

use ntheory qw/fromdigits todigitstring/;
my $n = 36;
my $n36 = todigitstring($n, 36) || 0;
my $n10 = fromdigits($n36, 36);
say $n36;
say $n10;

__END__

unit sub MAIN ($key = 'Perl 6');

srand $key.comb(/<.alnum>/).join.parse-base(36) % 2**63;

# random but reproducible infinite stream of characters
my @stream = (flat ' ' .. '~').roll(*);

sub jit-encode (Str $str) {
    my $i = 0;
    my $last = 0;
    my $enc = '';
    for $str.comb -> $c {
        my $h;
        my $l = '';
        ++$i until $c eq @stream[$i];
        my $o = $i - $last;
        $l    = $o % 26;
        $h    = $o - $l if $o > 26;
        $l   += 10;
        $enc ~= ($h ?? $h.base(36).uc !! '') ~ ($l.base(36).lc);
        $last = $i;
    }
    $enc
}

sub jit-decode (Str $str) {
    $str ~~ m:g/((.*?) (<:Ll>))/;
    my $dec = '';
    my $i = 0;
    for $/.List -> $l {
        my $o = ($l[0][1].Str.parse-base(36) - 10 // 0) +
                ($l[0][0].Str.parse-base(36) // 0);
        $i += $o;
        $dec ~= @stream[$i];
    }
    $dec
}

my $enc = jit-encode('In my opinion, this task is pretty silly.');

say my $result = "Encoded\n$enc\n\nDecoded\n" ~ jit-decode($enc);

my $ref = q:to/END/;
Encoded
26j52dhl2Wp1Gw2WceQj1Go3MyQc1Gd52a1Gb1Ga2Wcq26o4Cwf3MiQsQn2Wglk3MhkQyeQjas3MkQn2Wd26aaQcQj

Decoded
In my opinion, this task is pretty silly.
END

use Test;
is $result, chomp $ref;

# say $result; 
# say my $result = join "\n", @res;
my $ref = <<'EOD';
EOD

use Test::More;
#chomp $ref;
#is($result, $ref);
#done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre style="height:20ex"></pre>
[https://github.com/SqrtNegInf/Rosettacode-Perl5-Smoke/blob/master/ref/XXX XXX]
