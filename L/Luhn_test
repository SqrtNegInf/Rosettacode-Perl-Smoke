#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Luhn_test
#c# 2018-08-07 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

use Test::More;

sub luhn_test
{
        my @rev = reverse split //,$_[0];
        my ($sum1,$sum2,$i) = (0,0,0);

        for(my $i=0;$i<@rev;$i+=2)
        {
                $sum1 += $rev[$i];
                last if $i == $#rev;
                $sum2 += 2*$rev[$i+1]%10 + int(2*$rev[$i+1]/10);
        }
        return ($sum1+$sum2) % 10 == 0;
}
is(luhn_test('49927398716'),1);
is(luhn_test('49927398717'),'');
is(luhn_test('1234567812345678'),'');
is(luhn_test('1234567812345670'),1);

# Or using map( ) and a precomputed array:

sub luhn {
    my (@n,$i,$sum) = split //, reverse $_[0];
    my @a = map {int(2*$_ / 10) + (2*$_ % 10)} (0..9);
    map {$sum += $i++ % 2 ? $a[$_] : $_} @n;
    return ($sum % 10) ? 0 : 1;
}

# Test and display
map {$result .= luhn($_). ": $_\n"}
    <49927398716 49927398717 1234567812345678 1234567812345670>;

say $result; 
my $ref = <<'EOD';
1: 49927398716
0: 49927398717
0: 1234567812345678
1: 1234567812345670
EOD

is ($result, $ref);
done_testing;
