#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Lucky_and_even_lucky_numbers
#t# skiptest
#c# 2018-09-19 >RC
#p# OK
#n# command-line version

use strict;
use warnings;
use feature 'say';

use Perl6::GatherTake;

sub luck {
my($a,$b) = @_;

gather {
	my $i = $b;
    my(@taken,@rotor,$j);

    take 0; # 0th index is a placeholder
	push @taken, take $a;
 
	while () {
	    for (my $j = 0; $j < @rotor; $j++) {
		    --$rotor[$j] or last;
	    }
	    if ($j < @rotor) {
		    $rotor[$j] = $taken[$j+1];
	    }
	    else {
		    take $i;
		    push @taken, $i;
		    push @rotor, $i - @taken;
	    }
	    $i += 2;
	}
}

}

# fiddle with user input
my $j = shift || usage();
my $k = shift || ',';
my $l = shift || 'lucky';
usage() unless $k =~ /,|-?\d+/;
usage() unless $l =~ /^(even)?lucky$/i;
sub usage { print "Args must be:  j [,|k|-k] [lucky|evenlucky]\n" and exit }

# seed the iterator
my $lucky = $l =~ /^l/i ? luck(1,3) : luck(2,4);

# access values from pseudo-lazy array
if ($k eq ',') {
    print $lucky->[$j]
} elsif ($k > $j) { 
    print $lucky->[$_] . ' ' for $j..$k
} elsif ($k < 0) {
    my $i;
    while() { last if abs($k) < $lucky->[$i++] } # extend the array as needed
    print join ' ', grep { $_ >= $j and $_ <= abs($k) } @$lucky
}

print "\n";
