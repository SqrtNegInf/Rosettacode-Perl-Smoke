#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Largest_palindrome_product
#c# 2021-11-03 >RC
#p# OK
#n# enormous memory requirements as length goes up

my @res;

use strict;
use warnings;
use feature 'say';

use ntheory 'divisors';

for my $l (2..7) {
    LOOP: 
    for my $p (reverse map { $_ . reverse $_ } 10**($l-1) .. 10**$l - 1)  {
        my @f = reverse grep { length == $l } divisors $p; 
        next unless @f >= 2 and $p == $f[0] * $f[1];
        push @res, "Largest palindromic product of two @{[$l]}-digit integers: $f[1] × $f[0] = $p" and last LOOP;
    }
}

say my $result = join "\n", @res;

my $ref = <<'END';
Largest palindromic product of two 2-digit integers: 91 × 99 = 9009
Largest palindromic product of two 3-digit integers: 913 × 993 = 906609
Largest palindromic product of two 4-digit integers: 9901 × 9999 = 99000099
Largest palindromic product of two 5-digit integers: 99681 × 99979 = 9966006699
Largest palindromic product of two 6-digit integers: 999001 × 999999 = 999000000999
Largest palindromic product of two 7-digit integers: 9997647 × 9998017 = 99956644665999
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();
