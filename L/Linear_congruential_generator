#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Linear_congruential_generator
#c# 2018-08-15 <RC
#p# OK
#n# 2023-03-20 '$seed = 0' not working?

my $result;

use v5.36.0;

# Creates a magic scalar whose value is next in the LCG sequence when read.
package LCG {

use integer;
use overload '0+'  => \&get;
no warnings 'uninitialized';

sub gen_bsd ($seed = 0) { 
    (1103515245 * $seed + 12345) % (1 << 31) 
}

sub gen_ms ($seed = 0) {
	my $s = (214013 * $seed + 2531011) % (1 << 31);
	$s, $s / (1 << 16)
}

#sub set ($k,$v) { $k->{seed} = $v }  # never reached?

sub get ($o, $, $) {
	($o->{seed}, my $r) = $o->{meth}->($o->{seed});
	$r //= $o->{seed}
}

sub new ($cls, %opts) {
	bless {
		seed => $opts{seed},
		meth => $opts{meth} eq 'MS' ? \&gen_ms : \&gen_bsd,
	}, ref $cls || $cls;
}

}

my $rand = LCG->new;

$result .= "BSD:\n";
$result .= "$rand\n" for 1 .. 10;

$rand = LCG->new(meth => 'MS');

$result .= "\nMS:\n";
$result .= "$rand\n" for 1 .. 10;

say $result; 

my $ref = <<'EOD';
BSD:
12345
1406932606
654583775
1449466924
229283573
1109335178
1051550459
1293799192
794471793
551188310

MS:
38
7719
21238
2437
8855
11797
8365
32285
10450
30612
EOD

use Test::More;
is ($result, $ref);
done_testing;
