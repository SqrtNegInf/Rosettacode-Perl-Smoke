#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Lychrel_numbers
#c# 2018-08-17 <RC, 2021-01-18 >RC
#p# OK
#n# main utility of Const::Fast here seems to be the string interpolation of $n_max

my @res;

use strict;
use warnings;
use feature 'say';

use English;
#use bigint;
use Math::AnyNum qw(:overload); # 2x faster

use Const::Fast;
const my $n_max => 10_000;
#const my $iter_cutoff => 500;

use constant n_max       => 10_000;
use constant iter_cutoff => 500;

my(@seq_dump, @seed_lychrels, @related_lychrels);

#for my $n (1 .. $n_max) {  # does not work due to value out-of-bounds (and unrelated to Math::AnyNum)
for (my $n=1; $n<=n_max; $n++) {
    my @seq = lychrel_sequence($n);
    if (iter_cutoff == scalar @seq) {
        if (has_overlap(\@seq, \@seq_dump)) { push @related_lychrels, $n }
        else                                { push @seed_lychrels,    $n }
        @seq_dump = set_union(\@seq_dump, \@seq);
    }
}
push @res, "Number of seed Lychrels <= $n_max: "    . scalar     @seed_lychrels;
push @res, "Seed Lychrels <= $n_max: "              . join ', ', @seed_lychrels;
push @res, "Number of related Lychrels <= $n_max: " . scalar     @related_lychrels;
push @res, "Palindromes among seed and related <= $n_max: " .
      join ', ', sort {$a <=> $b} grep { is_palindrome($ARG) } @seed_lychrels, @related_lychrels;

sub lychrel_sequence {
    my $n = shift;
    my @seq;
    for (1 .. iter_cutoff) {
        return if is_palindrome($n = next_n($n));
        push @seq, $n
    }
    @seq;
}

sub next_n        { my $n = shift; $n  + reverse($n) }
sub is_palindrome { my $n = shift; $n eq reverse($n) }

sub has_overlap {
    my ($a, $b) = @_;
    my %h;
    $h{$_}++ for @{$a};
    exists $h{$_} and return 1 for @{$b};
    0;
}

sub set_union {
    my ($a, $b) = @_;
    my %h;
    $h{$_}++ for @{$a}, @{$b};
    keys %h;
}

say my $result = join "\n", @res; 

my $ref = <<'EOD';
Number of seed Lychrels <= 10000: 5
Seed Lychrels <= 10000: 196, 879, 1997, 7059, 9999
Number of related Lychrels <= 10000: 244
Palindromes among seed and related <= 10000: 4994, 8778, 9999
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
