#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Lucky_and_even_lucky_numbers
#c# 2018-09-18 >RC
#p# OK
#n# calculating 10000th 1st lets the grep for 6000-6100 work, pre-extends the pseudo-lazy list

use strict;
use warnings;
use feature 'say';
my $result;

use Perl6::GatherTake;

sub luck {
my($a,$b) = @_;

gather {
    my $i = $b;
    my(@taken,@rotor,$j);

    take 0; # 0th index is a placeholder
    take $a;
    push @taken, $a;
 
    while () {
        for ($j = 0; $j < @rotor; $j++) {
            --$rotor[$j] or last;
        }
        if ($j < @rotor) {
            $rotor[$j] = $taken[$j+1];
        }
        else {
            take $i;
            push @taken, $i;
            push @rotor, $i - @taken;
        }
        $i += 2;
    }
}

}

my $lucky  = luck(1,3);
my $elucky = luck(2,4);

$result .= $lucky->[$_] . ' '  for 1..20; $result .= "\n";
$result .= $elucky->[$_] . ' ' for 1..20; $result .= "\n";

$result .=  $lucky->[10000] . "\n";
$result .= $elucky->[10000] . "\n";

my $min = 6000; my $max = 6100;
$result .= (join ' ', grep { $_ >= $min and $_ <= $max } @$lucky ). "\n";
$result .= (join ' ', grep { $_ >= $min and $_ <= $max } @$elucky). "\n";

say $result;

my $ref = <<'END';
1 3 7 9 13 15 21 25 31 33 37 43 49 51 63 67 69 73 75 79 
2 4 6 10 12 18 20 22 26 34 36 42 44 50 52 54 58 68 70 76 
115591
111842
6009 6019 6031 6049 6055 6061 6079 6093
6018 6020 6022 6026 6036 6038 6050 6058 6074 6090 6092
END

use Test::More;
is($result,$ref);
done_testing;
