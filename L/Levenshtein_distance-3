#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Levenshtein_distance
#c# 2021-03-31 NOT ON RC
#p# OK
#n# from: https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-096/abigail/perl/ch-2.pl
#n# https://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm
#n# similar to -2 version, but a little more clearly written

use v5.36.0;

use List::Util 'min';

sub LevenshteinDistance ($first, $second) {
    my $distance;
    for (my $i = 0; $i <= length ($first); $i ++) {
        for (my $j = 0; $j <= length ($second); $j ++) {
            $$distance [$i] [$j] =
                $i == 0 || $j == 0 ? $i + $j
              : min ($$distance [$i - 1] [$j]     + 1,
                     $$distance [$i]     [$j - 1] + 1,
                     $$distance [$i - 1] [$j - 1] + 
                        (substr ($first,  $i - 1, 1) eq
                         substr ($second, $j - 1, 1) ? 0 : 1))
        }

        # We only need the previous row; this reduces the memory
        # from Theta (N * M) to O (N + M), where N and M are the
        # lengths of the input strings.
        undef $$distance [$i - 1] if $i;
    }
    $$distance [-1] [-1];
}

say my $result = LevenshteinDistance 'rosettacode', 'raisethysword';

use Test::More;
is ($result, 8);
done_testing();
