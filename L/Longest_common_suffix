#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Longest_common_suffix
#c# 2020-07-25 >RC
#p# OK
#n# sub-optimal display of strings containing blanks

use strict;
use warnings;
use feature 'say';

my @res;

# If the strings are known not to contain null-bytes, we can let the regex backtracking engine find the longest common suffix like this:

sub lcs {
    for (0..$#_) { $_[$_] = join '', reverse split '', $_[$_] }
    join '', reverse split '', (join("\0", @_) =~ /^ ([^\0]*) [^\0]* (?:\0 \1 [^\0]*)* $/sx)[0];
}

for my $words (
  [ <Sunday Monday Tuesday Wednesday Thursday Friday Saturday> ],
  [ <Sondag Maandag Dinsdag Woensdag Donderdag Vrydag Saterdag dag> ],
  [ 2347, 9312347, 'acx5g2347', 12.02347 ],
  [ <longest common suffix> ],
  [ ('one, Hey!', 'three, Hey!', 'ale, Hey!', 'me, Hey!') ],
  [ 'suffix' ],
  [ '' ]) {
    push @res, qq{'@$words' ==> '@{[lcs(@$words)]}'};
}

say my $result = join "\n", @res;

my $ref = <<'EOD';
'Sunday Monday Tuesday Wednesday Thursday Friday Saturday' ==> 'day'
'Sondag Maandag Dinsdag Woensdag Donderdag Vrydag Saterdag dag' ==> 'dag'
'2347 9312347 acx5g2347 12.02347' ==> '2347'
'longest common suffix' ==> ''
'one, Hey! three, Hey! ale, Hey! me, Hey!' ==> 'e, Hey!'
'suffix' ==> 'suffix'
'' ==> ''
EOD

use Test::More;
chop $ref;
is ($result, $ref);
done_testing();
