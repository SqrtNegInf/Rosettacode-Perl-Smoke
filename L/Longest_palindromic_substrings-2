#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Longest_palindromic_substrings
#c# 2020-11-18 <RC, 2023-04-04 >RC
#p# OK

use strict;
use warnings;
use feature <say bitwise>;

my $forward = lc do { local $/; @ARGV ? <> : <DATA> };
$forward =~ s/\W+//g;

my $range = 10;
my $backward = reverse $forward;
my $length = length $forward;
my @best = {"''" => 0};
my $len;
for my $i ( 1 .. $length - 2 ) {
  do {
    my $right = substr $forward, $i, $range;
    my $left = substr $backward, $length - $i, $range;
    ( $right ^. $left ) =~ /^\0\0+/ and                                # evens
      ($len = 2 * length $&) >= $#best and
      $best[ $len ]{substr $forward, $i - length $&, $len}++;
    ( $right ^. "\0" . $left ) =~ /^.(\0+)/ and                        # odds
      ($len = 1 + 2 * length $1) >= $#best and
      $best[ $len ]{substr $forward, $i - length $1, $len}++;
  } while $range < $#best and $range = $#best;
}

say my $result = "Longest Palindrome ($#best) : @{[ keys %{ $best[-1] } ]}\n";

my $ref = <<'EOD';
Longest Palindrome (27) : ootimanamregalagermanamitoo
EOD

use Test::More;
is ($result, $ref);
done_testing();

__DATA__
this data borrowed from raku...

Never odd or even
Was it a car or a cat I saw?
Too bad I hid a boot
I, man, am regal - a German am I
toot
Warsaw was raw
