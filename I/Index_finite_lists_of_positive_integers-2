#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Index_finite_lists_of_positive_integers
#c# 2018-10-09 >RC
#p# BROKEN

use feature 'say';

#use bigint;

srand 123456;

__END__

# Here is a bijective solution that does not use string operations.

#multi expand(Int $n is copy, 1) { $n }
#multi expand(Int $n is copy, Int $*RADIX) {
multi expand {
    my($n, $RADIX) = @_;
    return $n if $RADIX == 1;

    my @reversed_digits;
    while ($n > 0) {
        push @reversed_digits, $n % $RADIX;
        $n = int $n / $RADIX;
    }

    for (0 .. $RADIX - 1) {
        rad( reverse @reversed_digits[$_, * + $RADIX ... *] );
    }
}

#multi infix:<rad> ()       { 0 }
#multi infix:<rad> ($a)     { $a }
#multi infix:<rad> ($a, $b) { $a * $*RADIX + $b }
sub rad {
    my(@list) = @_;
    return unless @list;
    return $list[0] if @list == 1;
    
    $a * $RADIX + $b
}

#multi compress(@n where @n == 1) { @n[0] }
sub compress {
    my(@n) = @_;
    return $n[0] if @n == 1;
    $RADIX = @n;

    my @temp;
    while( @n.any > 0) {
        #(state $i = 0) %= $RADIX;
        push @temp, @n[$i] % $RADIX;
        $n[$i] = ind $n[$i] / $RADIX;
        $i++;
        }
    #[rad] reverse @temp;
}

sub rank{   my(@n) = @_; compress (compress(@n), @n - 1)}
sub unrank{ my($n) = @_; my ($a, $b) = expand $n, 2; expand $a, $b + 1 }

# [1 0 7 9 5 5 5 7 3 5 5 3] -> 4916298568465569231750539
#my @list = (^10).roll((2..20).pick);
my @list = <1 0 7 9 5 5 5 7 3 5 5 3>;

my $rank = rank @list;

#say my $result = "[$@list] -> $rank -> [{unrank $rank}]";

#for ^10 {
#    my @unrank = unrank $_;
#    say "$_ -> [$@unrank] -> {rank @unrank}";
#}

say $result = join "\n", @res;

my $ref = <<'EOD';
EOD

use Test::More;
@n = sort { -1 + 2*int(rand 2) } 1..1000;
is (@n, unrank(rank(@n)));
chop $ref;
is ($result, $ref);
done_testing();

__END__

=={{header|Perl}}==
{{trans|Perl 6}}
<lang perl></lang>
{{out}}
<pre>
</pre>
