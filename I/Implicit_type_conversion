#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Implicit_type_conversion
#t# nocode
#c# 2018-09-09 >RC
#p# OK

# Perl is the original DWIM language, implicit type conversion is the default mode of operation. Perl does not have static types; the concept of distinct integers/strings/floats is not present. Instead, operators defines how the operands will behave. An operator that requires a string coerces its operand into a string, an operator that requires an integer coerces its operand into an integer, and so forth.

use feature 'say';
#use warnings;

say  1  + '2';    # 3
say '1' + '2';    # 3
say  1  .  1;     # 11


$a = 1;
$b = 2;
say "$a+$b";      # 1+2

# Even if you intentionally jumble the expected roles of numbers and strings, thing just work out
say hex int( (2 . 0 x '2') ** substr 98.5, '2', '2' ) . 'beef'; # 1359599

say 'a' +  1;     # 1   Argument "a" isn't numeric in addition (+)
