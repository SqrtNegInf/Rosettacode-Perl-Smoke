#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Inverted_syntax
#c# 2018-08-13 <RC
#p# OK

my @res;

use strict;
use warnings;
use feature 'say';

my $guess = 6;
if ($guess == 6) { push @res, "Wow! Lucky Guess!"; };    # Traditional syntax
push @res, 'Wow! Lucky Guess!' if $guess == 6;           # Inverted syntax (note missing braces and parens)
unless ($guess == 5) { push @res, "Sorry, your guess was wrong!"; }   # Traditional syntax
push @res, 'Huh! You Guessed Wrong!' unless $guess == 5;              # Inverted syntax

my($ok,$a,$b,$c) = (1,1,2,3);
$a = $ok ? $b : $c;        # Traditional syntax
push @res, $a;
($ok ? $b : $c) = 10*$a;   # Inverted syntax (conditional assignment)
push @res, $b;
push @res, $c;

# We can also emulate inverted syntax for scalar assignment by creating a function as follows:
sub assign { $_[1] = $_[0] }
$a = $b;       # Traditional syntax
assign $b, $a; # Inverted syntax

# Inverted list assignment is not possible because it prevents arrays from flattening.

say my $result = join "\n", @res;

my $ref = <<'END';
Wow! Lucky Guess!
Wow! Lucky Guess!
Sorry, your guess was wrong!
Huh! You Guessed Wrong!
2
20
3
END

use Test::More;
chomp $ref;
is $result, $ref;
done_testing();
