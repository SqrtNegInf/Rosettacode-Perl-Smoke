#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Intersecting_Number_Wheels
#c# 2019-10-08 >RC
#p# OK

use strict;
use warnings;
use feature 'say';

my @res;

sub get_next {
    my($w,%wheels) = @_;
    my $wh = \@{$wheels{$w}}; # reference, not a copy
    my $value = $$wh[0][$$wh[1]];
    $$wh[1] = ($$wh[1]+1) % @{$$wh[0]};
    defined $wheels{$value} ? get_next($value,%wheels) : $value;
}

sub roll_wheel {
    my(%wheels) = @_;
    push @res, "$_: " . join ', ', @{${$wheels{$_}}[0]} for sort keys %wheels;
    push @res, ''; $res[-1] .= get_next('A', %wheels) . ' ' for 1..20; 
}

roll_wheel(%$_) for
(
 {'A' => [['1', '2', '3'], 0]},
 {'A' => [['1', 'B', '2'], 0], 'B' => [['3', '4'], 0]},
 {'A' => [['1', 'D', 'D'], 0], 'D' => [['6', '7', '8'], 0]},
 {'A' => [['1', 'B', 'C'], 0], 'B' => [['3', '4'], 0], 'C' => [['5', 'B'], 0]},
);

say my $result = join "\n", @res;

my $ref = <<'END';
A: 1, 2, 3
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 
A: 1, B, 2
B: 3, 4
1 3 2 1 4 2 1 3 2 1 4 2 1 3 2 1 4 2 1 3 
A: 1, D, D
D: 6, 7, 8
1 6 7 1 8 6 1 7 8 1 6 7 1 8 6 1 7 8 1 6 
A: 1, B, C
B: 3, 4
C: 5, B
1 3 5 1 4 3 1 4 5 1 3 4 1 3 5 1 4 3 1 4 
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
