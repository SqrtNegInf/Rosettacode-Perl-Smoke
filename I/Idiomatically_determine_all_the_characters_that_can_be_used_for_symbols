#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Idiomatically_determine_all_the_characters_that_can_be_used_for_symbols
#c# 2018-09-16 >RC
#p# OK
#n# version on RC is cleaner!

use strict;
use warnings;
use feature 'say';

use utf8;
binmode STDOUT, "utf8:";

# any word character in the ASCII range, as long as the first character is not a digit.
my $allowed;
my $plain = qr/^(?aa) (?!\d) \w+ $/x;
for my $i (0..0x7f) {
    my $c = chr($i);
    $allowed .= $c if $c =~ /\w/;
}

say $allowed;
#my $鲜 = 42; say "The answer is: $鲜"; # DH P::C cannot handle non-Latin variable names

use Test::More;
is($allowed,'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz');
ok '鲜' =~ / (?[ ( \p{Word} & \p{XID_Start} ) + [_] ]) (?[ ( \p{Word} & \p{XID_Continue} ) ]) * /x;
done_testing;

__END__

# what follows is slow and verbose, can be run but you were warned...

for (0..0x1ffff) {
    my $c = chr($_);
    print $c if $c =~ /\p{Word}/;
}

# super slow
for (0x20..0x1ffff) {
    my $hash = charprops_all($_);
    printf "%4x %s\n", $_, $hash->{'Name'} || $hash->{'Unicode_1_Name'};
    next unless $hash->{'White_Space'} =~ /Yes/ or $hash->{'Pattern_White_Space'} =~ /Yes/;
    say "WS!!";
    printf "%4x %s\n", $_, $hash->{'Name'} || $hash->{'Unicode_1_Name'};
}
