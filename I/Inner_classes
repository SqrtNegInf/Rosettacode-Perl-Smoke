#!/usr/local/bin/perl
#u# https://www.rosettacode.org/wiki/Inner_classes
#c# 2024-10-10 <RC
#p# OK

my @res;

use strict;
use warnings;
use feature 'say';

package OuterClass; 
use Moose;
   {
       package InnerClass; 
       use Moose;

       has 'inner_attribute' => (
          is  => 'rw',
          isa => 'Str',
       );

       sub inner_method {
          my $self = shift;
          return "Inner method called with attribute: " . $self->inner_attribute
       }
   }

has 'outer_attribute' => (
   is  => 'rw',
   isa => 'Str',
);

has 'inner_object' => (
   is      => 'rw',
   isa     => 'InnerClass',
   default => sub { InnerClass->new(inner_attribute => 'default inner value') },
);

sub outer_method1 {
    my $self = shift;
    return "Outer method called with attribute: " . $self->outer_attribute . "\n" . $self->inner_object->inner_method;
}

sub outer_method2 {
    my ($self, $data) = @_;
    my $inner =  InnerClass->new(inner_attribute => $data);
    return $inner->inner_method;
}

1;

package main;

my $outer = OuterClass->new(outer_attribute => 'outer value');
push @res, $outer->outer_method1;
push @res, $outer->outer_method2('custom value');

my $inner = InnerClass->new(inner_attribute => 'direct access value');
push @res, $inner->inner_method;

say my $result = join "\n", @res;

my $ref = <<'EOD';
Outer method called with attribute: outer value
Inner method called with attribute: default inner value
Inner method called with attribute: custom value
Inner method called with attribute: direct access value
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
