#!/usr/local/bin/perl
#u# https://rosettacode.org/wiki/Inconsummate_numbers_in_base_10
#c# 2022-09-28 >RC
#p# OK

my @res;

use v5.36;

use List::Util <sum max>;

sub table ($c, @V) { my $t = $c * (my $w = 2 + length max @V); ( sprintf( ('%'.$w.'d')x@V, @V) ) =~ s/.{1,$t}\K/\n/gr }

my $upto = 1e6;

my @cons = (0) x $upto;
for my $i (1..$upto) {
    my $r = $i / sum split '', $i;
    $cons[$r] = 1 if $r eq int $r;
}
my @incons = grep { $cons[$_]==0 } 1..$#cons;

push @res, 'First fifty inconsummate numbers (in base 10):';
push @res, table 10, @incons[0..49];
push @res, "One thousandth: " . $incons[999];

say my $result = join "\n", @res;

my $ref = <<'END';
First fifty inconsummate numbers (in base 10):
   62   63   65   75   84   95  161  173  195  216
  261  266  272  276  326  371  372  377  381  383
  386  387  395  411  416  422  426  431  432  438
  441  443  461  466  471  476  482  483  486  488
  491  492  493  494  497  498  516  521  522  527

One thousandth: 6996
END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing();

__END__

=={{header|Perl}}==
<syntaxhighlight lang="perl" line>use v5.36;
use List::Util <sum max>;

sub table ($c, @V) { my $t = $c * (my $w = 2 + length max @V); ( sprintf( ('%'.$w.'d')x@V, @V) ) =~ s/.{1,$t}\K/\n/gr }

my $upto = 1e6;
my @cons = (0) x $upto;
for my $i (1..$upto) {
    my $r = $i / sum split '', $i;
    $cons[$r] = 1 if $r eq int $r;
}
my @incons = grep { $cons[$_]==0 } 1..$#cons;

say 'First fifty inconsummate numbers (in base 10):';
say table 10, @incons[0..49];
say "One thousandth: " . $incons[999];
</syntaxhighlight>
{{out}}
<pre>First fifty inconsummate numbers (in base 10):
   62   63   65   75   84   95  161  173  195  216
  261  266  272  276  326  371  372  377  381  383
  386  387  395  411  416  422  426  431  432  438
  441  443  461  466  471  476  482  483  486  488
  491  492  493  494  497  498  516  521  522  527

One thousandth: 6996
</pre>
