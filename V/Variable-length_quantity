#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Variable-length_quantity
#c# 2018-08-06 <RC
#p# OK
#n# 2023-03-16 a little nicer (but not on RC)

# The vlg_encode sub returns an array of octets in most -> least significant order. Simply reverse the array to reverse the order.

my $result;

use v5.36.0;

for my $testcase (
    0,   0xa,   123,   254,   255,   256,
    257, 65534, 65535, 65536, 65537, 0x1fffff,
    0x200000
  )
{
    my @vlq = vlq_encode($testcase);
    $result .= sprintf "%8s %12s %8s\n", $testcase, ( join ':', @vlq ), vlq_decode(@vlq);
}

sub vlq_encode ($number) {
    my @vlq;
    my $binary = (sprintf '%s%b', 0 x 7, $number) =~ s/(.{7})$//r;
    @vlq = ( unpack 'H2', ( pack 'B8', '0' . $1 ) );
    while ( 0 + $binary ) {
        $binary =~ s/(.{7})$//;
        unshift @vlq, ( unpack 'H2', pack 'B8', '1' . $1 );
    }
    @vlq
}

sub vlq_decode (@q) {
    my $num;
    $num .= sprintf '%07b', hex(shift @q) & 0x7f while @q;
    oct '0b' . $num
}

say $result; 

my $ref = <<'EOD';
       0           00        0
      10           0a       10
     123           7b      123
     254        81:7e      254
     255        81:7f      255
     256        82:00      256
     257        82:01      257
   65534     83:ff:7e    65534
   65535     83:ff:7f    65535
   65536     84:80:00    65536
   65537     84:80:01    65537
 2097151     ff:ff:7f  2097151
 2097152  81:80:80:00  2097152
EOD

use Test::More;
is ($result, $ref);
done_testing();
