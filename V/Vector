#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Vector
#c# 2018-08-06 <RC
#p# OK

use feature 'say';
my $result;


# Typically we would use a module, such as Math::Vector::Real or Math::Complex. Here is a very basic Moose class.

package Vector;
use Moose;
use feature 'say';

use overload '+' => \&add,
             '-' => \&sub,
             '*' => \&mul,
             '/' => \&div,
             '""' => \&stringify;

has 'x' => (is =>'rw', isa => 'Num', required => 1);
has 'y' => (is =>'rw', isa => 'Num', required => 1);

sub add {
  my($a, $b) = @_;
  Vector->new( x => $a->x + $b->x, y => $a->y + $b->y);
}
sub sub {
  my($a, $b) = @_;
  Vector->new( x => $a->x - $b->x, y => $a->y - $b->y);
}
sub mul {
  my($a, $b) = @_;
  Vector->new( x => $a->x * $b, y => $a->y * $b);
}
sub div {
  my($a, $b) = @_;
  Vector->new( x => $a->x / $b, y => $a->y / $b);
}
sub stringify {
  my $self = shift;
  "(" . $self->x . "," . $self->y . ')';
}

package main;

my $a = Vector->new(x => 5, y => 7);
my $b = Vector->new(x => 2, y => 3);
$result .= "a:    $a\n";
$result .= "b:    $b\n";
$result .= "a+b:  ".($a+$b) . "\n";
$result .= "a-b:  ".($a-$b) . "\n";
$result .= "a*11: ".($a*11) . "\n";
$result .= "a/2:  ".($a/2 ). "\n";

say $result; 
my $ref = <<'EOD';
a:    (5,7)
b:    (2,3)
a+b:  (7,10)
a-b:  (3,4)
a*11: (55,77)
a/2:  (2.5,3.5)
EOD

use Test::More;
is ($result, $ref);
done_testing();
