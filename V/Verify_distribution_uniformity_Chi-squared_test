#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Verify_distribution_uniformity/Chi-squared_test
#c# 2018-09-17 >RC
#p# OK

use strict;
use warnings;
use feature 'say';
my @res;

#For the incomplete gamma function we use a series expansion related to Kummer's confluent hypergeometric function
#(see http://en.wikipedia.org/wiki/Incomplete_gamma_function#Evaluation_formulae). The gamma function is calculated
#in closed form, as we only need its value at integers and half integers.

use List::Util qw(sum reduce);
use constant pi => 2 * atan2(1, 0);

sub incomplete_G_series {
    my($s, $z) = @_;
    my $n = 10;
    my @numers;
    push @numers, $z**$_ for 1..$n;
    my @denoms = $s+1;
    push @denoms, $denoms[-1]*($s+$_) for 2..$n;
    my $M = 1;
    $M += $numers[$_-1]/$denoms[$_-1] for 1..$n;
    $z**$s / $s * exp(-$z) * $M;
}
 
# DH - code is wrong for $n%2 case, and never called anyhow 
#sub G_of_half {
#    my($n) = @_;
#    if ($n % 2) { (f(2*$_) / (4**$_ * f($_)) * sqrt(pi)) for int ($n-1) / 2 }
#    else        { f(($n/2)-1) }
#}

sub f { reduce { $a * $b } 1, 1 .. $_[0] }
 
sub chi_squared_cdf {
    my($k, $x) = @_;
    my $f = $k < 20 ? 20 : 10;
    if ($x == 0)                  { 0.0 }
    #elsif ($x < $k + $f*sqrt($k)) { incomplete_G_series($k/2, $x/2) / G_of_half($k) }
    elsif ($x < $k + $f*sqrt($k)) { incomplete_G_series($k/2, $x/2) / f(($k/2)-1) }
    else                          { 1.0 }
}
 
sub chi_squared_test {
    my(@bins) = @_;
    my $significance = 0.05;
    my $n = @bins;
    my $N = sum @bins;
    my $expected = $N / $n;
    my $chi_squared = sum map { ($_ - $expected)**2 / $expected } @bins;
    my $p_value = 1 - chi_squared_cdf($n-1, $chi_squared);
    return $chi_squared, $p_value, $p_value > $significance ? 'True' : 'False';
}
 
for my $dataset ([199809, 200665, 199607, 200270, 199649], [522573, 244456, 139979, 71531, 21461]) {
    push @res, sprintf "C2 = %10.3f, p-value = %.3f, uniform = %s", chi_squared_test(@$dataset);
}

say my $result = join "\n", @res;

my $ref = <<'END';
C2 =      4.146, p-value = 0.387, uniform = True
C2 = 790063.276, p-value = 0.000, uniform = False
END

use Test::More;
chop $ref;
is($result,$ref);
done_testing();
