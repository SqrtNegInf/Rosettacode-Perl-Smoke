#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Rodrigues%27_rotation_formula
#c# 2021-09-29 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

#use JSON;
use Math::Trig;

use constant PI => 2 * atan2(1, 0); #3.14159265358979;
 
sub norm {
    my($v)=@_;
    ($v->[0]*$v->[0] + $v->[1]*$v->[1] + $v->[2]*$v->[2]) ** 0.5;
}

sub normalize {
    my($v)=@_;
    my $length = &norm($v);
    [$v->[0]/$length, $v->[1]/$length, $v->[2]/$length];
}

sub dotProduct {
    my($v1, $v2)=@_;
    $v1->[0]*$v2->[0] + $v1->[1]*$v2->[1] + $v1->[2]*$v2->[2];
}

sub crossProduct {
    my($v1, $v2)=@_;
    [$v1->[1]*$v2->[2] - $v1->[2]*$v2->[1], $v1->[2]*$v2->[0] - $v1->[0]*$v2->[2], $v1->[0]*$v2->[1] - $v1->[1]*$v2->[0]];
}

sub getAngle {
    my($v1, $v2)=@_;
    acos(&dotProduct($v1, $v2) / (&norm($v1)*&norm($v2)))*180/PI;
}

sub matrixMultiply {
    my($matrix, $v)=@_;
    [&dotProduct($matrix->[0], $v), &dotProduct($matrix->[1], $v), &dotProduct($matrix->[2], $v)];
}

sub aRotate {
    my($p, $v, $a)=@_;
    my $ca = cos($a/180*PI);
    my $sa = sin($a/180*PI);
    my $t=1-$ca;
    my($x,$y,$z)=($v->[0], $v->[1], $v->[2]);
    my $r = [
        [$ca + $x*$x*$t, $x*$y*$t - $z*$sa, $x*$z*$t + $y*$sa],
        [$x*$y*$t + $z*$sa, $ca + $y*$y*$t, $y*$z*$t - $x*$sa],
        [$z*$x*$t - $y*$sa, $z*$y*$t + $x*$sa, $ca + $z*$z*$t]
    ];
    &matrixMultiply($r, $p);
}
 
my $v1  = [5,-6,4];
my $v2  = [8,5,-30];
my $a   = &getAngle($v1, $v2);
my $cp  = &crossProduct($v1, $v2);
my $ncp = &normalize($cp);
my $np  = &aRotate($v1, $ncp, $a);
 
#my $json=JSON->new->canonical; 
#print $json->encode($np);

say my $result = join ' ', @$np;

my $ref = <<'EOD';
2.23222107330823 1.39513817081764 -8.37082902490585
EOD

use Test::More;
chomp $ref;
is ($result, $ref);
done_testing();
