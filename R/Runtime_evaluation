#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Runtime_evaluation
#c# 2018-08-18 <RC
#p# OK

use strict;
use warnings;
use feature 'say';

# The eval function accepts a block or a string as its argument. The
# difference is that a block is parsed at compile-time, whereas a string is
# parsed at runtime. The block or string may represent any valid Perl
# program, including a single expression. The subprogram executes in the same
# lexical and dynamic scope as the surrounding code. The return value of a
# call to eval depends on how the subprogram terminates:

# If control reaches the end of the subprogram, eval returns the value of the last expression evaluated.
# If the subprogram uses an explicit return, eval returns the given value.
# If the subprogram throws an exception, eval returns undef. The text of the exception is assigned to $@ 
# (when the subprogram terminates without an exception, $@ is set to the null string instead.)

my ($a, $b) = (-5, 7);
say my $ans = eval 'abs($a * $b)';  # => 35

use Test::More;
is ($ans, 35);
done_testing;
