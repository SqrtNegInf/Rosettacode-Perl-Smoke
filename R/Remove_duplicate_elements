#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Remove_duplicate_elements
#c# 2018-08-18 <RC
#p# OK

use strict;
use warnings;
use feature 'say';
my $result;

# Library: List::MoreUtils
#(this version even preserves the order of first appearance of each element)

use List::MoreUtils 'uniq';

my @uniq1 = uniq <1 2 3 a b c 2 3 4 b c d>;

# It is implemented like this:
my %seen;
my @uniq2 = grep {!$seen{$_}++} <1 2 3 a b c 2 3 4 b c d>;

# Note: the following two solutions convert elements to strings in the result, so if you give it references they will lose the ability to be dereferenced.

# Alternately:
my %hash = map { $_ => 1 } <1 2 3 a b c 2 3 4 b c d>;
my @uniq3 = sort keys %hash;

# Alternately:
%seen = ();
@seen{<1 2 3 a b c 2 3 4 b c d>} = ();
my @uniq4 = sort keys %seen;

say $result = join "\n", (join ' ', @uniq1), (join ' ', @uniq2), (join ' ', @uniq3), (join ' ', @uniq4); 

my $ref = <<'EOD';
1 2 3 a b c 4 d
1 2 3 a b c 4 d
1 2 3 4 a b c d
1 2 3 4 a b c d
EOD

use Test::More;
chop $ref;
is ($result, $ref);
done_testing;
