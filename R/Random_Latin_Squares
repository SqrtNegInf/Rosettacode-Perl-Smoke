#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Random_Latin_Squares
#c# 2019-12-16 >RC
#p# OK

use strict;
use warnings;
use feature 'say';

use List::Util 'shuffle';

my @res;

srand 12345;

sub random_ls {
    my($n) = @_;
    my(@cols,@symbols,@ls_sym);

    # build n-sized latin square
    my @ls = [0,];
    for my $i (1..$n-1) {
        @{$ls[$i]} = @{$ls[0]};
        splice(@{$ls[$_]}, $_, 0, $i) for 0..$i;
    }

    # shuffle rows and columns
    @cols = shuffle 0..$n-1;
    @ls = map [ @{$_}[@cols] ], @ls[shuffle 0..$n-1];

    # replace numbers with chars
    @symbols = shuffle( ('A'..'Z')[0..$n-1] ); 
    push @ls_sym, [@symbols[@$_]] for @ls;
    @ls_sym
}

sub as_square {
    my $str;
    $str .= join(' ', @$_) . "\n" for @_;
    $str
}

push @res, as_square random_ls($_) for 5, 2..5;

say my $result = join "\n", @res;

my $ref = <<'END';
E D C B A
C E B A D
A B D E C
B C A D E
D A E C B

B A
A B

A B C
B C A
C A B

A B D C
B D C A
C A B D
D C A B

C E A B D
E A D C B
B C E D A
D B C A E
A D B E C

END

use Test::More;
chomp $ref;
is($result, $ref);
done_testing;
