#!/usr/local/bin/perl
#u# http://rosettacode.org/wiki/Ramanujan%27s_constant
#c# 2019-04-25 <RC
#p# OK
#n# could partly simplify with ':overload', but still need 'Math::AnyNum->pi', as it depends on 
#n# $Math::AnyNum::PREC which is varies at runtine ('use Math::AnyNum qw(pi)' is fixed at startup)
#n# Translation of: Sidef  -- trizen++

use strict;
use warnings;
use feature 'say';
use Math::AnyNum;

my $result;

sub ramanujan_const {
    my ($x, $decimals) = @_;

    $x = Math::AnyNum->new($x);
    my $prec = (Math::AnyNum->pi * $x->sqrt)/log(10) + $decimals + 1;
    local $Math::AnyNum::PREC = 4*$prec->round->numify;
 
    exp(Math::AnyNum->pi * $x->sqrt)->round(-$decimals)->stringify;
}

my $decimals = 100;
$result .= sprintf("Ramanujan's constant to $decimals decimals:\n%s\n\n", ramanujan_const(163, $decimals));

$result .= "Heegner numbers yielding 'almost' integers:\n";
my @tests = (19, 96, 43, 960, 67, 5280, 163, 640320);
while (@tests) {
    my ($h, $x) = splice(@tests, 0, 2);
    my $c = ramanujan_const($h, 32);
    my $n = Math::AnyNum::ipow($x, 3) + 744;
    $result .= sprintf("%3s: %51s ≈ %18s (diff: %s)\n", $h, $c, $n, ($n - $c)->round(-32));
}

say $result; 

my $ref = <<'EOD';
Ramanujan's constant to 100 decimals:
262537412640768743.9999999999992500725971981856888793538563373369908627075374103782106479101186073129511813461860645042

Heegner numbers yielding 'almost' integers:
 19:             885479.77768015431949753789348171962682 ≈             885480 (diff: 0.22231984568050246210651828037318)
 43:          884736743.99977746603490666193746207858538 ≈          884736744 (diff: 0.00022253396509333806253792141462)
 67:       147197952743.99999866245422450682926131257863 ≈       147197952744 (diff: 0.00000133754577549317073868742137)
163: 262537412640768743.99999999999925007259719818568888 ≈ 262537412640768744 (diff: 0.00000000000074992740280181431112)
EOD

use Test::More;
is ($result, $ref);
done_testing();
